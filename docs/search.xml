<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/movie/friends/"/>
      <url>/movie/friends/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/codes/a-tour-of-cpp-3rd/"/>
      <url>/codes/a-tour-of-cpp-3rd/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.stroustrup.com/tour3.html">https://www.stroustrup.com/tour3.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/game/god-of-war/"/>
      <url>/game/god-of-war/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/book/the-hitchhiker-s-guide/"/>
      <url>/book/the-hitchhiker-s-guide/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>clang-rename</title>
      <link href="/codes/clang-rename/"/>
      <url>/codes/clang-rename/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> a &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> a = <span class="number">42</span>) : <span class="built_in">a</span>(a) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// namespace a</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    a::A a;</span><br><span class="line">    std::cout &lt;&lt; a.a &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">clang-rename --qualified-name=a::A::a --new-name=a_ main.cc</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">include &lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line">namespace a &#123;</span><br><span class="line"></span><br><span class="line">struct A &#123;</span><br><span class="line">    int a_;</span><br><span class="line">    A(int a = 42) : a_(a) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;  // namespace a</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    a::A a;</span><br><span class="line">    std::cout &lt;&lt; a.a_ &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash - Bourne Again Shell</title>
      <link href="/codes/bash/"/>
      <url>/codes/bash/</url>
      
        <content type="html"><![CDATA[<h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><ul><li><code>-c</code> 命令来自第一个非选项参数，如果命令字符串后面还有参数，第一个参数赋值给$0，后面的参数依次排序，例如执行<code>bash -c &#39;echo $@&#39; 1 2 3 4</code>的输出为<code>2 3 4</code></li><li><code>-i</code> interactive，交互式</li><li><code>-l</code> 或 <code>--login</code> 让bash的行为类似于登录shell</li><li><code>-r</code> 受限的bash</li><li><code>-s</code> 如果有 -s 选项，或者如果选项处理完以后，没有参数剩余，那么命令将从标准输入读取。 这个选项允许在启动一个交互 shell 时可以设置位置参数。</li><li><code>-v</code> shell读取的时候打印输入行</li><li><code>-x</code> 执行的时候打印命令及参数</li><li><code>-D</code> 向标准输出打印一个以 $ 为前导的，以双引号引用的字符串列表。 这是在当前语言环境不是 C 或 POSIX 时，脚本中需要翻译的字符串。 这个选项隐含了 -n 选项；不会执行命令</li><li><code>[-+]O [shopt_option]</code> <code>shopt_option</code> 是一个 shopt 内建命令可接受的选项 (参见下面的 shell 内建命令(SHELL BUILTIN COMMANDS) 章节)。 如果有 <code>shopt_option</code>，-O 将设置那个选项的取值； +O 取消它。 如果没有给出 <code>shopt_option</code>，shopt 将在标准输出上打印设为允许的选项的名称和值。 如果启动选项是 +O，输出将以一种可以重用为输入的格式显示。</li><li><code>--</code> – 标志选项的结束，禁止其余的选项处理。任何 – 之后的参数将作为文件名和参数对待。参数 - 与此等价</li><li>内建命令<code>set</code>中的单字符选项也可以使用</li></ul><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>没有指定 -c 或 -s 选项下，第一个参数将假定为一个包含 shell 命令的文件的名字。 如果 bash 是以这种方式启动的， $0 将设置为这个文件的名字，位置参数将设置为剩余的其他参数。 Bash 从这个文件中读取并执行命令，然后退出。 Bash 的退出状态是脚本中执行的最后一个命令的退出状态。 如果没有执行命令，退出状态是0。 尝试的步骤是先试图打开在当前目录中的这个文件，接下来， 如果没有找到，shell 将搜索脚本的 PATH 环境变量中的路径</p><h2 id="builtins"><a href="#builtins" class="headerlink" title="builtins"></a>builtins</h2><h3 id=""><a href="#" class="headerlink" title=":"></a>:</h3><p><code>: [arguments]</code></p><p>扩展参数，执行重定向外什么也不做，退出状态为0</p><h3 id="-1"><a href="#-1" class="headerlink" title="."></a>.</h3><p><code>. filename [arguments]</code></p><p>在当前shell上下文中读取和执行的filename中的命令。退出状态是最后执行的命令的退出状态；如果未执行任何命令，则返回零。如果找不到文件名或无法读取文件名，则返回状态为非零。此内置命令等价于<code>source</code></p><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p><code>break [n]</code></p><p>从<code>for</code>, <code>while</code>, <code>until</code> 或 <code>select</code>中退出。 如果提供了n，则退出第n个循环。n必须大于或等于1。返回状态为零，除非n不是大于或等于1。</p><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p><code>continue [n]</code></p><p>继续循环的下一次迭代，其它同<code>break</code></p><h2 id="IFS"><a href="#IFS" class="headerlink" title="IFS"></a>IFS</h2><p>IFS的默认值为空白字符（换行符、制表符或者空格）。</p><h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">alias</span>             <span class="comment"># 列出所有别名</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">alias</span> -p          <span class="comment"># 同上</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -l&#x27;</span>  <span class="comment"># 创建/覆盖别名</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">alias</span> ll          <span class="comment"># 打印别名的名称和值</span></span></span><br><span class="line">alias ll=&#x27;ls -l&#x27;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">unalias</span> ll        <span class="comment"># 取消别名</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">alias</span> ll</span></span><br><span class="line">bash: alias: ll: not found</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">alias</span> ll=</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">alias</span> ll</span></span><br><span class="line">alias ll=&#x27;&#x27;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">alias</span> <span class="built_in">ls</span>=<span class="string">&#x27;ls -l&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">\<span class="built_in">ls</span>               <span class="comment"># 忽略别名, 执行原本的命令</span></span></span><br></pre></td></tr></table></figure><h2 id="arithmetic"><a href="#arithmetic" class="headerlink" title="arithmetic"></a>arithmetic</h2><ul><li><code>(( expression ))</code></li><li><code>let &quot;expression&quot;</code></li></ul><p>如果表达式的值非零，则返回状态为0;否则返回状态为1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i=0</span><br><span class="line">((i++))</span><br><span class="line">echo $i         # 1</span><br><span class="line">((i = i + 1))</span><br><span class="line">echo $i         # 2</span><br><span class="line">let &quot;i = i * 5&quot;</span><br><span class="line">echo $i         # 10</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="普通数组"><a href="#普通数组" class="headerlink" title="普通数组"></a>普通数组</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">array_var=(test1 test2 test3 test4) # 这些值将会存储在以0为起始索引的连续位置上</span><br><span class="line">echo $&#123;array_var[0]&#125;                # test1</span><br><span class="line"></span><br><span class="line">array_var[0]=ttt</span><br><span class="line">echo $&#123;array_var[0]&#125;                # ttt</span><br><span class="line"></span><br><span class="line">i=3</span><br><span class="line">echo $&#123;array_var[$i]&#125;               # test4</span><br><span class="line"></span><br><span class="line">array_var[4]=test5</span><br><span class="line">echo $&#123;array_var[*]&#125;                # ttt test2 test3 test4 test5</span><br><span class="line"></span><br><span class="line">array_var[10]=test6</span><br><span class="line">echo $&#123;array_var[*]&#125;                # ttt test2 test3 test4 test5 test6</span><br><span class="line">echo $&#123;array_var[@]&#125;                # ttt test2 test3 test4 test5 test6</span><br><span class="line">echo $&#123;#array_var[*]&#125;               # 6</span><br><span class="line">echo $&#123;!array_var[*]&#125;               # 0 1 2 3 4 10</span><br><span class="line"></span><br><span class="line">array_var[-1]=test7</span><br><span class="line">echo $&#123;array_var[*]&#125;                # ttt test2 test3 test4 test5 test7</span><br><span class="line">echo $&#123;!array_var[*]&#125;               # 0 1 2 3 4 10</span><br><span class="line"></span><br><span class="line">array_var[-2]=test8</span><br><span class="line">echo $&#123;array_var[*]&#125;                # ttt test2 test3 test4 test5 test8 test7</span><br><span class="line">echo $&#123;!array_var[*]&#125;               # 0 1 2 3 4 9 10</span><br></pre></td></tr></table></figure><h3 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h3><p>首先，需要使用声明语句将一个变量定义为关联数组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">declare -A ass_array                # 使用声明语句将一个变量定义为关联数组</span><br><span class="line"></span><br><span class="line">ass_array=([index1]=val1 [index2]=val2)</span><br><span class="line">echo $&#123;ass_array[index1]&#125;           # val1</span><br><span class="line"></span><br><span class="line">ass_array[index3]=val3</span><br><span class="line">echo $&#123;ass_array[index3]&#125;           # val3</span><br><span class="line"></span><br><span class="line">echo $&#123;#ass_array[*]&#125;               # 3</span><br><span class="line">echo $&#123;ass_array[*]&#125;                # val1 val3 val2</span><br><span class="line">echo $&#123;!ass_array[*]&#125;               # index1 index3 index2</span><br></pre></td></tr></table></figure><h2 id="Job-Control"><a href="#Job-Control" class="headerlink" title="Job Control"></a>Job Control</h2><p><code>bg, fg, jobs, kill, wait, disown, suspend</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./main &amp;</span></span><br><span class="line">[1] 32598</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">jobs</span></span></span><br><span class="line">[1]+  运行中               ./main &amp;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./main</span></span><br><span class="line">^Z</span><br><span class="line">[2]+  已停止               ./main</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">jobs</span></span></span><br><span class="line">[1]-  运行中               ./main &amp;</span><br><span class="line">[2]+  已停止               ./main</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">bg</span> %2</span></span><br><span class="line">[2]+ ./main &amp;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">jobs</span></span></span><br><span class="line">[1]-  运行中               ./main &amp;</span><br><span class="line">[2]+  运行中               ./main &amp;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">fg</span> %2</span></span><br><span class="line">./main</span><br><span class="line">^C</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">kill</span> %1</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">[1]+  已终止               ./main</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./main &amp;</span></span><br><span class="line">[1] 32679</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">disown</span> %1</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">jobs</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pgrep main</span></span><br><span class="line">32679</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">kill</span> -l</span></span><br><span class="line"> 1) SIGHUP  2) SIGINT  3) SIGQUIT  4) SIGILL  5) SIGTRAP</span><br><span class="line"> 6) SIGABRT  7) SIGBUS  8) SIGFPE  9) SIGKILL 10) SIGUSR1</span><br><span class="line">11) SIGSEGV 12) SIGUSR2 13) SIGPIPE 14) SIGALRM 15) SIGTERM</span><br><span class="line">16) SIGSTKFLT 17) SIGCHLD 18) SIGCONT 19) SIGSTOP 20) SIGTSTP</span><br><span class="line">21) SIGTTIN 22) SIGTTOU 23) SIGURG 24) SIGXCPU 25) SIGXFSZ</span><br><span class="line">26) SIGVTALRM 27) SIGPROF 28) SIGWINCH 29) SIGIO 30) SIGPWR</span><br><span class="line">31) SIGSYS 34) SIGRTMIN 35) SIGRTMIN+1 36) SIGRTMIN+2 37) SIGRTMIN+3</span><br><span class="line">38) SIGRTMIN+4 39) SIGRTMIN+5 40) SIGRTMIN+6 41) SIGRTMIN+7 42) SIGRTMIN+8</span><br><span class="line">43) SIGRTMIN+9 44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13</span><br><span class="line">48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12</span><br><span class="line">53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9 56) SIGRTMAX-8 57) SIGRTMAX-7</span><br><span class="line">58) SIGRTMAX-6 59) SIGRTMAX-5 60) SIGRTMAX-4 61) SIGRTMAX-3 62) SIGRTMAX-2</span><br><span class="line">63) SIGRTMAX-1 64) SIGRTMAX</span><br></pre></td></tr></table></figure><h2 id="内建命令-builtin"><a href="#内建命令-builtin" class="headerlink" title="内建命令 builtin"></a>内建命令 builtin</h2><ul><li>内建命令不需要使用子进程来执行，包括<code>cd</code>, <code>exit</code>, <code>type</code>, <code>alias</code>, <code>.</code>, <code>echo</code>, <code>history</code>等</li></ul><h2 id="case"><a href="#case" class="headerlink" title="case"></a>case</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">case word in</span><br><span class="line">    [ [(] pattern [| pattern]…) command-list ;;]…</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">read ans</span><br><span class="line">case $ans in</span><br><span class="line">    y | Y | yes | YES)</span><br><span class="line">    echo &#x27;YES&#x27;</span><br><span class="line">    ;;</span><br><span class="line">    n | N | no | NO)</span><br><span class="line">    echo &#x27;NO&#x27;</span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">    echo &#x27;??&#x27;</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>每个case子句以<code>;;</code>， <code>;&amp;</code> 或 <code>;;&amp;</code>结束</p><ul><li><code>;;</code>     在第一次模式匹配之后不尝试后续匹配</li><li><code>;&amp;</code>     在第一次模式匹配之后继续执行下一条子句</li><li><code>;;&amp;</code>     在第一次模式匹配之后继续匹配，并在匹配的子句处往下执行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">read ans</span><br><span class="line">case $ans in</span><br><span class="line">    1)</span><br><span class="line">    echo 1;</span><br><span class="line">    ;&amp;          # 输入1，输出为1 2</span><br><span class="line">    2)</span><br><span class="line">    echo 2;     # 输入2，输出为2</span><br><span class="line">    ;;</span><br><span class="line">    3)</span><br><span class="line">    echo 3;     # 输入3，输出为3 ??</span><br><span class="line">    ;;&amp;</span><br><span class="line">    *)</span><br><span class="line">    echo &#x27;??&#x27;</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>类比C语言的<code>switch</code>， <code>;;</code> 即 C语言中的<code>break</code>， <code>;&amp;</code>为不加<code>break</code>的分支，<code>;;&amp;</code>则再进行一次匹配</p><h2 id="退出状态"><a href="#退出状态" class="headerlink" title="退出状态"></a>退出状态</h2><p>如果没有匹配项，退出状态为0，否则为执行命令的退出状态</p><h2 id="echo-显示字符串"><a href="#echo-显示字符串" class="headerlink" title="echo - 显示字符串"></a>echo - 显示字符串</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">type</span> <span class="built_in">echo</span></span></span><br><span class="line">echo 是 shell 内建</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;hello,  world.&quot;</span></span></span><br><span class="line">hello,  world.</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> hello,  world</span></span><br><span class="line">hello, world</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$0</span></span></span><br><span class="line">/bin/bash</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> $?</span></span><br><span class="line">0</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> $$</span></span><br><span class="line">4728</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$HOME</span></span></span><br><span class="line">/home/liph</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> `<span class="built_in">date</span> +%F`</span></span><br><span class="line">2020-07-13</span><br></pre></td></tr></table></figure><p>选项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-n     不输出尾随的换行符</span><br><span class="line">-E     禁用解释反斜杠的转义功能（默认）</span><br><span class="line">-e     启用解释反斜杠的转义功能</span><br><span class="line">  若 -e 可用，则以下序列即可识别：</span><br><span class="line"> \\     反斜线</span><br><span class="line"> \a     报警符(BEL)</span><br><span class="line"> \b     退格符</span><br><span class="line"> \c     禁止尾随的换行符</span><br><span class="line"> \e     escape 字符</span><br><span class="line"> \f     换页符</span><br><span class="line"> \n     另起一行</span><br><span class="line"> \r     回到行首</span><br><span class="line"> \t     水平制表符</span><br><span class="line"> \v     垂直制表符</span><br><span class="line"> \0NNN  字节数以八进制数 NNN (1至3位)表示</span><br><span class="line"> \xHH   字节数以十六进制数 HH (1至2位)表示</span><br></pre></td></tr></table></figure><h2 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h2><p>exec命令创建全新的文件描述符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exec 3&lt;input.txt    #使用文件描述符3打开并读取文件</span><br><span class="line">exec 4&gt;output.txt   #打开文件进行写入</span><br><span class="line">exec 5&gt;&gt;input.txt</span><br></pre></td></tr></table></figure><h2 id="Shell-扩展"><a href="#Shell-扩展" class="headerlink" title="Shell 扩展"></a>Shell 扩展</h2><p>Shell有7种扩展，扩展的顺序是大括号扩展；波浪号扩展；参数和变量扩展；算术扩展；命令替换；单词拆分；文件名扩展。如果系统支持，还有一种扩展：进程替换，它和波浪号、参数、变量、算术扩展以及命令替换是同时进行的。</p><h3 id="大括号扩展"><a href="#大括号扩展" class="headerlink" title="大括号扩展"></a>大括号扩展</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> a&#123;a,b,c&#125;</span></span><br><span class="line">aa ab ac</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> 0&#123;1..9&#125;</span></span><br><span class="line">01 02 03 04 05 06 07 08 09</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> 0&#123;1..9..3&#125;</span></span><br><span class="line">01 04 07</span><br></pre></td></tr></table></figure><h3 id="波浪号扩展"><a href="#波浪号扩展" class="headerlink" title="波浪号扩展"></a>波浪号扩展</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~           /home/liph</span><br><span class="line">~liph       /home/liph</span><br><span class="line">~root       /root</span><br><span class="line">~/tmp       /home/liph/tmp</span><br><span class="line">~+          $PWD</span><br><span class="line">~-          $OLDPWD</span><br><span class="line">~N          dirs +N</span><br><span class="line">~+N         dirs +N</span><br><span class="line">~-N         dirs -N</span><br></pre></td></tr></table></figure><h3 id="参数扩展"><a href="#参数扩展" class="headerlink" title="参数扩展"></a>参数扩展</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;parameter:−word&#125;</span>    如果参数没有设置或为空，替换为单词；否则为参数</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;parameter:=word&#125;</span>    如果参数没有设置或为空，把单词赋值给参数</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;parameter:?word&#125;</span>    如果参数没有设置或为空，把单词写到标准错误，退出shell</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;parameter:+word&#125;</span>    如果参数没有设置或为空，不进行任何替换；否则替换为单词</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;parameter:offset&#125;</span>   参数:偏移量</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;parameter:offset:length&#125;</span> 参数:偏移量:长度，如果长度是负数，则表示结尾的偏移量</span></span><br><span class="line"></span><br><span class="line">str=&#x27;hello, world&#x27;</span><br><span class="line">echo $&#123;#str&#125;            # 12, 长度</span><br><span class="line">echo $&#123;str:0:$&#123;#str&#125;&#125;   # hello, world</span><br><span class="line">echo $&#123;str:1&#125;           # ello, world</span><br><span class="line">echo $&#123;str:1:-1&#125;        # ello, worl</span><br><span class="line">echo $&#123;str:-1&#125;          # hello, world</span><br><span class="line"></span><br><span class="line">echo $&#123;var&#125;             #</span><br><span class="line">echo $&#123;var:-abc&#125;        # abc</span><br><span class="line">echo $&#123;var&#125;             #</span><br><span class="line">echo $&#123;var:=abc&#125;        # abc</span><br><span class="line">echo $&#123;var&#125;             # abc</span><br><span class="line">echo $&#123;var:=bcd&#125;        # abc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$&#123;new:?bcd&#125;</span></span></span><br><span class="line">echo $&#123;var:?bcd&#125;        # abc</span><br><span class="line"></span><br><span class="line">echo $&#123;var2:+bcd&#125;</span><br><span class="line">echo $&#123;var:+bcd&#125;        # bcd</span><br><span class="line">echo $&#123;var&#125;             # abc</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;!prefix*&#125;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;!prefix@&#125;</span> 扩展为名称中含有前缀的变量，以IFS的第一个字符分隔。如果使用了@，并且在双引号内扩展，则每个变量都扩展成单独的单词</span></span><br><span class="line">var1=hello</span><br><span class="line">var2=world</span><br><span class="line">echo $&#123;!var*&#125;           # var1 var2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;!name[@]&#125;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;!name[*]&#125;</span> 如果名称是个数组，扩展成数组下标或者key列表</span></span><br><span class="line">array=(a b c)</span><br><span class="line">echo $&#123;!array[*]&#125;       # 0 1 2</span><br><span class="line">array[100]=xyz</span><br><span class="line">echo $&#123;!array[*]&#125;       # 0 1 2 100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;#parameter&#125;</span> 参数扩展后的字符数，如果是带下标*/@的数组名，则为数组中的元素个数</span></span><br><span class="line">echo $&#123;#var1&#125;           # 5</span><br><span class="line">echo $&#123;#array[*]&#125;       # 4</span><br><span class="line">echo $&#123;#array&#125;          # 1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;parameter#word&#125;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;parameter##word&#125;</span> 单词被扩展成一个模式，如果模式匹配参数扩展后的开始部分，则替换的结果是该模式最短(<span class="comment">#)或最长(##)匹配参数扩展的部分被删除后的字符串</span></span></span><br><span class="line">var=&#x27;a1a1a1&#x27;</span><br><span class="line">echo $&#123;var#a*a&#125;       # 1a1</span><br><span class="line">echo $&#123;var##a*a&#125;      # 1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;parameter%word&#125;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;parameter%%word&#125;</span> 同上，从后匹配</span></span><br><span class="line">echo $&#123;var%1*1&#125;       # a1a</span><br><span class="line">echo $&#123;var%%1*1&#125;      # a</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;parameter/pattern/string&#125;</span></span></span><br><span class="line">var=0a1a</span><br><span class="line">echo $&#123;var/a/A&#125;     # 0A1a 替换第一个</span><br><span class="line">echo $&#123;var//a/A&#125;    # 0A1A 全替换</span><br><span class="line">echo $&#123;var/#a/A&#125;    # 0a1a 替换开头的第一个</span><br><span class="line">echo $&#123;var/%a/A&#125;    # 0a1A 替换结尾的第一个</span><br><span class="line">echo $&#123;var/a/&#125;      # 01a</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;parameter^pattern&#125;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;parameter^^pattern&#125;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;parameter,pattern&#125;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;parameter,,pattern&#125;</span> 大小写替换</span></span><br><span class="line">var=abCD</span><br><span class="line">echo $&#123;var^*&#125;   # AbCD</span><br><span class="line">echo $&#123;var^^*&#125;  # ABCD</span><br><span class="line">echo $&#123;var,*&#125;   # abCD, 把a替换小写，无变化</span><br><span class="line">echo $&#123;var,,*&#125;  # abcd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$&#123;parameter@operator&#125;</span> Q E P A a</span></span><br><span class="line">var=abc\ d</span><br><span class="line">echo $&#123;var@Q&#125;   # &#x27;abc d&#x27;, 即quote</span><br><span class="line">echo $&#123;var@E&#125;   # abc d, 即escape</span><br><span class="line">var=&#x27;\u&#x27;</span><br><span class="line">echo $&#123;var@P&#125;   # liph, 即prompt, 按PS1方式展开</span><br><span class="line">echo $&#123;var@A&#125;   # var=&#x27;\u&#x27;, 即assignment</span><br><span class="line">readonly var</span><br><span class="line">echo $&#123;var@A&#125;   # declare -r var=&#x27;\u&#x27;</span><br><span class="line">echo $&#123;var@a&#125;   # r, 即attribute，获取属性</span><br></pre></td></tr></table></figure><h3 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(cmd) or `cmd`</span><br></pre></td></tr></table></figure><h3 id="算术扩展"><a href="#算术扩展" class="headerlink" title="算术扩展"></a>算术扩展</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(( exp ))</span><br></pre></td></tr></table></figure><h3 id="进程替换"><a href="#进程替换" class="headerlink" title="进程替换"></a>进程替换</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;(list)    or    &gt;(list)</span><br><span class="line"></span><br><span class="line">&#x27;&lt;&#x27; 或 &#x27;&gt;&#x27; 与左边括号之间不能有空格，否则会被解释成重定向</span><br></pre></td></tr></table></figure><h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><p><code>fc, history</code></p><h3 id="fc"><a href="#fc" class="headerlink" title="fc"></a>fc</h3><p><code>fc [-e ename] [-lnr] [first] [last]</code></p><p>从历史列表中列出或者重新编辑并执行命令。<br>FIRST 和 LAST 变量可以是数字用于指定范围，或者 FIRST 可以是字符串，意味着以这个字符串打头的最近的一个命令</p><ul><li>-e 编辑器， 如果不指定则为 <code>$&#123;FCEDIT:-$&#123;EDITOR:-vi&#125;&#125;</code></li><li>-l 列出行而不编辑</li><li>-n 列举时省略行号</li><li>-r 反转行的顺序(最新行在前)</li></ul><p><code>fc -s [pat=rep] [command]</code></p><p>命令会在替换之后被重新执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sduo apt update</span></span><br><span class="line">bash: sduo：未找到命令</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">fc</span> -s sduo=sudo</span></span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p><code>history [n]</code> 列出最后n行历史命令，每个被修改的条目加上 <code>*</code> 前缀</p><p><code>history -c</code> 删除所有条目从而清空历史列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">history</span> -c</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">history</span></span></span><br><span class="line">    1  history</span><br></pre></td></tr></table></figure><p><code>history -d offset</code> 从指定位置删除历史列表。负偏移量将从历史条目末尾开始计数</p><p><code>history -d start-end</code> 删除start 与 end 之间的历史列表</p><p><code>history [-anrw] [filename]</code></p><ul><li>-a    将当前会话的历史行追加到历史文件中</li><li>-n    从历史文件中读取所有未被读取的行并且将它们附加到历史列表</li><li>-r    读取历史文件并将内容追加到历史列表中</li><li>-w    将当前历史写入到历史文件中</li></ul><p><code>history -ps arg</code></p><ul><li>-p 对每一个 ARG 参数展开历史并显示结果，而不存储到历史列表中</li><li>-s 以单条记录追加 ARG 到历史列表中</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><ul><li><code>name () compound-command [ redirections ]</code></li><li><code>function name [()] compound-command [ redirections ]</code></li></ul><p>复合命令<code>(Compound Commands)</code>包括循环，条件与组分组命令<code>(Grouping Commands)</code></p><h3 id="退出状态-1"><a href="#退出状态-1" class="headerlink" title="退出状态"></a>退出状态</h3><p>函数定义的退出状态为零，除非出现语法错误或已存在同名的只读函数。在执行时，如果给定一个数值参数返回<code>(return)</code>，这是函数的返回状态；否则，函数的返回状态是返回前执行的最后一个命令的退出状态<br>。</p><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fname; # 使用函数名执行函数</span><br><span class="line">fname arg1 arg2; # 传递参数</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function func()</span><br><span class="line">&#123;</span><br><span class="line">    echo $1;</span><br><span class="line">    echo &quot;$@&quot;;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">func hello world;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$0是脚本名称。</span><br><span class="line">$1是第一个参数。</span><br><span class="line">$2是第二个参数。</span><br><span class="line">$n是第n个参数。</span><br><span class="line">&quot;$@&quot;被扩展成&quot;$1&quot;&quot;$2&quot;&quot;$3&quot;等。</span><br><span class="line">&quot;$*&quot;被扩展成&quot;$1c$2c$3&quot;，其中c是IFS的第一个字符。</span><br><span class="line">&quot;$@&quot;要比&quot;$*&quot;用得多。由于&quot;$*&quot;将所有的参数当作单个字符串，因此它很少被使用。</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function func()</span><br><span class="line">&#123;</span><br><span class="line">    echo hello;</span><br><span class="line">    sleep 1;</span><br><span class="line">    func;</span><br><span class="line">&#125;</span><br><span class="line">func;</span><br></pre></td></tr></table></figure><p>bash也支持递归函数，自身调用自己（或循环调用）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:()&#123; :|:&amp; &#125;;: # fork 炸弹，&quot;:&quot; 可作为函数名</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>使用<code>local</code>定义变量将仅对函数及其调用的命令可见</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">func1()</span><br><span class="line">&#123;</span><br><span class="line">    local var=&#x27;func1 local&#x27;</span><br><span class="line">    func2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func2()</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;In func2, var = $var&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var=global</span><br><span class="line">func1           # =&gt; In func2, var = func1 local</span><br></pre></td></tr></table></figure><h2 id="Grouping-Commands"><a href="#Grouping-Commands" class="headerlink" title="Grouping Commands"></a>Grouping Commands</h2><p><code>( list )</code></p><p>在圆括号之间放置一列命令将创建一个子shell环境，列表中的每个命令将在该子shell中执行。由于该列表是在子shell中执行的，所以在子shell完成后，变量分配将不再有效。</p><p><code>&#123; list; &#125;</code></p><p>在花括号之间放置一个命令列表将导致该列表在当前shell上下文中执行。不创建子shell。必须使用列表后面的分号(或换行符)。</p><p>此外，大括号是保留字，因此必须用空格或其他shell元字符将它们与列表分隔开。括号是操作符，即使它们与列表之间没有空格，shell也会将它们识别为单独的标记。这两个构造的退出状态都是list的退出状态。</p><h2 id="比较与测试"><a href="#比较与测试" class="headerlink" title="比较与测试"></a>比较与测试</h2><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>用法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if condition;</span><br><span class="line">then</span><br><span class="line">    commands;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>以及</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if condition;</span><br><span class="line">then</span><br><span class="line">    commands;</span><br><span class="line">elif condition;</span><br><span class="line">then</span><br><span class="line">    commands;</span><br><span class="line">else</span><br><span class="line">    commands;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="算术比较"><a href="#算术比较" class="headerlink" title="算术比较"></a>算术比较</h3><p>比较条件通常被放置在封闭的中括号内。一定要注意在[ 或 ]与操作数之间有一个空格。如果忘记了这个空格，脚本就会报错。</p><p>对变量或值进行算术条件测试：</p><p><code>[ $var -eq 0 ]</code>  当$var等于0时，返回真<br><code>[ $var -ne 0 ]</code>  当$var不为0时，返回真</p><p>其他重要的操作符如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-gt：大于。</span><br><span class="line">-lt：小于。</span><br><span class="line">-ge：大于或等于。</span><br><span class="line">-le：小于或等于。</span><br></pre></td></tr></table></figure><p>-a是逻辑与操作符，-o是逻辑或操作符。可以按照下面的方法结合多个条件进行测试：<code>[ $var1 -ne 0 -a $var2 -gt 2 ]</code> 以及 <code>[ $var1 -ne 0 -o $var2 -gt 2 ]</code></p><h3 id="文件系统相关测试"><a href="#文件系统相关测试" class="headerlink" title="文件系统相关测试"></a>文件系统相关测试</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ -f $file_var ]：如果给定的变量包含正常的文件路径或文件名，则返回真。</span><br><span class="line">[ -x $var ]：如果给定的变量包含的文件可执行，则返回真。</span><br><span class="line">[ -d $var ]：如果给定的变量包含的是目录，则返回真。</span><br><span class="line">[ -e $var ]：如果给定的变量包含的文件存在，则返回真。</span><br><span class="line">[ -c $var ]：如果给定的变量包含的是一个字符设备文件的路径，则返回真。</span><br><span class="line">[ -b $var ]：如果给定的变量包含的是一个块设备文件的路径，则返回真。</span><br><span class="line">[ -w $var ]：如果给定的变量包含的文件可写，则返回真。</span><br><span class="line">[ -r $var ]：如果给定的变量包含的文件可读，则返回真。</span><br><span class="line">[ -L $var ]：如果给定的变量包含的是一个符号链接，则返回真。</span><br></pre></td></tr></table></figure><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><p>进行字符串比较时，最好用双中括号，因为有时候采用单个中括号会产生错误。双中括号是Bash的一个扩展特性。如果出于性能考虑，使用ash或dash来运行脚本，那么将无法使用该特性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[[ $str1 = $str2 ]]：当str1等于str2时，返回真。也就是说，str1和str2包含的文本是一模一样的。</span><br><span class="line">[[ $str1 == $str2 ]]：这是检查字符串是否相同的另一种写法。测试两个字符串是否不同。</span><br><span class="line">[[ $str1 != $str2 ]]：如果str1和str2不相同，则返回真。</span><br><span class="line">[[ $str1 &gt; $str2 ]]：如果str1的字母序比str2大，则返回真。</span><br><span class="line">[[ $str1 &lt; $str2 ]]：如果str1的字母序比str2小，则返回真。</span><br><span class="line">[[ -z $str1 ]]：如果str1为空串，则返回真。</span><br><span class="line">[[ -n $str1 ]]：如果str1不为空串，则返回真。</span><br></pre></td></tr></table></figure><h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><p>test命令可以用来测试条件。用test可以避免使用过多的括号，增强代码的可读性。[]中的测试条件同样可以用于test命令。</p><p><code>if  [ $var -eq 0 ]; then echo &quot;True&quot;; fi</code> 可以写<code>if  test $var -eq 0 ; then echo &quot;True&quot;; fi</code></p><p>test是一个外部程序，需要衍生出对应的进程，而 [ 是Bash的一个内部函数，因此后者的执行效率更高。test兼容于Bourne shell、ash、dash等。</p><h1 id="Lists-of-Commands"><a href="#Lists-of-Commands" class="headerlink" title="Lists of Commands"></a>Lists of Commands</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cmd1 &amp;&amp; cmd2    # 当且仅当cmd1退出状态为0才执行cmd2</span><br><span class="line">cmd1 || cmd2    # 当且仅当cmd1退出状态不为0才执行cmd2</span><br><span class="line">cmd1 ; cmd2     # 按顺序执行cmd1，cmd2</span><br><span class="line">cmd &amp;           # 后台异步执行cmd</span><br></pre></td></tr></table></figure><p>优先级 &amp;&amp; 和 || 相同，优于优先级相同的 ; 和 &amp;</p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p><code>for name [ [in [lists …] ] ; ] do commands; done</code><br><code>for (( expr1 ; expr2 ; expr3 )) ; do commands ; done</code></p><h3 id="面向列表的for循环"><a href="#面向列表的for循环" class="headerlink" title="面向列表的for循环"></a>面向列表的for循环</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for var in list;</span><br><span class="line">do</span><br><span class="line">    commands;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>list可以是一个字符串，也可以是一个值序列</p><p>值序列 <code>&#123;A..Z&#125;</code>, <code>&#123;0..9&#125; &#123;a..z&#125;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> &#123;A..Z&#125;</span></span><br><span class="line">A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> &#123;a..z&#125; &#123;0..9&#125;</span></span><br><span class="line">a b c d e f g h i j k l m n o p q r s t u v w x y z 0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><p>如果不指定<code>in lists</code>，默认为<code>in $@</code></p><h3 id="迭代指定范围的数字"><a href="#迭代指定范围的数字" class="headerlink" title="迭代指定范围的数字"></a>迭代指定范围的数字</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for((i=0; i&lt;10; i++))</span><br><span class="line">&#123;</span><br><span class="line">    commands;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p><code>while test-commands; do consequent-commands; done</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while true;</span><br><span class="line">do</span><br><span class="line">    commands;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>用true作为循环条件能够产生无限循环</p><h2 id="until"><a href="#until" class="headerlink" title="until"></a>until</h2><p><code>until test-commands; do consequent-commands; done</code></p><p>until会一直循环，直到给定的条件为真。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x=0;</span><br><span class="line">until [ $x -eq 9 ];</span><br><span class="line">do</span><br><span class="line">    let x++;</span><br><span class="line">    echo $x;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>无限循环 <code>while true; do cmd; done</code> 等价于 <code>until false; do cmd; done</code></p><p>三种循环都可以使用<code>break</code>，<code>continue</code>来控制</p><h2 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd1 | cmd2     # cmd1的标准输出成为cmd2的标准输入</span><br><span class="line">cmd1 |&amp; cmd2    # cmd1的标准输出、标准错误成为cmd2的标准输入，类似于cmd1 2&gt;&amp;1 | cmd2</span><br></pre></td></tr></table></figure><p>未开启<code>pipefail</code>选项下，管道的退出状态是最后一条命令的退出状态</p><h2 id="pwd-print-work-directory"><a href="#pwd-print-work-directory" class="headerlink" title="pwd - print work directory"></a>pwd - print work directory</h2><p>输出当前工作目录的完整名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">type</span> -a <span class="built_in">pwd</span></span></span><br><span class="line">pwd 是 shell 内建</span><br><span class="line">pwd 是 /usr/bin/pwd</span><br><span class="line">pwd 是 /bin/pwd</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">pwd</span></span></span><br><span class="line">/home/liph</span><br></pre></td></tr></table></figure><h2 id="return"><a href="#return" class="headerlink" title="return"></a>return</h2><p><code>return [n]</code></p><p>用来退出函数并指定退出状态，如果没用指定n，退出状态为函数执行的最后一条命令的退出状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">return</span></span></span><br><span class="line">bash: return: 只能从函数或者源脚本返回(`return&#x27;)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> test.sh</span></span><br><span class="line">return</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">bash test.sh</span></span><br><span class="line">test.sh: 第 1 行：return: 只能从函数或者源脚本返回(`return&#x27;)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">source</span> test.sh</span></span><br></pre></td></tr></table></figure><p>在终端中输入<code>return</code>，得到提示<code>return</code>只能在函数或由 <code>.</code> 和<code>source</code>命令执行的脚本中使用</p><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p><code>select name [in words …]; do commands; done</code></p><p>如果省略<code>in words</code>，则会指定<code>in $@</code></p><p>创建菜单供用户选择</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;select your linux distribution&quot;</span><br><span class="line">linux=&quot;Debian Centos Ubuntu Arch&quot;</span><br><span class="line">select os in $linux:</span><br><span class="line">do</span><br><span class="line">    echo &quot;your select is $&#123;REPLY&#125;, $os is the best!&quot;</span><br><span class="line">    break;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">bash select.sh</span></span><br><span class="line">select your linux distribution</span><br><span class="line">1) Debian</span><br><span class="line">2) Centos</span><br><span class="line">3) Ubuntu</span><br><span class="line">4) Arch:</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">? 1</span></span><br><span class="line">your select is 1, Debian is the best!</span><br></pre></td></tr></table></figure><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set [--abefhkmnptuvxBCEHPT] [-o option-name] [argument …]</span><br><span class="line">set [+abefhkmnptuvxBCEHPT] [+o option-name] [argument …]</span><br></pre></td></tr></table></figure><p>如果不指定参数，<code>set</code>会打印出所有变量与函数</p><p>选项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-e  如果命令退出状态非0，立即退出shell</span><br><span class="line">-x  执行命令前先打印（先扩展变量`PS4`后打印命令）</span><br><span class="line">+x  禁止调试</span><br><span class="line">-v  当命令进行读取时显示输入</span><br><span class="line">+v  禁止打印输入</span><br><span class="line">-u  视未设置的变量和参数（特殊参数@或*除外）为错误，在标准错误写入错误信息，并退出非交互运行的shell</span><br><span class="line">-o</span><br><span class="line">    pipefail  只要管道中有任何一个命令返回非0，则整个管道操作被视为失败</span><br></pre></td></tr></table></figure><p>使用选项-x，启用shell脚本的跟踪调试功能：<code>$ bash -x script.sh</code></p><p>使用set -x和set +x对脚本进行部分调试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for i in &#123;1..6&#125;;</span><br><span class="line">do</span><br><span class="line">    set -x</span><br><span class="line">    echo $i</span><br><span class="line">    set +x</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>把shebang从#!&#x2F;bin&#x2F;bash改成#!&#x2F;bin&#x2F;bash -xv，这样一来，不用任何其他选项就可以启用调试功能了</p><p>如果使用了-x -v或set -x -v，调试输出会被发送到stderr</p><h2 id="shell-styleguide"><a href="#shell-styleguide" class="headerlink" title="shell styleguide"></a>shell styleguide</h2><p>参考</p><p><a href="https://google.github.io/styleguide/shellguide.html">https://google.github.io/styleguide/shellguide.html</a></p><h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><p><code>time [-p] command [arguments...]</code></p><p>-p POSIX格式输出</p><p>time的输出</p><ul><li>real      时钟时间</li><li>user      用户态CPU时间</li><li>sys       内核态CPU时间</li></ul><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">type</span> -t <span class="built_in">type</span></span></span><br><span class="line">builtin</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">type</span> <span class="built_in">ls</span></span></span><br><span class="line">ls 是“ls --color=auto”的别名</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">type</span> -a <span class="built_in">ls</span></span></span><br><span class="line">ls 是“ls --color=auto”的别名</span><br><span class="line">ls 是 /usr/bin/ls</span><br><span class="line">ls 是 /bin/ls</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">type</span> mkcd</span></span><br><span class="line">mkcd 是函数</span><br><span class="line">mkcd ()</span><br><span class="line">&#123;</span><br><span class="line">    dir=$1;</span><br><span class="line">    mkdir -p &quot;$&#123;dir&#125;&quot;;</span><br><span class="line">    cd &quot;$&#123;dir&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">type</span> -f mkcd <span class="comment"># 抑制 shell 函数查询</span></span></span><br><span class="line">bash: type: mkcd：未找到</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">type</span> -P <span class="built_in">ls</span></span></span><br><span class="line">/usr/bin/ls</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">type</span> -t <span class="built_in">ls</span></span></span><br><span class="line">alias</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">type</span> -p <span class="built_in">ls</span> <span class="comment"># 当 -t 不返回 file时，无任何值</span></span></span><br></pre></td></tr></table></figure><h2 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h2><ul><li>变量名由一系列字母、数字和下划线组成，其中不包含空白字符，变量包含一个值与0或多个属性，属性由<code>declare</code>来声明。</li><li>常用的惯例是在脚本中使用大写字母命名环境变量，使用驼峰命名法或小写字母命名其他变量。</li><li>赋值操作：<code>name=[value]</code>，其中，空字符串是一个有效值</li><li>如果value不包含任何空白字符（例如空格），那么就不需要将其放入引号中，否则必须使用单引号或双引号</li><li><code>var = value</code>不同于<code>var=value</code>。两边没有空格的等号是赋值操作符，加上空格的等号表示的是等量关系测试。</li><li>在变量名之前加上美元符号（$）就可以访问变量的内容</li><li><code>echo $var</code> 也可以这样写：<code>echo $&#123;var&#125;</code></li><li>使用单引号时，变量不会被扩展，仍依照原样显示。这意味着<code>echo &#39;$var&#39;</code>会显示<code>$var</code>。</li><li>但如果变量var已经定义过，那么<code>echo &quot;$var&quot;</code>会显示出该变量的值；如果没有定义过，则什么都不显示。</li><li>可以用下面的方法获得变量值的长度：&#96;length&#x3D;$</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xargs - 从标准输入重建并执行命令行</title>
      <link href="/codes/xargs/"/>
      <url>/codes/xargs/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> *.c | xargs grep main</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> example.txt    <span class="comment"># 样例文件</span></span></span><br><span class="line">1 2 3 4 5 6</span><br><span class="line">7 8 9 10</span><br><span class="line">11 12</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> example.txt | xargs <span class="comment"># xargs默认会执行echo命令</span></span></span><br><span class="line">1 2 3 4 5 6 7 8 9 10 11 12</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> example.txt | xargs -n 3 <span class="comment"># -n选项可以限制每次调用命令时用到的参数个数</span></span></span><br><span class="line">1 2 3</span><br><span class="line">4 5 6</span><br><span class="line">7 8 9</span><br><span class="line">10 11 12</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find . -iname <span class="string">&#x27;*.docx&#x27;</span> -print0 | xargs -0 grep -L image</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.txt&quot;</span> -print0 | xargs -0 <span class="built_in">rm</span> -f</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.c&quot;</span> -print0 | xargs -0 <span class="built_in">wc</span> –l</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> args.txt | xargs -I &#123;&#125; cmd -1 &#123;&#125; -2</span></span><br></pre></td></tr></table></figure><p><code>xargs [选项]... 命令 [初始参数]...</code></p><p>xargs命令接受来自stdin的输入，将数据解析成单个元素，然后调用指定命令并将这些元素作为该命令的参数。xargs默认使用空白字符分割输入并执行&#x2F;bin&#x2F;echo。</p><p>xargs会将参数放置在指定命令的尾部</p><p>-I {}指定了替换字符串。为该命令提供的各个参数会通过stdin读取并依次替换掉字符串{}。</p><p>使用-I的时候，命令以循环的方式执行。如果有3个参数，那么命令就会连同{}一起被执行3次。{}会在每次执行中被替换为相应的参数。</p>]]></content>
      
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gcc -Wreorder</title>
      <link href="/codes/gcc-warning-reorder/"/>
      <url>/codes/gcc-warning-reorder/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="built_in">B</span>(<span class="type">int</span> i) &#123; std::cout &lt;&lt; <span class="string">&quot;B(&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> i) : <span class="built_in">second</span>(i), <span class="built_in">first</span>(second) &#123;&#125;</span><br><span class="line">    B first;</span><br><span class="line">    <span class="type">int</span> second;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="built_in">A</span>(<span class="number">100</span>); &#125;</span><br></pre></td></tr></table></figure><p>gcc编译会给出<code>Wreorder</code>的警告</p><p>可能的输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B(-1134720736)</span><br></pre></td></tr></table></figure><p><a href="https://cppinsights.io/">https://cppinsights.io/</a>处理的结果如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="title">A</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function">  : first&#123;</span><span class="built_in">B</span>(<span class="keyword">this</span>-&gt;second)&#125;</span><br><span class="line">  , second&#123;i&#125;</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  B first;</span><br><span class="line">  <span class="type">int</span> second;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>but why? 原因在于C++类的析构要按成员构造的逆序对成员进行析构，而构造函数是可以重载的，<br>为了确保析构的顺序，构造时按成员声明的顺序进行构造，而非初始化列表中出现的顺序。</p>]]></content>
      
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flare 0 - start</title>
      <link href="/codes/flare-0-start/"/>
      <url>/codes/flare-0-start/</url>
      
        <content type="html"><![CDATA[<h4 id="flare"><a href="#flare" class="headerlink" title="flare"></a>flare</h4><p>github地址 <a href="https://github.com/Tencent/flare">https://github.com/Tencent/flare</a></p><p>简介：腾讯广告使用的C++后台服务框架，包含一系列基础库，fiber库，RPC等特性</p><p>环境支持：Linux x86-64 gcc8+</p><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apt install git-lfs</span><br><span class="line">git lfs install</span><br><span class="line">git lfs pull</span><br><span class="line">cd thirdparty/blade/</span><br><span class="line">./install</span><br><span class="line">source ~/.profile</span><br><span class="line">blade build ...</span><br></pre></td></tr></table></figure><h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><p>示例文档 <a href="https://github.com/Tencent/flare/blob/master/flare/doc/intro-rpc.md">https://github.com/Tencent/flare/blob/master/flare/doc/intro-rpc.md</a></p><ol><li><p><code>flare/init.h</code></p><ol><li><code>int flare::Start(int argc, char** argv, Function&lt;int(int, char**)&gt; cb);</code> 执行用户回调前后初始化与清理环境。</li><li><code>flare::WaitForQuitSignal()</code></li></ol></li><li><p><code>flare/rpc/server.h</code></p><ol><li><code>Server::Server(Options options = Options())</code>  以<code>options</code>初始化<code>Server</code></li><li><code>Server::AddProtocol(const std::vector&lt;std::string&gt;&amp; names)</code> 在服务上注册通信协议</li><li><code>Server::AddService()</code> 添加服务类的实例</li><li><code>Server::ListenOn()</code> listen on endpoint</li><li><code>Server::Start()</code></li><li><code>Server::Stop()</code></li><li><code>Server::Join()</code></li></ol></li><li><p><code>flare/rpc/protocol/protobuf/rpc_channel.h</code></p><ol><li><code>class flare::RpcChannel : public google::protobuf::RpcChannel</code></li></ol></li><li><p><code>flare/rpc/protocol/protobuf/rpc_client_controller.h</code></p><ol><li><code>class flare::RpcClientController : public protobuf::RpcControllerCommon</code></li></ol></li></ol><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./server</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./client</span></span><br><span class="line">I0818 08:14:46.082238  3432 init.cc:114] Flare started.</span><br><span class="line">I0818 08:14:46.088726  3432 runtime.cc:425] Using fiber scheduling profile [neutral].</span><br><span class="line">I0818 08:14:46.088794  3432 runtime.cc:220] Starting 6 worker threads per group, for a total of 1 groups. The system is treated as UMA.</span><br><span class="line">I0818 08:14:46.095507  3432 init.cc:122] Flare runtime initialized.</span><br><span class="line">I0818 08:14:46.128015  3447 client.cc:43] Received: [Hello there.]</span><br><span class="line">I0818 08:14:46.268503  3432 init.cc:162] Exited</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
            <tag> flare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Python2.7.18</title>
      <link href="/codes/python2/"/>
      <url>/codes/python2/</url>
      
        <content type="html"><![CDATA[<ul><li>Python2.7.18是python2的最后一个版本</li><li>最新的Debian已经不提供python2的软件源了</li><li>下载地址 <a href="https://www.python.org/downloads/release/python-2718/">https://www.python.org/downloads/release/python-2718/</a></li><li><a href="https://blog.python.org/2020/04/python-2718-last-release-of-python-2.html">https://blog.python.org/2020/04/python-2718-last-release-of-python-2.html</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz</span><br><span class="line">tar xvf Python-2.7.18.tgz</span><br><span class="line">cd Python-2.7.18</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bazel</title>
      <link href="/codes/bazel/"/>
      <url>/codes/bazel/</url>
      
        <content type="html"><![CDATA[<h2 id="Bazel"><a href="#Bazel" class="headerlink" title="Bazel"></a>Bazel</h2><ul><li><a href="https://bazel.build/">https://bazel.build</a></li><li><a href="https://github.com/bazelbuild/bazel">https://github.com/bazelbuild/bazel</a></li><li><a href="https://github.com/bazelbuild/examples">https://github.com/bazelbuild/examples</a></li></ul><h3 id="Workspace-Repositories-Packages-Targets-Labels"><a href="#Workspace-Repositories-Packages-Targets-Labels" class="headerlink" title="Workspace, Repositories, Packages, Targets, Labels"></a>Workspace, Repositories, Packages, Targets, Labels</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">project/</span><br><span class="line">|-- package1</span><br><span class="line">|   `-- BUILD</span><br><span class="line">|-- package2</span><br><span class="line">|   `-- BUILD</span><br><span class="line">`-- WORKSPACE</span><br></pre></td></tr></table></figure><p><code>WORKSPACE</code> 文件标识了项目的根目录，这个目录下也会存放 bazel 的输出。<code>WORKSPACE</code> 可以为空，也可以包含对外部依赖的引用。代码以仓库（Repositories）的形式组织，包含 <code>WORKSPACE</code> 文件的目录称为主仓库（main repository, <code>@</code>）。</p><p>含有<code>BUILD</code>或<code>BUILD.bazel</code>的目录是一个包。包包含该目录下的所有文件，包括子目录（含有<code>BUILD</code>文件的子目录除外，它是另一个包）。包中的元素称为目标（Targets），有以下几类目标。</p><ul><li>文件（File）<ul><li>源文件（Source File）</li><li>生成的文件（Generated File）</li></ul></li><li>规则（Rule）</li><li>包组（Package Groups）</li></ul><p>目标的名称称为标签（Label），例如 <code>@myrepo//my/app/main:app_binary</code>（<code>@myrepo</code> 内部可以简写为 <code>//my/app/main:app_binary</code>）</p><p>标签由冒号分为两部分，包名（<code>my/app/main</code>）和 目标名（<code>app_binary</code>）, 当省略冒号时，目标名等同包名最后一段路径，例如<br><code>//my/app</code> 等价于 <code>//my/app:app</code>。引用当前包内目标时，包名也可以省略，因此以下四种写法等价。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># /文件 /my/app:BUILD 内</span><br><span class="line">//my/app:app</span><br><span class="line">//my/app</span><br><span class="line">:app</span><br><span class="line">app</span><br></pre></td></tr></table></figure><p>BUILD 文件中可以定义规则，用以指定输入输出间的关系及构建输出的步骤。</p><h3 id="Workspace-Rules"><a href="#Workspace-Rules" class="headerlink" title="Workspace Rules"></a>Workspace Rules</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_repository(name, path, repo_mapping)</span><br><span class="line">new_local_repository(name, build_file, build_file_content, path, repo_mapping, workspace_file, workspace_file_content)</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 通过 @my-ssl 引用该仓库</span><br><span class="line">local_repository(</span><br><span class="line">    name = &quot;my-ssl&quot;,</span><br><span class="line">    path = &quot;/home/user/ssl&quot;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">new_local_repository(</span><br><span class="line">    name = &quot;my-ssl&quot;,</span><br><span class="line">    path = &quot;/home/user/ssl&quot;,</span><br><span class="line">    build_file = &quot;BUILD.my-ssl&quot;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>BUILD.my-ssl</code> 如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java_library(</span><br><span class="line">    name = &quot;openssl&quot;,</span><br><span class="line">    srcs = glob([&#x27;*.java&#x27;])</span><br><span class="line">    visibility = [&quot;//visibility:public&quot;],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>可以不指定 <code>build_file</code> 而是指定 <code>build_file_content</code> （必须有其中一个），以包含文件中的内容（注意缩进要和BUILD文件一致）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># Loading an extension</span><br><span class="line">load(&quot;@bazel_tools//tools/build_defs/repo:git.bzl&quot;, &quot;git_repository&quot;)</span><br><span class="line">load(&quot;@bazel_tools//tools/build_defs/repo:http.bzl&quot;, &quot;http_archive&quot;)</span><br><span class="line"></span><br><span class="line">git_repository(name, branch, commit, init_submodules, patch_args, patch_cmds, patch_cmds_win,</span><br><span class="line">               patch_tool, patches, recursive_init_submodules, remote, shallow_since, strip_prefix,</span><br><span class="line">               tag, verbose)</span><br><span class="line"></span><br><span class="line">new_git_repository(name, branch, build_file, build_file_content, commit, init_submodules,</span><br><span class="line">                   patch_args, patch_cmds, patch_cmds_win, patch_tool, patches,</span><br><span class="line">                   recursive_init_submodules, remote, shallow_since, strip_prefix, tag, verbose,</span><br><span class="line">                   workspace_file, workspace_file_content)</span><br><span class="line"></span><br><span class="line">http_archive(name, auth_patterns, build_file, build_file_content, canonical_id, netrc, patch_args,</span><br><span class="line">             patch_cmds, patch_cmds_win, patch_tool, patches, sha256, strip_prefix, type, url, urls,</span><br><span class="line">             workspace_file, workspace_file_content)</span><br><span class="line"></span><br><span class="line">http_file(name, auth_patterns, canonical_id, downloaded_file_path, executable, netrc, sha256, urls)</span><br><span class="line"></span><br><span class="line">http_jar(name, auth_patterns, canonical_id, netrc, sha256, url, urls)</span><br></pre></td></tr></table></figure><h3 id="BUILD-Rules"><a href="#BUILD-Rules" class="headerlink" title="BUILD Rules"></a>BUILD Rules</h3><h4 id="C-C-Rules"><a href="#C-C-Rules" class="headerlink" title="C&#x2F;C++ Rules"></a>C&#x2F;C++ Rules</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cc_binary</span><br><span class="line">cc_import</span><br><span class="line">cc_library</span><br><span class="line">cc_proto_library</span><br><span class="line">fdo_prefetch_hints</span><br><span class="line">fdo_profile</span><br><span class="line">propeller_optimize</span><br><span class="line">cc_test</span><br><span class="line">cc_toolchain</span><br><span class="line">cc_toolchain_suite</span><br></pre></td></tr></table></figure><h3 id="Bazel-CLI"><a href="#Bazel-CLI" class="headerlink" title="Bazel CLI"></a>Bazel CLI</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bazel clean             # 删除输出文件</span><br><span class="line">bazel build &lt;target&gt;    # 构建目标</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现简单的C++日志库</title>
      <link href="/codes/logging/"/>
      <url>/codes/logging/</url>
      
        <content type="html"><![CDATA[<h3 id="0-接口"><a href="#0-接口" class="headerlink" title="0. 接口"></a>0. 接口</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::string str = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">LOG &lt;&lt; <span class="string">&quot;hello &quot;</span> &lt;&lt; str;</span><br><span class="line">LOG &lt;&lt; format(<span class="string">&quot;The answer is &#123;&#125;&quot;</span>, <span class="number">42</span>);</span><br></pre></td></tr></table></figure><p>流式输出，不需要 <code>init</code>，日志追加写入固定的文件中，格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[2023-08-15 10:39:26 logging_test.cpp:8] hello world</span><br><span class="line">[2023-08-15 10:39:26 logging_test.cpp:9] The answer is 42</span><br></pre></td></tr></table></figure><h3 id="1-LOG宏"><a href="#1-LOG宏" class="headerlink" title="1. LOG宏"></a>1. <code>LOG</code>宏</h3><p>要实现流式输出，需要用到C++的析构函数，<code>LOG</code>宏即构造一个<code>stream</code>对象，析构时将其内容输出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __FILENAME__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __FILENAME__ ((strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ?: __FILE__ - 1) + 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG liph::log_message(__FILENAME__, __LINE__).stream()</span></span><br></pre></td></tr></table></figure><h3 id="2-log-message"><a href="#2-log-message" class="headerlink" title="2. log_message"></a>2. <code>log_message</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">log_message</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">log_message</span>(<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">int</span> line) &#123;</span><br><span class="line">        ss_.<span class="built_in">str</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        ss_ &lt;&lt; <span class="string">&#x27;[&#x27;</span> &lt;&lt; <span class="built_in">time_format</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; filename &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; line &lt;&lt; <span class="string">&quot;] &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::ostringstream&amp; <span class="title">stream</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> ss_; &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">log_message</span>() &#123;</span><br><span class="line">        ss_ &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        singleton&lt;logger&gt;::<span class="built_in">instance</span>().<span class="built_in">log</span>(ss_);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">thread_local</span> <span class="type">static</span> std::ostringstream ss_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-logger"><a href="#3-logger" class="headerlink" title="3. logger"></a>3. <code>logger</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">logger</span> : noncopyable &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">char</span> logfilename[] = <span class="string">&quot;std.log&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">logger</span>() &#123;</span><br><span class="line">        producer_ = &amp;buffer_[<span class="number">0</span>];</span><br><span class="line">        consumer_ = &amp;buffer_[<span class="number">1</span>];</span><br><span class="line">        write_file_.<span class="built_in">open</span>(logfilename, std::ios_base::out | std::ios_base::app);</span><br><span class="line">        <span class="keyword">if</span> (!write_file_.<span class="built_in">is_open</span>()) std::cerr &lt;&lt; <span class="string">&quot;open log file fail, use stderr\n&quot;</span>;</span><br><span class="line">        started_ = <span class="literal">true</span>;</span><br><span class="line">        tid_ = std::<span class="built_in">thread</span>(&amp;logger::run, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">logger</span>() &#123;</span><br><span class="line">        started_ = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (tid_.<span class="built_in">joinable</span>()) tid_.<span class="built_in">join</span>();</span><br><span class="line">        <span class="keyword">if</span> (write_file_.<span class="built_in">is_open</span>()) write_file_.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">log</span><span class="params">(std::ostringstream&amp; ss)</span> </span>&#123;</span><br><span class="line">        <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(lock_)</span></span>;</span><br><span class="line">        producer_-&gt;<span class="built_in">emplace_back</span>(std::<span class="built_in">move</span>(ss).<span class="built_in">str</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::ostream&amp; os = write_file_.<span class="built_in">is_open</span>() ? write_file_ : std::cerr;</span><br><span class="line">        <span class="keyword">while</span> (started_) &#123;</span><br><span class="line">            <span class="built_in">consume</span>(os);</span><br><span class="line">            std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">100</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">consume</span>(os);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">consume</span><span class="params">(std::ostream&amp; os)</span> </span>&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(lock_)</span></span>;</span><br><span class="line">            std::<span class="built_in">swap</span>(producer_, consumer_);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!consumer_-&gt;<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> std::string&amp; str : *consumer_) &#123;</span><br><span class="line">                os &lt;&lt; str;</span><br><span class="line">            &#125;</span><br><span class="line">            os.<span class="built_in">flush</span>();</span><br><span class="line">            consumer_-&gt;<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::ofstream write_file_;</span><br><span class="line">    std::atomic&lt;<span class="type">bool</span>&gt; started_;</span><br><span class="line">    std::thread tid_;</span><br><span class="line">    std::vector&lt;std::string&gt; *producer_, *consumer_;</span><br><span class="line">    std::vector&lt;std::string&gt; buffer_[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">mutable</span> std::mutex lock_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-benchmark"><a href="#4-benchmark" class="headerlink" title="4. benchmark"></a>4. benchmark</h3><p>测试数据，日志长度128，线程数16，fstream文件输出时使用mutex同步，format与上面相同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Run on (12 X 2600 MHz CPU s)</span><br><span class="line">CPU Caches:</span><br><span class="line">  L1 Data 32 KiB</span><br><span class="line">  L1 Instruction 32 KiB</span><br><span class="line">  L2 Unified 256 KiB (x6)</span><br><span class="line">  L3 Unified 12288 KiB</span><br><span class="line">Load Average: 2.43, 2.53, 2.36</span><br><span class="line">***WARNING*** Library was built as DEBUG. Timings may be affected.</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">Benchmark           Time             CPU   Iterations</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">fstream_mt    2390740 ns       242201 ns         2850</span><br><span class="line">logging_mt    1852941 ns       329709 ns         2141</span><br><span class="line">glog_mt       5449782 ns       322837 ns         1000</span><br></pre></td></tr></table></figure><p>完整代码见 <a href="https://github.com/liphx/code/blob/main/src/cplusplus/liph/logging.h">https://github.com/liphx/code/blob/main/src/cplusplus/liph/logging.h</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>塞尔达传说：王国之泪</title>
      <link href="/game/the-legend-of-zelda-tears-of-the-kingdom/"/>
      <url>/game/the-legend-of-zelda-tears-of-the-kingdom/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.nintendo.com/store/products/the-legend-of-zelda-tears-of-the-kingdom-switch/">https://www.nintendo.com/store/products/the-legend-of-zelda-tears-of-the-kingdom-switch/</a></p><p>160h进度</p><ul><li><input checked="" disabled="" type="checkbox"> 冒险笔记<ul><li><input checked="" disabled="" type="checkbox"> 主剧情挑战 23</li><li><input checked="" disabled="" type="checkbox"> 情节挑战 60</li><li><input checked="" disabled="" type="checkbox"> 神庙挑战 31</li><li><input checked="" disabled="" type="checkbox"> 迷你挑战 139</li><li><input checked="" disabled="" type="checkbox"> 冒险记忆 18</li></ul></li><li><input checked="" disabled="" type="checkbox"> 人物名录 22</li><li><input checked="" disabled="" type="checkbox"> 神庙 152</li><li><input checked="" disabled="" type="checkbox"> 破魔之根 120 (通过黑暗的证明)</li><li><input checked="" disabled="" type="checkbox"> 电池 45</li><li><input checked="" disabled="" type="checkbox"> 水井 58 (周游列井的纪念品)</li><li><input checked="" disabled="" type="checkbox"> 石碑 13</li><li><input checked="" disabled="" type="checkbox"> 海拉鲁图鉴<ul><li><input checked="" disabled="" type="checkbox"> 生物 92</li><li><input checked="" disabled="" type="checkbox"> 怪物 110</li><li><input checked="" disabled="" type="checkbox"> 材料 126</li><li><input checked="" disabled="" type="checkbox"> 武器 175</li><li><input checked="" disabled="" type="checkbox"> 宝物 6</li></ul></li><li><input disabled="" type="checkbox"> 克洛格的果实 228&#x2F;1000</li><li><input disabled="" type="checkbox"> 魔犹伊的遗失物</li><li><input disabled="" type="checkbox"> 地图进度 68.49&#x2F;100</li><li><input disabled="" type="checkbox"> 料理 93&#x2F;228</li><li><input disabled="" type="checkbox"> 讨伐之证<ul><li><input checked="" disabled="" type="checkbox"> 莫尔德拉吉克</li><li><input checked="" disabled="" type="checkbox"> 古栗欧克</li><li><input disabled="" type="checkbox"> 岩石巨人 (55 left)</li><li><input disabled="" type="checkbox"> 西诺克斯 (46 left)</li><li><input disabled="" type="checkbox"> 方块魔像 (13 left)</li><li><input disabled="" type="checkbox"> 巨霸迦马 (30 left)</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ ADL 与 boost::noncopyable</title>
      <link href="/codes/adl-boost-noncopyable/"/>
      <url>/codes/adl-boost-noncopyable/</url>
      
        <content type="html"><![CDATA[<p>C++ <a href="https://zh.cppreference.com/w/cpp/language/adl">ADL</a> 即实参依赖查找（argument-dependent lookup）, 允许调用其他命名空间中的函数。</p><p>最常见的例子为 <code>operator&lt;&lt;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">operator</span>&lt;&lt;(std::cout, <span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">    <span class="comment">// 等同 std::cout &lt;&lt; &quot;hello\n&quot;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>operator&lt;&lt;</code> 并不存在于全局命名空间, 但左实参 <code>std::cout</code> 在命名空间<code>std</code>中, 因此找到了<br><code>std::operator&lt;&lt;(std::ostream&amp;, const char*)</code></p><p>同理, 下面的代码也成立</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> A &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">B</span> &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">const</span> B&amp;)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A::B b;</span><br><span class="line">    <span class="built_in">func</span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果此时定义全局函数 <code>void func(const A::B&amp;) &#123;&#125;</code> , 则编译器报错, 对<code>func</code>的调用是<code>ambiguous</code></p><p>ADL 在继承中也适用, 例如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> A &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">B</span> &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">const</span> B&amp;)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: <span class="keyword">public</span> A::B &#123;&#125;;</span><br><span class="line"><span class="comment">// 如果是private继承则不能转换成 A::B</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    C c;</span><br><span class="line">    <span class="built_in">func</span>(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有些时候我们并不希望派生类查找基类所在命名空间的函数, 来看看 <code>boost::noncopyable</code> 的做法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> boost &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> noncopyable_ &#123; <span class="comment">// protection from unintended ADL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">base_token</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">noncopyable</span>: base_token &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &lt; 201103L</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="built_in">noncopyable</span>() &#123;&#125;</span><br><span class="line">    ~<span class="built_in">noncopyable</span>() &#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">noncopyable</span>(<span class="type">const</span> noncopyable&amp;);</span><br><span class="line">    noncopyable&amp; <span class="keyword">operator</span>=(<span class="type">const</span> noncopyable&amp;);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">noncopyable</span><span class="params">()</span> </span>= <span class="keyword">default</span>;</span><br><span class="line">    ~<span class="built_in">noncopyable</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">noncopyable</span>(<span class="type">const</span> noncopyable&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    noncopyable&amp; <span class="keyword">operator</span>=(<span class="type">const</span> noncopyable&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace noncopyable_</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> noncopyable_::noncopyable noncopyable;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace boost</span></span><br></pre></td></tr></table></figure><p><code>boost::noncopyable</code> 的作用是在C++中提供一种方案, 使得继承自该类的对象不能被拷贝(noncopyable, 顾名思义).<br>为了避免ADL, <code>noncopyable</code> 并非直接定义在 <code>boost</code> 中的一个类, 而是独立定义在<code>noncopyable_</code>, 该命名空间内没有其他函数.</p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++ AddressSanitizer Examples</title>
      <link href="/codes/asan/"/>
      <url>/codes/asan/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/google/sanitizers/wiki/AddressSanitizer">https://github.com/google/sanitizers/wiki/AddressSanitizer</a></p><h2 id="heap-use-after-free"><a href="#heap-use-after-free" class="headerlink" title="heap-use-after-free"></a>heap-use-after-free</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> heap-use-after-free.cpp</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">include &lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int *p = new int;</span><br><span class="line">    delete p;</span><br><span class="line">    std::cout &lt;&lt; *p &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ -fsanitize=address -O1 -fno-omit-frame-pointer -g heap-use-after-free.cpp &amp;&amp; ./a.out</span></span><br><span class="line">=================================================================</span><br><span class="line">==40665==ERROR: AddressSanitizer: heap-use-after-free on address 0x602000000010 at pc 0x56530f385261 bp 0x7fffdf2b04e0 sp 0x7fffdf2b04d8</span><br><span class="line">READ of size 4 at 0x602000000010 thread T0</span><br><span class="line">    #0 0x56530f385260 in main /tmp/asan/heap-use-after-free.cpp:6</span><br><span class="line">    #1 0x7f1065e39d09 in __libc_start_main ../csu/libc-start.c:308</span><br><span class="line">    #2 0x56530f385139 in _start (/tmp/asan/a.out+0x1139)</span><br><span class="line"></span><br><span class="line">0x602000000010 is located 0 bytes inside of 4-byte region [0x602000000010,0x602000000014)</span><br><span class="line">freed by thread T0 here:</span><br><span class="line">    #0 0x7f1066264467 in operator delete(void*, unsigned long) ../../../../src/libsanitizer/asan/asan_new_delete.cpp:172</span><br><span class="line">    #1 0x56530f385217 in main /tmp/asan/heap-use-after-free.cpp:5</span><br><span class="line">    #2 0x7f1065e39d09 in __libc_start_main ../csu/libc-start.c:308</span><br><span class="line"></span><br><span class="line">previously allocated by thread T0 here:</span><br><span class="line">    #0 0x7f1066263647 in operator new(unsigned long) ../../../../src/libsanitizer/asan/asan_new_delete.cpp:99</span><br><span class="line">    #1 0x56530f385207 in main /tmp/asan/heap-use-after-free.cpp:4</span><br><span class="line">    #2 0x7f1065e39d09 in __libc_start_main ../csu/libc-start.c:308</span><br><span class="line"></span><br><span class="line">SUMMARY: AddressSanitizer: heap-use-after-free /tmp/asan/heap-use-after-free.cpp:6 in main</span><br><span class="line">Shadow bytes around the buggy address:</span><br><span class="line">  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">=&gt;0x0c047fff8000: fa fa[fd]fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">Shadow byte legend (one shadow byte represents 8 application bytes):</span><br><span class="line">  Addressable:           00</span><br><span class="line">  Partially addressable: 01 02 03 04 05 06 07 </span><br><span class="line">  Heap left redzone:       fa</span><br><span class="line">  Freed heap region:       fd</span><br><span class="line">  Stack left redzone:      f1</span><br><span class="line">  Stack mid redzone:       f2</span><br><span class="line">  Stack right redzone:     f3</span><br><span class="line">  Stack after return:      f5</span><br><span class="line">  Stack use after scope:   f8</span><br><span class="line">  Global redzone:          f9</span><br><span class="line">  Global init order:       f6</span><br><span class="line">  Poisoned by user:        f7</span><br><span class="line">  Container overflow:      fc</span><br><span class="line">  Array cookie:            ac</span><br><span class="line">  Intra object redzone:    bb</span><br><span class="line">  ASan internal:           fe</span><br><span class="line">  Left alloca redzone:     ca</span><br><span class="line">  Right alloca redzone:    cb</span><br><span class="line">  Shadow gap:              cc</span><br><span class="line">==40665==ABORTING</span><br></pre></td></tr></table></figure><h2 id="heap-buffer-overflow"><a href="#heap-buffer-overflow" class="headerlink" title="heap-buffer-overflow"></a>heap-buffer-overflow</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> heap-buffer-overflow.cpp</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">include &lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int *p = new int[100];</span><br><span class="line">    std::cout &lt;&lt; p[100] &lt;&lt; std::endl;</span><br><span class="line">    delete[] p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ -fsanitize=address -O1 -fno-omit-frame-pointer -g heap-buffer-overflow.cpp &amp;&amp; ./a.out</span> </span><br><span class="line">=================================================================</span><br><span class="line">==40692==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6140000001d0 at pc 0x556801de6264 bp 0x7fff73c2bff0 sp 0x7fff73c2bfe8</span><br><span class="line">READ of size 4 at 0x6140000001d0 thread T0</span><br><span class="line">    #0 0x556801de6263 in main /tmp/asan/heap-buffer-overflow.cpp:5</span><br><span class="line">    #1 0x7f8cdaee0d09 in __libc_start_main ../csu/libc-start.c:308</span><br><span class="line">    #2 0x556801de6139 in _start (/tmp/asan/a.out+0x1139)</span><br><span class="line"></span><br><span class="line">0x6140000001d0 is located 0 bytes to the right of 400-byte region [0x614000000040,0x6140000001d0)</span><br><span class="line">allocated by thread T0 here:</span><br><span class="line">    #0 0x7f8cdb30a7a7 in operator new[](unsigned long) ../../../../src/libsanitizer/asan/asan_new_delete.cpp:102</span><br><span class="line">    #1 0x556801de6207 in main /tmp/asan/heap-buffer-overflow.cpp:4</span><br><span class="line">    #2 0x7f8cdaee0d09 in __libc_start_main ../csu/libc-start.c:308</span><br><span class="line"></span><br><span class="line">SUMMARY: AddressSanitizer: heap-buffer-overflow /tmp/asan/heap-buffer-overflow.cpp:5 in main</span><br><span class="line">Shadow bytes around the buggy address:</span><br><span class="line">  0x0c287fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0c287fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0c287fff8000: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0c287fff8010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0c287fff8020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">=&gt;0x0c287fff8030: 00 00 00 00 00 00 00 00 00 00[fa]fa fa fa fa fa</span><br><span class="line">  0x0c287fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c287fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c287fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c287fff8070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">  0x0c287fff8080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class="line">Shadow byte legend (one shadow byte represents 8 application bytes):</span><br><span class="line">  Addressable:           00</span><br><span class="line">  Partially addressable: 01 02 03 04 05 06 07 </span><br><span class="line">  Heap left redzone:       fa</span><br><span class="line">  Freed heap region:       fd</span><br><span class="line">  Stack left redzone:      f1</span><br><span class="line">  Stack mid redzone:       f2</span><br><span class="line">  Stack right redzone:     f3</span><br><span class="line">  Stack after return:      f5</span><br><span class="line">  Stack use after scope:   f8</span><br><span class="line">  Global redzone:          f9</span><br><span class="line">  Global init order:       f6</span><br><span class="line">  Poisoned by user:        f7</span><br><span class="line">  Container overflow:      fc</span><br><span class="line">  Array cookie:            ac</span><br><span class="line">  Intra object redzone:    bb</span><br><span class="line">  ASan internal:           fe</span><br><span class="line">  Left alloca redzone:     ca</span><br><span class="line">  Right alloca redzone:    cb</span><br><span class="line">  Shadow gap:              cc</span><br><span class="line">==40692==ABORTING</span><br></pre></td></tr></table></figure><h2 id="stack-buffer-overflow"><a href="#stack-buffer-overflow" class="headerlink" title="stack-buffer-overflow"></a>stack-buffer-overflow</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> stack-buffer-overflow.cpp</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">include &lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int p[100];</span><br><span class="line">    std::cout &lt;&lt; p[100] &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ -fsanitize=address -O1 -fno-omit-frame-pointer -g stack-buffer-overflow.cpp &amp;&amp; ./a.out</span> </span><br><span class="line">=================================================================</span><br><span class="line">==40707==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffe28541820 at pc 0x56152e4b32e6 bp 0x7ffe28541650 sp 0x7ffe28541648</span><br><span class="line">READ of size 4 at 0x7ffe28541820 thread T0</span><br><span class="line">    #0 0x56152e4b32e5 in main /tmp/asan/stack-buffer-overflow.cpp:5</span><br><span class="line">    #1 0x7fb19a22dd09 in __libc_start_main ../csu/libc-start.c:308</span><br><span class="line">    #2 0x56152e4b3129 in _start (/tmp/asan/a.out+0x1129)</span><br><span class="line"></span><br><span class="line">Address 0x7ffe28541820 is located in stack of thread T0 at offset 448 in frame</span><br><span class="line">    #0 0x56152e4b31f4 in main /tmp/asan/stack-buffer-overflow.cpp:3</span><br><span class="line"></span><br><span class="line">  This frame has 1 object(s):</span><br><span class="line">    [48, 448) &#x27;p&#x27; (line 4) &lt;== Memory access at offset 448 overflows this variable</span><br><span class="line">HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork</span><br><span class="line">      (longjmp and C++ exceptions *are* supported)</span><br><span class="line">SUMMARY: AddressSanitizer: stack-buffer-overflow /tmp/asan/stack-buffer-overflow.cpp:5 in main</span><br><span class="line">Shadow bytes around the buggy address:</span><br><span class="line">  0x1000450a02b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x1000450a02c0: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1</span><br><span class="line">  0x1000450a02d0: f1 f1 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x1000450a02e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x1000450a02f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">=&gt;0x1000450a0300: 00 00 00 00[f3]f3 f3 f3 f3 f3 f3 f3 00 00 00 00</span><br><span class="line">  0x1000450a0310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x1000450a0320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x1000450a0330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x1000450a0340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x1000450a0350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">Shadow byte legend (one shadow byte represents 8 application bytes):</span><br><span class="line">  Addressable:           00</span><br><span class="line">  Partially addressable: 01 02 03 04 05 06 07 </span><br><span class="line">  Heap left redzone:       fa</span><br><span class="line">  Freed heap region:       fd</span><br><span class="line">  Stack left redzone:      f1</span><br><span class="line">  Stack mid redzone:       f2</span><br><span class="line">  Stack right redzone:     f3</span><br><span class="line">  Stack after return:      f5</span><br><span class="line">  Stack use after scope:   f8</span><br><span class="line">  Global redzone:          f9</span><br><span class="line">  Global init order:       f6</span><br><span class="line">  Poisoned by user:        f7</span><br><span class="line">  Container overflow:      fc</span><br><span class="line">  Array cookie:            ac</span><br><span class="line">  Intra object redzone:    bb</span><br><span class="line">  ASan internal:           fe</span><br><span class="line">  Left alloca redzone:     ca</span><br><span class="line">  Right alloca redzone:    cb</span><br><span class="line">  Shadow gap:              cc</span><br><span class="line">==40707==ABORTING</span><br></pre></td></tr></table></figure><h2 id="global-buffer-overflow"><a href="#global-buffer-overflow" class="headerlink" title="global-buffer-overflow"></a>global-buffer-overflow</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> global-buffer-overflow.cpp</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">include &lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line">int p[100];</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    std::cout &lt;&lt; p[100] &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ -fsanitize=address -O1 -fno-omit-frame-pointer -g global-buffer-overflow.cpp &amp;&amp; ./a.out</span> </span><br><span class="line">=================================================================</span><br><span class="line">==40722==ERROR: AddressSanitizer: global-buffer-overflow on address 0x5582a8be53f0 at pc 0x5582a8be221c bp 0x7fffb9c61fb0 sp 0x7fffb9c61fa8</span><br><span class="line">READ of size 4 at 0x5582a8be53f0 thread T0</span><br><span class="line">    #0 0x5582a8be221b in main /tmp/asan/global-buffer-overflow.cpp:6</span><br><span class="line">    #1 0x7f933e583d09 in __libc_start_main ../csu/libc-start.c:308</span><br><span class="line">    #2 0x5582a8be2119 in _start (/tmp/asan/a.out+0x1119)</span><br><span class="line"></span><br><span class="line">0x5582a8be53f0 is located 48 bytes to the left of global variable &#x27;__ioinit&#x27; defined in &#x27;/usr/include/c++/10/iostream:74:25&#x27; (0x5582a8be5420) of size 1</span><br><span class="line">  &#x27;__ioinit&#x27; is ascii string &#x27;&#x27;</span><br><span class="line">0x5582a8be53f0 is located 0 bytes to the right of global variable &#x27;p&#x27; defined in &#x27;global-buffer-overflow.cpp:3:5&#x27; (0x5582a8be5260) of size 400</span><br><span class="line">SUMMARY: AddressSanitizer: global-buffer-overflow /tmp/asan/global-buffer-overflow.cpp:6 in main</span><br><span class="line">Shadow bytes around the buggy address:</span><br><span class="line">  0x0ab0d5174a20: f9 f9 f9 f9 f9 f9 f9 f9 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0ab0d5174a30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0ab0d5174a40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0ab0d5174a50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0ab0d5174a60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">=&gt;0x0ab0d5174a70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00[f9]f9</span><br><span class="line">  0x0ab0d5174a80: f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9 f9 00 00 00 00</span><br><span class="line">  0x0ab0d5174a90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0ab0d5174aa0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0ab0d5174ab0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0ab0d5174ac0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">Shadow byte legend (one shadow byte represents 8 application bytes):</span><br><span class="line">  Addressable:           00</span><br><span class="line">  Partially addressable: 01 02 03 04 05 06 07 </span><br><span class="line">  Heap left redzone:       fa</span><br><span class="line">  Freed heap region:       fd</span><br><span class="line">  Stack left redzone:      f1</span><br><span class="line">  Stack mid redzone:       f2</span><br><span class="line">  Stack right redzone:     f3</span><br><span class="line">  Stack after return:      f5</span><br><span class="line">  Stack use after scope:   f8</span><br><span class="line">  Global redzone:          f9</span><br><span class="line">  Global init order:       f6</span><br><span class="line">  Poisoned by user:        f7</span><br><span class="line">  Container overflow:      fc</span><br><span class="line">  Array cookie:            ac</span><br><span class="line">  Intra object redzone:    bb</span><br><span class="line">  ASan internal:           fe</span><br><span class="line">  Left alloca redzone:     ca</span><br><span class="line">  Right alloca redzone:    cb</span><br><span class="line">  Shadow gap:              cc</span><br><span class="line">==40722==ABORTING</span><br></pre></td></tr></table></figure><h2 id="stack-use-after-scope"><a href="#stack-use-after-scope" class="headerlink" title="stack-use-after-scope"></a>stack-use-after-scope</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> stack-use-after-scope.cpp</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">include &lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line">int *p;</span><br><span class="line"></span><br><span class="line">void f() &#123;</span><br><span class="line">    int i;</span><br><span class="line">    p = &amp;i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    f();</span><br><span class="line">    std::cout &lt;&lt; *p &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ -fsanitize=address -O1 -fno-omit-frame-pointer -g stack-use-after-scope.cpp &amp;&amp; ./a.out</span> </span><br><span class="line">=================================================================</span><br><span class="line">==40835==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7ffd94a68c00 at pc 0x56052611637b bp 0x7ffd94a68bd0 sp 0x7ffd94a68bc8</span><br><span class="line">READ of size 4 at 0x7ffd94a68c00 thread T0</span><br><span class="line">    #0 0x56052611637a in main /tmp/asan/stack-use-after-scope.cpp:12</span><br><span class="line">    #1 0x7fef44c4dd09 in __libc_start_main ../csu/libc-start.c:308</span><br><span class="line">    #2 0x560526116129 in _start (/tmp/asan/a.out+0x1129)</span><br><span class="line"></span><br><span class="line">Address 0x7ffd94a68c00 is located in stack of thread T0 at offset 32 in frame</span><br><span class="line">    #0 0x56052611629f in main /tmp/asan/stack-use-after-scope.cpp:10</span><br><span class="line"></span><br><span class="line">  This frame has 1 object(s):</span><br><span class="line">    [32, 36) &#x27;i&#x27; (line 6) &lt;== Memory access at offset 32 is inside this variable</span><br><span class="line">HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork</span><br><span class="line">      (longjmp and C++ exceptions *are* supported)</span><br><span class="line">SUMMARY: AddressSanitizer: stack-use-after-scope /tmp/asan/stack-use-after-scope.cpp:12 in main</span><br><span class="line">Shadow bytes around the buggy address:</span><br><span class="line">  0x100032945130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x100032945140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x100032945150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x100032945160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x100032945170: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1</span><br><span class="line">=&gt;0x100032945180:[f8]f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x100032945190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x1000329451a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x1000329451b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x1000329451c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x1000329451d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">Shadow byte legend (one shadow byte represents 8 application bytes):</span><br><span class="line">  Addressable:           00</span><br><span class="line">  Partially addressable: 01 02 03 04 05 06 07 </span><br><span class="line">  Heap left redzone:       fa</span><br><span class="line">  Freed heap region:       fd</span><br><span class="line">  Stack left redzone:      f1</span><br><span class="line">  Stack mid redzone:       f2</span><br><span class="line">  Stack right redzone:     f3</span><br><span class="line">  Stack after return:      f5</span><br><span class="line">  Stack use after scope:   f8</span><br><span class="line">  Global redzone:          f9</span><br><span class="line">  Global init order:       f6</span><br><span class="line">  Poisoned by user:        f7</span><br><span class="line">  Container overflow:      fc</span><br><span class="line">  Array cookie:            ac</span><br><span class="line">  Intra object redzone:    bb</span><br><span class="line">  ASan internal:           fe</span><br><span class="line">  Left alloca redzone:     ca</span><br><span class="line">  Right alloca redzone:    cb</span><br><span class="line">  Shadow gap:              cc</span><br><span class="line">==40835==ABORTING</span><br></pre></td></tr></table></figure><h2 id="stack-use-after-return"><a href="#stack-use-after-return" class="headerlink" title="stack-use-after-return"></a>stack-use-after-return</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> stack-use-after-return.cpp</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">include &lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line">int *p;</span><br><span class="line"></span><br><span class="line">void f() &#123;</span><br><span class="line">    int i[100];</span><br><span class="line">    p = &amp;i[0];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    f();</span><br><span class="line">    std::cout &lt;&lt; *p &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ -fsanitize=address -O1 -fno-omit-frame-pointer -g stack-use-after-return.cpp &amp;&amp; ASAN_OPTIONS=detect_stack_use_after_return=1 ./a.out</span> </span><br><span class="line">=================================================================</span><br><span class="line">==40871==ERROR: AddressSanitizer: stack-use-after-return on address 0x7f0c3a630030 at pc 0x562cdb120340 bp 0x7ffe757b4230 sp 0x7ffe757b4228</span><br><span class="line">READ of size 4 at 0x7f0c3a630030 thread T0</span><br><span class="line">    #0 0x562cdb12033f in main /tmp/asan/stack-use-after-return.cpp:12</span><br><span class="line">    #1 0x7f0c3db4cd09 in __libc_start_main ../csu/libc-start.c:308</span><br><span class="line">    #2 0x562cdb120129 in _start (/tmp/asan/a.out+0x1129)</span><br><span class="line"></span><br><span class="line">Address 0x7f0c3a630030 is located in stack of thread T0 at offset 48 in frame</span><br><span class="line">    #0 0x562cdb1201f4 in f() /tmp/asan/stack-use-after-return.cpp:5</span><br><span class="line"></span><br><span class="line">  This frame has 1 object(s):</span><br><span class="line">    [48, 448) &#x27;i&#x27; (line 6) &lt;== Memory access at offset 48 is inside this variable</span><br><span class="line">HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork</span><br><span class="line">      (longjmp and C++ exceptions *are* supported)</span><br><span class="line">SUMMARY: AddressSanitizer: stack-use-after-return /tmp/asan/stack-use-after-return.cpp:12 in main</span><br><span class="line">Shadow bytes around the buggy address:</span><br><span class="line">  0x0fe2074bdfb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0fe2074bdfc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0fe2074bdfd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0fe2074bdfe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0fe2074bdff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">=&gt;0x0fe2074be000: f5 f5 f5 f5 f5 f5[f5]f5 f5 f5 f5 f5 f5 f5 f5 f5</span><br><span class="line">  0x0fe2074be010: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5</span><br><span class="line">  0x0fe2074be020: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5</span><br><span class="line">  0x0fe2074be030: f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5 f5</span><br><span class="line">  0x0fe2074be040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0fe2074be050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">Shadow byte legend (one shadow byte represents 8 application bytes):</span><br><span class="line">  Addressable:           00</span><br><span class="line">  Partially addressable: 01 02 03 04 05 06 07 </span><br><span class="line">  Heap left redzone:       fa</span><br><span class="line">  Freed heap region:       fd</span><br><span class="line">  Stack left redzone:      f1</span><br><span class="line">  Stack mid redzone:       f2</span><br><span class="line">  Stack right redzone:     f3</span><br><span class="line">  Stack after return:      f5</span><br><span class="line">  Stack use after scope:   f8</span><br><span class="line">  Global redzone:          f9</span><br><span class="line">  Global init order:       f6</span><br><span class="line">  Poisoned by user:        f7</span><br><span class="line">  Container overflow:      fc</span><br><span class="line">  Array cookie:            ac</span><br><span class="line">  Intra object redzone:    bb</span><br><span class="line">  ASan internal:           fe</span><br><span class="line">  Left alloca redzone:     ca</span><br><span class="line">  Right alloca redzone:    cb</span><br><span class="line">  Shadow gap:              cc</span><br><span class="line">==40871==ABORTING</span><br></pre></td></tr></table></figure><h2 id="initialization-order-fiasco"><a href="#initialization-order-fiasco" class="headerlink" title="initialization-order-fiasco"></a>initialization-order-fiasco</h2><p><a href="non-local-static.html">example</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">alias</span> g++=<span class="string">&#x27;g++ -fsanitize=address -O1 -fno-omit-frame-pointer -g&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ A.cpp B.cpp &amp;&amp; ASAN_OPTIONS=check_initialization_order=<span class="literal">true</span> ./a.out</span> </span><br><span class="line">A(100)</span><br><span class="line">B()</span><br><span class="line">100</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ B.cpp A.cpp &amp;&amp; ASAN_OPTIONS=check_initialization_order=<span class="literal">true</span> ./a.out</span> </span><br><span class="line">B()</span><br><span class="line">=================================================================</span><br><span class="line">==40909==ERROR: AddressSanitizer: initialization-order-fiasco on address 0x5622ccb774c0 at pc 0x5622ccb74507 bp 0x7fff6b58ca00 sp 0x7fff6b58c9f8</span><br><span class="line">READ of size 4 at 0x5622ccb774c0 thread T0</span><br><span class="line">    #0 0x5622ccb74506 in A::f() /tmp/asan/A.h:6</span><br><span class="line">    #1 0x5622ccb74506 in B::B() /tmp/asan/B.cpp:7</span><br><span class="line">    #2 0x5622ccb74506 in __static_initialization_and_destruction_0 /tmp/asan/B.cpp:10</span><br><span class="line">    #3 0x5622ccb74506 in _GLOBAL__sub_I_b /tmp/asan/B.cpp:11</span><br><span class="line">    #4 0x5622ccb74854 in __libc_csu_init (/tmp/asan/a.out+0x1854)</span><br><span class="line">    #5 0x7fc91ca41c99 in __libc_start_main ../csu/libc-start.c:264</span><br><span class="line">    #6 0x5622ccb74199 in _start (/tmp/asan/a.out+0x1199)</span><br><span class="line"></span><br><span class="line">0x5622ccb774c0 is located 0 bytes inside of global variable &#x27;a&#x27; defined in &#x27;A.cpp:3:3&#x27; (0x5622ccb774c0) of size 4</span><br><span class="line">  registered at:</span><br><span class="line">    #0 0x7fc91cdf6f40 in __asan_register_globals ../../../../src/libsanitizer/asan/asan_globals.cpp:341</span><br><span class="line">    #1 0x5622ccb74807 in _sub_I_00099_1 (/tmp/asan/a.out+0x1807)</span><br><span class="line">    #2 0x5622ccb74854 in __libc_csu_init (/tmp/asan/a.out+0x1854)</span><br><span class="line"></span><br><span class="line">SUMMARY: AddressSanitizer: initialization-order-fiasco /tmp/asan/A.h:6 in A::f()</span><br><span class="line">Shadow bytes around the buggy address:</span><br><span class="line">  0x0ac4d9966e40: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9</span><br><span class="line">  0x0ac4d9966e50: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 00 00 00 00</span><br><span class="line">  0x0ac4d9966e60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0ac4d9966e70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0ac4d9966e80: 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9</span><br><span class="line">=&gt;0x0ac4d9966e90: f9 f9 f9 f9 00 00 00 00[f6]f6 f6 f6 f6 f6 f6 f6</span><br><span class="line">  0x0ac4d9966ea0: f6 f6 f6 f6 f6 f6 f6 f6 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0ac4d9966eb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0ac4d9966ec0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0ac4d9966ed0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x0ac4d9966ee0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">Shadow byte legend (one shadow byte represents 8 application bytes):</span><br><span class="line">  Addressable:           00</span><br><span class="line">  Partially addressable: 01 02 03 04 05 06 07 </span><br><span class="line">  Heap left redzone:       fa</span><br><span class="line">  Freed heap region:       fd</span><br><span class="line">  Stack left redzone:      f1</span><br><span class="line">  Stack mid redzone:       f2</span><br><span class="line">  Stack right redzone:     f3</span><br><span class="line">  Stack after return:      f5</span><br><span class="line">  Stack use after scope:   f8</span><br><span class="line">  Global redzone:          f9</span><br><span class="line">  Global init order:       f6</span><br><span class="line">  Poisoned by user:        f7</span><br><span class="line">  Container overflow:      fc</span><br><span class="line">  Array cookie:            ac</span><br><span class="line">  Intra object redzone:    bb</span><br><span class="line">  ASan internal:           fe</span><br><span class="line">  Left alloca redzone:     ca</span><br><span class="line">  Right alloca redzone:    cb</span><br><span class="line">  Shadow gap:              cc</span><br><span class="line">==40909==ABORTING</span><br></pre></td></tr></table></figure><h2 id="memory-leaks"><a href="#memory-leaks" class="headerlink" title="memory-leaks"></a>memory-leaks</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> memory-leaks.cpp</span> </span><br><span class="line">int main() &#123;</span><br><span class="line">    new int;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ memory-leaks.cpp -fsanitize=address &amp;&amp; ./a.out</span> </span><br><span class="line"></span><br><span class="line">=================================================================</span><br><span class="line">==41013==ERROR: LeakSanitizer: detected memory leaks</span><br><span class="line"></span><br><span class="line">Direct leak of 4 byte(s) in 1 object(s) allocated from:</span><br><span class="line">    #0 0x7f5dd4590647 in operator new(unsigned long) ../../../../src/libsanitizer/asan/asan_new_delete.cpp:99</span><br><span class="line">    #1 0x55df72344162 in main (/tmp/asan/a.out+0x1162)</span><br><span class="line">    #2 0x7f5dd4333d09 in __libc_start_main ../csu/libc-start.c:308</span><br><span class="line"></span><br><span class="line">SUMMARY: AddressSanitizer: 4 byte(s) leaked in 1 allocation(s).</span><br></pre></td></tr></table></figure><h2 id="sanitize-recover"><a href="#sanitize-recover" class="headerlink" title="sanitize-recover"></a>sanitize-recover</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> sanitize-recover.cpp</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">include &lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int *p = new int;</span><br><span class="line">    delete p;</span><br><span class="line">    delete p;</span><br><span class="line">    std::cout &lt;&lt; &quot;here&quot; &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ -fsanitize=address -fsanitize-recover=address sanitize-recover.cpp</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ASAN_OPTIONS=halt_on_error=0:log_path=asan.log ./a.out</span></span><br><span class="line">here</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> asan.log.41106</span> </span><br><span class="line">=================================================================</span><br><span class="line">==41106==ERROR: AddressSanitizer: attempting double-free on 0x602000000010 in thread T0:</span><br><span class="line">    #0 0x7f13c4942467 in operator delete(void*, unsigned long) ../../../../src/libsanitizer/asan/asan_new_delete.cpp:172</span><br><span class="line">    #1 0x55ca1580f226 in main (/tmp/asan/a.out+0x1226)</span><br><span class="line">    #2 0x7f13c4517d09 in __libc_start_main ../csu/libc-start.c:308</span><br><span class="line">    #3 0x55ca1580f129 in _start (/tmp/asan/a.out+0x1129)</span><br><span class="line"></span><br><span class="line">0x602000000010 is located 0 bytes inside of 4-byte region [0x602000000010,0x602000000014)</span><br><span class="line">freed by thread T0 here:</span><br><span class="line">    #0 0x7f13c4942467 in operator delete(void*, unsigned long) ../../../../src/libsanitizer/asan/asan_new_delete.cpp:172</span><br><span class="line">    #1 0x55ca1580f210 in main (/tmp/asan/a.out+0x1210)</span><br><span class="line">    #2 0x7f13c4517d09 in __libc_start_main ../csu/libc-start.c:308</span><br><span class="line"></span><br><span class="line">previously allocated by thread T0 here:</span><br><span class="line">    #0 0x7f13c4941647 in operator new(unsigned long) ../../../../src/libsanitizer/asan/asan_new_delete.cpp:99</span><br><span class="line">    #1 0x55ca1580f1f6 in main (/tmp/asan/a.out+0x11f6)</span><br><span class="line">    #2 0x7f13c4517d09 in __libc_start_main ../csu/libc-start.c:308</span><br><span class="line"></span><br><span class="line">SUMMARY: AddressSanitizer: double-free ../../../../src/libsanitizer/asan/asan_new_delete.cpp:172 in operator delete(void*, unsigned long)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chatgpt试用</title>
      <link href="/codes/chatgpt-start/"/>
      <url>/codes/chatgpt-start/</url>
      
        <content type="html"><![CDATA[<h2 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h2><ol><li><p>Q：C++实现二分查找</p><p>A：二分查找（Binary Search）是一种在有序数组中查找某一特定元素的搜索算法。其基本思想是将数组分成两部分，判断目标元素在哪一部分，然后递归地在该部分中查找，直到找到目标元素或者确定目标元素不存在为止。</p><p>以下是C++实现二分查找的示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">int</span> target = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> index = <span class="built_in">binarySearch</span>(arr, <span class="number">0</span>, n - <span class="number">1</span>, target);</span><br><span class="line">    <span class="keyword">if</span> (index != <span class="number">-1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Target found at index &quot;</span> &lt;&lt; index &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Target not found&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，<code>binarySearch</code>函数接收一个有序数组<code>arr</code>、数组左端点<code>left</code>、数组右端点<code>right</code>和目标元素<code>target</code>作为参数。函数使用while循环进行二分查找，如果找到目标元素，则返回其下标；否则返回-1表示未找到。</p><p>在<code>main</code>函数中，我们定义了一个有序数组<code>arr</code>，并调用<code>binarySearch</code>函数查找目标元素5。如果找到目标元素，则输出其下标；否则输出未找到的提示信息。</p></li><li><p>Q：是否会溢出呢</p><p>A：在上述代码中，二分查找的实现并不会导致溢出。这是因为在计算中间位置时，我们使用了以下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p>Q：用泛型实现一下</p><p>A：（以下只贴代码）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(T arr[], <span class="type">int</span> left, <span class="type">int</span> right, T target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Q：能否使用迭代器</p><p>A：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Iterator, <span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">Iterator <span class="title">binarySearch</span><span class="params">(Iterator begin, Iterator end, T target)</span> </span>&#123;</span><br><span class="line">    Iterator left = begin;</span><br><span class="line">    Iterator right = end - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        Iterator mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (*mid == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (*mid &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Q：怎么限制这个函数只接收随机迭代器</p><p>A：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;type_traits&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Iterator, <span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> std::enable_if&lt;std::is_same&lt;<span class="keyword">typename</span> std::iterator_traits&lt;Iterator&gt;::iterator_category, std::random_access_iterator_tag&gt;::value, Iterator&gt;::<span class="function">type</span></span><br><span class="line"><span class="function"><span class="title">binarySearch</span><span class="params">(Iterator begin, Iterator end, T target)</span> </span>&#123;</span><br><span class="line">    Iterator left = begin;</span><br><span class="line">    Iterator right = end - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        Iterator mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (*mid == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (*mid &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">auto</span> iter = <span class="built_in">binarySearch</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (iter != vec.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Target found at index &quot;</span> &lt;&lt; iter - vec.<span class="built_in">begin</span>() &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Target not found&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This will not compile</span></span><br><span class="line">    <span class="comment">// list&lt;int&gt; lst = &#123;1, 3, 5, 7, 9&#125;;</span></span><br><span class="line">    <span class="comment">// auto iter2 = binarySearch(lst.begin(), lst.end(), 5);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h2><p>Q：查看linux上tcp连接数最多的上游ip</p><p>A：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ntu | awk &#x27;&#123;print $5&#125;&#x27; | cut -d: -f1 | sort | uniq -c | sort -nr | head</span><br></pre></td></tr></table></figure><p>Me：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -an | grep ESTABLISHED | awk &#x27;&#123;print $5&#125;&#x27; | awk -F: &#x27;&#123;print $1&#125;&#x27; | sort | uniq -c | sort -n | tail</span><br></pre></td></tr></table></figure><h2 id="Part-3"><a href="#Part-3" class="headerlink" title="Part 3"></a>Part 3</h2><p>Q：解释一下这段代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">day_of_the_week</span><span class="params">(<span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">    y -= m &lt; <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> (y + y / <span class="number">4</span> - y / <span class="number">100</span> + y / <span class="number">400</span> + <span class="string">&quot;-bed=pen+mad.&quot;</span>[m] + d) % <span class="number">7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A：这段代码实现了一个函数day_of_the_week，用于计算给定日期是星期几。函数接受三个参数，分别是年份y、月份m和日期d。函数返回值是一个整数，表示星期几，其中0表示星期日，1表示星期一，以此类推。</p><p>函数的实现比较简洁，下面是对代码的解释：</p><ol><li>y -&#x3D; m &lt; 3：如果月份m小于3，说明当前日期是前一年的，因此将年份y减1。</li><li>“-bed&#x3D;pen+mad.”[m]：这是一个字符串字面量，其中每个字符都对应一个月份。例如，”-bed&#x3D;pen+mad.”[1]表示字符’b’，对应的是二月份。因此，这个表达式的值就是当前月份的字符。</li><li>(y + y &#x2F; 4 - y &#x2F; 100 + y &#x2F; 400 + “-bed&#x3D;pen+mad.”[m] + d) % 7：这是一个基于Zeller公式的计算式，用于计算给定日期是星期几。其中，y表示年份，d表示日期，”-bed&#x3D;pen+mad.”[m]表示当前月份的字符。y &#x2F; 4 - y &#x2F; 100 + y &#x2F; 400这一部分是用于计算闰年的，如果当前年份是闰年，则加1。最后，将这些值相加，并对7取模，得到的结果就是星期几的编号。</li></ol><p>需要注意的是，这个函数只适用于公元1582年10月15日之后的日期。在此之前，历法的计算方式不同，因此需要使用其他的算法来计算星期几。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用clang-format格式化C++代码</title>
      <link href="/codes/clang-format/"/>
      <url>/codes/clang-format/</url>
      
        <content type="html"><![CDATA[<ol start="0"><li>clang-format文档</li></ol><ul><li><a href="https://clang.llvm.org/docs/ClangFormat.html">https://clang.llvm.org/docs/ClangFormat.html</a></li><li><a href="https://clang.llvm.org/docs/ClangFormatStyleOptions.html">https://clang.llvm.org/docs/ClangFormatStyleOptions.html</a></li></ul><ol><li>查看预设的coding style</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang-format -style=google -dump-config</span><br></pre></td></tr></table></figure><ol start="2"><li>设置项目的coding style</li></ol><p>项目根目录下配置文件<code>.clang-format</code></p><ol start="3"><li>代码风格</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">Language:                           Cpp</span><br><span class="line">BasedOnStyle:                       Google</span><br><span class="line">ColumnLimit:                        120</span><br><span class="line">IndentWidth:                        4</span><br><span class="line">AccessModifierOffset:               -4</span><br><span class="line">ConstructorInitializerIndentWidth:  8</span><br><span class="line">ContinuationIndentWidth:            8</span><br><span class="line">PointerAlignment:                   Right</span><br><span class="line">ReferenceAlignment:                 Left</span><br><span class="line">DerivePointerAlignment:             false</span><br><span class="line">IndentCaseLabels:                   false</span><br><span class="line">AlignAfterOpenBracket:              DontAlign</span><br></pre></td></tr></table></figure><p>基于Google的代码风格（最广泛使用的C++代码风格之一），有以下一些区别</p><ul><li>列宽120，Google默认80</li><li>4空格缩进，Google默认2，访问控制符不缩进（<code>public, protected, private</code>）</li><li>同时设置<code>ConstructorInitializerIndentWidth, ContinuationIndentWidth</code>为8 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> x, <span class="type">int</span> y)</span><br><span class="line">            : <span class="built_in">x1234567890123456789_</span>(x),</span><br><span class="line">              <span class="built_in">y1234567890123456789_</span>(y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x1234567890123456789_ &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                y1234567890123456789_ &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ++x1234567890123456789_;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> x1234567890123456789_;</span><br><span class="line">    <span class="type">int</span> y1234567890123456789_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>初始化列表多一次缩进以区别构造函数内的缩进</li><li>续行多一次缩进以区别下一行的缩进</li></ul></li><li>指针和引用的位置，指针在右边，引用在左边（纯个人偏好）<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> *<span class="title">fn</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; a, <span class="type">int</span> *b)</span></span>;</span><br></pre></td></tr></table></figure></li><li><code>case</code>不缩进<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (n) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>开括号后不对齐<br>对齐的效果如下<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> varvarvarvar0,</span></span></span><br><span class="line"><span class="params"><span class="function">          <span class="type">int</span> varvarvarvar1,</span></span></span><br><span class="line"><span class="params"><span class="function">          <span class="type">int</span>&amp; varvarvarvar2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (varvarvarvar0 &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        varvarvarvar1 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        varvarvarvar2++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>if (</code>刚好4字符，与if内缩进相同，没有区分度<br>不对齐（按ContinuationIndentWidth配置缩进）效果如下<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> varvarvarvar0,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">int</span> varvarvarvar1,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">int</span>&amp; varvarvarvar2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (varvarvarvar0 &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            varvarvarvar1 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        varvarvarvar2++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>某些代码段不想格式化</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clang-format off</span></span><br><span class="line">这段代码不会格式化</span><br><span class="line"><span class="comment">// clang-format on</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++11速览</title>
      <link href="/codes/cplusplus-11/"/>
      <url>/codes/cplusplus-11/</url>
      
        <content type="html"><![CDATA[<h2 id="1-nullptr"><a href="#1-nullptr" class="headerlink" title="1 nullptr"></a>1 nullptr</h2><p>空指针字面量，强类型<code>std::nullptr_t</code>，可以隐式转换为任何指针类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __cplusplus</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NULL ((void *)0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span>   <span class="comment">/* C++ */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NULL 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>C++中，NULL 是字面量 0，而不是<code>(void *)0</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A *p1 = <span class="literal">nullptr</span>;</span><br><span class="line">    A *p2 = <span class="literal">NULL</span>;</span><br><span class="line">    A *p3 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// A *p4 = (void *)0;</span></span><br><span class="line">    <span class="comment">// error: cannot initialize a variable of type &#x27;A *&#x27; with an rvalue of type &#x27;void *&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++中，NULL是为兼容C代码而定义的，C++11前，C++代码推荐使用0代替NULL（0即是空值，false，空指针）。<br>C++代码中大量使用NULL，一方面是习惯，另一方面NULL比0更方便阅读，让人看上去就知道变量、参数是指针类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>-&gt;ptr = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;ptr = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">func</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">func</span>(<span class="number">0</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>C++98&#x2F;03中，模板函数调用时，0作为无类型值，无法进行类型推导（往往当成int）。C++11新增<code>nullptr</code>就是为了更好地支持泛型（模板）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstddef&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> T <span class="title">clone</span><span class="params">(<span class="type">const</span> T&amp; t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">(<span class="type">int</span> *)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">g</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">g</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">g</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">g</span>(<span class="built_in">clone</span>(<span class="literal">nullptr</span>));</span><br><span class="line">    <span class="comment">// g(clone(NULL));</span></span><br><span class="line">    <span class="comment">// g(clone(0));</span></span><br><span class="line">    <span class="comment">// error: no matching function for call to &#x27;g&#x27;</span></span><br><span class="line">    <span class="comment">// candidate function not viable: no known conversion from &#x27;int&#x27; to &#x27;int *&#x27; for 1st argument</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作为强类型的<code>nullptr</code>还可以解决如下二义性问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> *)</span> </span>&#123; std::cout &lt;&lt; <span class="string">&quot;f(int *) called.&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span>)</span> </span>&#123; std::cout &lt;&lt; <span class="string">&quot;f(int) called.&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">(<span class="type">char</span> *)</span> </span>&#123; std::cout &lt;&lt; <span class="string">&quot;g(char *) called.&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">(<span class="type">char</span>)</span> </span>&#123; std::cout &lt;&lt; <span class="string">&quot;g(char) called.&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">f</span>(<span class="literal">nullptr</span>);  <span class="comment">// f(int *) called.</span></span><br><span class="line">    <span class="built_in">f</span>(<span class="number">0</span>);        <span class="comment">// f(int) called.</span></span><br><span class="line">    <span class="comment">// f(NULL); error: call to &#x27;f&#x27; is ambiguous</span></span><br><span class="line">    <span class="comment">// assert(typeid(long) == typeid(NULL));</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">g</span>(<span class="literal">nullptr</span>);  <span class="comment">// g(char *) called.</span></span><br><span class="line">    <span class="comment">// g(0);    error: call to &#x27;g&#x27; is ambiguous</span></span><br><span class="line">    <span class="comment">// g(NULL); error: call to &#x27;g&#x27; is ambiguous</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：C++11后，使用强类型的<code>nullptr</code>替代<code>NULL/0</code>;</p><h2 id="2-initialization-std-initializer-list"><a href="#2-initialization-std-initializer-list" class="headerlink" title="2 initialization&#x2F;std::initializer_list"></a>2 initialization&#x2F;std::initializer_list</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() : <span class="built_in">p</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span>) : <span class="built_in">p</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">long</span>) : p&#123;<span class="literal">nullptr</span>&#125; &#123;&#125;  <span class="comment">// c++11</span></span><br><span class="line">    <span class="built_in">A</span>(<span class="type">double</span>) : <span class="built_in">A</span>() &#123;&#125;       <span class="comment">// delegating constructors, c++11</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span> *p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A2</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span> *p = <span class="literal">nullptr</span>;  <span class="comment">// c++11</span></span><br><span class="line">    <span class="type">char</span> *p2&#123;<span class="literal">nullptr</span>&#125;;  <span class="comment">// c++11</span></span><br><span class="line">    <span class="comment">// char *p3(nullptr); // error</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">i1</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span> i2 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i3&#123;<span class="number">0</span>&#125;;             <span class="comment">// c++11</span></span><br><span class="line">    <span class="type">int</span> *pi = <span class="keyword">new</span> <span class="type">int</span>&#123;<span class="number">0</span>&#125;;  <span class="comment">// c++11</span></span><br><span class="line">    A a&#123;<span class="number">0</span>&#125;;                <span class="comment">// c++11</span></span><br><span class="line"></span><br><span class="line">    std::atomic&lt;<span class="type">int</span>&gt; ai1&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="function">std::atomic&lt;<span class="type">int</span>&gt; <span class="title">ai2</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="comment">// std::atomic&lt;int&gt; ai3 = 0;</span></span><br><span class="line">    <span class="comment">// error in c++11, atomic(const atomic&amp;) = delete;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结: C++11后新的初始化方式使代码更简洁，统一。</p><h2 id="3-auto-decltype"><a href="#3-auto-decltype" class="headerlink" title="3 auto&#x2F;decltype"></a>3 auto&#x2F;decltype</h2><p>auto在C++11前就是一个关键字, 变量前加auto(或不加)表示自动存储期, C++11起用作自动类型推导。</p><p>C++11里auto用于推导变量的类型, C++14里可以推导函数返回类型, 其规则同模板实参推导规则。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> x = <span class="number">0</span>;  <span class="comment">// int</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> x = <span class="number">0u</span>;  <span class="comment">// unsigned int</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> x&#123;<span class="number">0</span>&#125;;  <span class="comment">// int</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// auto x&#123;0, 1&#125;;</span></span><br><span class="line">    <span class="comment">// error: initializer for variable &#x27;x&#x27; with type &#x27;auto&#x27; contains multiple expressions</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> x = &#123;<span class="number">0</span>&#125;;  <span class="comment">// std::initializer_list&lt;int&gt;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span>&amp; x = <span class="number">0</span>;  <span class="comment">// const int&amp;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    std::map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; map;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : map) &#123;</span><br><span class="line">    &#125;  <span class="comment">// std::pair&lt;const int, int&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : map) &#123;</span><br><span class="line">    &#125;  <span class="comment">// &amp;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; x : map) &#123;</span><br><span class="line">    &#125;  <span class="comment">// const std::pair&lt;const int, int&gt;&amp;</span></span><br><span class="line"></span><br><span class="line">    map&lt;string, <span class="type">int</span>&gt; map2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> std::pair&lt;std::string, <span class="type">int</span>&gt;&amp; kv : map2) ;       <span class="comment">// copy</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> std::pair&lt;<span class="type">const</span> std::string, <span class="type">int</span>&gt;&amp; kv : map2) ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; kv : map2) ;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// c++17</span></span><br><span class="line">    std::map&lt;std::string, <span class="type">int</span>&gt; data&#123;&#123;<span class="string">&quot;abc&quot;</span>, <span class="number">1</span>&#125;, &#123;<span class="string">&quot;bcd&quot;</span>, <span class="number">2</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; [k, v] : data) &#123;</span><br><span class="line">        std::cout &lt;&lt; k &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; v &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> x = <span class="keyword">new</span> <span class="type">int</span>&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">// int *</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> *x = <span class="keyword">new</span> <span class="type">int</span>&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">// int *</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// auto x = 1, y = 2.0;</span></span><br><span class="line">    <span class="comment">// error: &#x27;auto&#x27; deduced as &#x27;int&#x27; in declaration of &#x27;x&#x27; and deduced as &#x27;double&#x27; in declaration of &#x27;y&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>&amp; y = x;</span><br><span class="line">    <span class="keyword">auto</span> z = y;  <span class="comment">// int, not int&amp;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> x&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> y&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">auto</span> z1 = x;  <span class="comment">// int, not const int</span></span><br><span class="line">    <span class="keyword">auto</span> z2 = x;  <span class="comment">// int, not volatile int</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> x&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">auto</span>&amp; y = x;  <span class="comment">// const int&amp;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x[]&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">auto</span> y = x;  <span class="comment">// int *, not int[3]</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x[]&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">auto</span>&amp; y = x;  <span class="comment">// int[3]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">add</span><span class="params">(T t, U u)</span> -&gt; <span class="title">decltype</span><span class="params">(t + u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t + u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">decltype</span>(x) y;  <span class="comment">// int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">decltype</span>(f) func;  <span class="comment">// void ()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">decltype</span>(<span class="number">0.1</span>) f;  <span class="comment">// double</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> g = [](<span class="type">int</span> a, <span class="type">int</span> b) &#123; <span class="keyword">return</span> a + b; &#125;;</span><br><span class="line">    <span class="keyword">decltype</span>(g) func2 = g;                  <span class="comment">// lambda</span></span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">func2</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; std::endl;  <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> i&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">decltype</span>(i) j = i;  <span class="comment">// const int</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span>&amp; b = a;</span><br><span class="line">    <span class="keyword">decltype</span>(b) c = a;  <span class="comment">// int&amp;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> ret = <span class="built_in">add</span>(<span class="number">1.0</span>, <span class="number">2.1</span>);  <span class="comment">// double</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结: auto&#x2F;decltype 有助于简化代码, 但细节很多<code>(*, &amp;, const, volatile)</code>, 将其理解为占位符而不是一种新类型。</p><h2 id="4-lambda"><a href="#4-lambda" class="headerlink" title="4 lambda"></a>4 lambda</h2><p>Lambda 表达式: 可以捕获变量的匿名函数对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">data</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">std::<span class="built_in">generate</span>(data.<span class="built_in">begin</span>(), data.<span class="built_in">end</span>(), [n = <span class="number">0</span>]() <span class="keyword">mutable</span> &#123; <span class="keyword">return</span> n++; &#125;);</span><br><span class="line"><span class="comment">// 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*func)</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    func f = []() &#123; std::cout &lt;&lt; <span class="string">&quot;func1&quot;</span> &lt;&lt; std::endl; &#125;;</span><br><span class="line">    <span class="built_in">f</span>();  <span class="comment">// func1</span></span><br><span class="line">    <span class="type">int</span> x = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">// func f2 = [x]() &#123; std::cout &lt;&lt; &quot;func2, x = &quot; &lt;&lt; x &lt;&lt; std::endl; &#125;;</span></span><br><span class="line">    <span class="comment">// error: no viable conversion from &#x27;(lambda)&#x27; to &#x27;func&#x27; (aka &#x27;void (*)()&#x27;)</span></span><br><span class="line">    std::function&lt;<span class="type">void</span>()&gt; f2 = [x]() &#123; std::cout &lt;&lt; <span class="string">&quot;func2, x = &quot;</span> &lt;&lt; x &lt;&lt; std::endl; &#125;;</span><br><span class="line">    <span class="built_in">f2</span>();  <span class="comment">// func2, x = 100</span></span><br><span class="line"></span><br><span class="line">    std::function&lt;<span class="type">void</span>()&gt; f3 = std::<span class="built_in">bind</span>([](<span class="type">int</span> x) &#123; std::cout &lt;&lt; <span class="string">&quot;func3, x = &quot;</span> &lt;&lt; x &lt;&lt; std::endl; &#125;, <span class="number">200</span>);</span><br><span class="line">    <span class="built_in">f3</span>();  <span class="comment">// func3, x = 200</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：lambda可以简化代码，可以用来实现闭包（包括operator(), std::function, std::bind 等）。</p><h2 id="5-Rvalue-reference-std-move"><a href="#5-Rvalue-reference-std-move" class="headerlink" title="5 Rvalue reference&#x2F;std::move"></a>5 Rvalue reference&#x2F;std::move</h2><p>5.1 左值&#x2F;右值</p><p>一般而言，左值出现在等号左边，右值出现在等号右边，左值可以取地址，右值不能取地址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a++             // 右值</span><br><span class="line">++a             // 左值</span><br><span class="line">&amp;a              // r</span><br><span class="line">a, b            // a是左值，b是右值</span><br><span class="line">&quot;hello&quot;         // 字符串字面量，左值</span><br><span class="line">nullptr 0 true  // 其他字面量，右值</span><br><span class="line">this            // 右值</span><br><span class="line">string()        // 右值</span><br><span class="line">枚举项          // 右值</span><br><span class="line"></span><br><span class="line">变量的名字，不论其类型(右值引用)，由其名字构成的表达式仍是左值表达式</span><br></pre></td></tr></table></figure><p>5.2 左值引用&#x2F;右值引用</p><p>C++支持引用（创建对象的别名），C++11起，支持右值引用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左值引用，可拥有不同的 cv 限定</span></span><br><span class="line">std::string s;</span><br><span class="line">std::string&amp; s2 = s;                <span class="comment">// s的引用，可通过s2修改s</span></span><br><span class="line"><span class="type">const</span> std::string&amp; s3 = s;          <span class="comment">// s的常量引用，不可通过s3修改s</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">const</span> std::string&amp; s)</span></span>;       <span class="comment">// 参数为引用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 右值引用</span></span><br><span class="line"><span class="type">int</span>&amp; n = <span class="number">42</span>;                <span class="comment">// error, 不能绑定到左值引用</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; n = <span class="number">42</span>;          <span class="comment">// ok, const</span></span><br><span class="line"><span class="type">int</span>&amp;&amp; n = <span class="number">42</span>;               <span class="comment">// ok, 右值引用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 右值引用/到const的左值引用 可用于为临时对象延长生存期</span></span><br><span class="line">std::string s1 = <span class="string">&quot;hello, &quot;</span>;</span><br><span class="line">std::string s2 = <span class="string">&quot;world.&quot;</span>;</span><br><span class="line">string&amp;&amp; s3 = s1 + s2;</span><br><span class="line">std::cout &lt;&lt; s3 &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    ~<span class="built_in">A</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A&amp;&amp; a = <span class="built_in">A</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;here&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// g++ -fno-elide-constructors -std=c++11, 关闭返回值优化</span></span><br><span class="line"><span class="comment">// here</span></span><br><span class="line"><span class="comment">// ~A()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a = <span class="built_in">A</span>();</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;here&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ~A()</span></span><br><span class="line"><span class="comment">// here</span></span><br><span class="line"><span class="comment">// ~A()</span></span><br></pre></td></tr></table></figure><p>5.3 std::move</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// from gcc 11.3.0, 等价于static_cast到相应类型的右值引用</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">_GLIBCXX_NODISCARD</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">typename</span> std::remove_reference&lt;_Tp&gt;::<span class="function">type&amp;&amp;</span></span><br><span class="line"><span class="function"><span class="title">move</span><span class="params">(_Tp&amp;&amp; <span class="type">__t</span>)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">typename</span> std::remove_reference&lt;_Tp&gt;::type&amp;&amp;&gt;(<span class="type">__t</span>); &#125;</span><br></pre></td></tr></table></figure><p>5.4 移动构造函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="built_in">A</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">const</span> A&amp;) &#123; std::cout &lt;&lt; <span class="string">&quot;A(const A&amp;)&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">    <span class="built_in">A</span>(A&amp;&amp;) &#123; std::cout &lt;&lt; <span class="string">&quot;A(A&amp;&amp;)&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;A&gt; vc;</span><br><span class="line">    vc.<span class="built_in">emplace_back</span>(<span class="built_in">A</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A(A&amp;&amp;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::string <span class="title">s</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    std::string s2 = std::<span class="built_in">move</span>(s);</span><br><span class="line">    std::cout &lt;&lt; std::boolalpha &lt;&lt; s.<span class="built_in">empty</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; s2 &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="comment">// hello</span></span><br></pre></td></tr></table></figure><p>5.5 std::forward</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用折叠</span></span><br><span class="line">T&amp; &amp;   =&gt;  T&amp;</span><br><span class="line">T&amp;&amp; &amp;  =&gt;  T&amp;</span><br><span class="line">T&amp; &amp;&amp;  =&gt;  T&amp;</span><br><span class="line">T&amp;&amp; &amp;&amp; =&gt;  T&amp;&amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// from gcc 11.3.0</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">_GLIBCXX_NODISCARD</span><br><span class="line"><span class="keyword">constexpr</span> _Tp&amp;&amp;</span><br><span class="line">forward(<span class="keyword">typename</span> std::remove_reference&lt;_Tp&gt;::type&amp; <span class="type">__t</span>) <span class="keyword">noexcept</span></span><br><span class="line">&#123; <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;_Tp&amp;&amp;&gt;(<span class="type">__t</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完美转发</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span> &amp; </span>&#123; std::cout &lt;&lt; <span class="string">&quot;&amp;&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span> &amp;&amp; </span>&#123; std::cout &lt;&lt; <span class="string">&quot;&amp;&amp;&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(T&amp;&amp; t)</span> </span>&#123;    <span class="comment">// 转发引用(无cv限定的模板函数形参、auto&amp;&amp;)</span></span><br><span class="line">    t.<span class="built_in">f</span>();                   <span class="comment">// &amp;</span></span><br><span class="line">    std::<span class="built_in">move</span>(t).<span class="built_in">f</span>();        <span class="comment">// &amp;&amp;</span></span><br><span class="line">    std::forward&lt;T&gt;(t).<span class="built_in">f</span>();  <span class="comment">// &amp; or &amp;&amp;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    <span class="built_in">Print</span>(a);</span><br><span class="line">    <span class="built_in">Print</span>(<span class="built_in">A</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// std::vector::emplace_back =&gt; placement new 根据左值/右值决定拷贝构造/移动构造</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp;&amp; x: <span class="built_in">f</span>()); <span class="comment">// 转发引用，f() 可以是左值/右值</span></span><br></pre></td></tr></table></figure><p>总结：移动语义节省拷贝构造的开销，是升级至C++11最重要的特性之一；没有移动语义，就没有unique_ptr（C++11前只能用auto_ptr）；std::move&#x2F;std::forward 不移动&#x2F;转发任何东西，只做cast。</p><h2 id="6-forEach"><a href="#6-forEach" class="headerlink" title="6 forEach"></a>6 forEach</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[]&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>&amp; x : arr) &#123;</span><br><span class="line">    x++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://cppinsights.io/</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">int</span> (&amp;__range1)[<span class="number">3</span>] = arr;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> * __begin1 = __range1, *__end1 = __range1 + <span class="number">3L</span>; __begin1 != __end1; ++__begin1) &#123;</span><br><span class="line">  <span class="type">int</span> &amp; x = *__begin1;</span><br><span class="line">  x++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组 定义了begin和end 花括号初始化器列表</span></span><br></pre></td></tr></table></figure><p>总结：用于遍历，方便，更可读。</p><h2 id="7-constexpr"><a href="#7-constexpr" class="headerlink" title="7 constexpr"></a>7 constexpr</h2><p>修饰变量或函数，用于常量表达式，（要求编译器）进行编译期求值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用std::numeric_limits&lt;int&gt;::max()替代INT_MAX</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="keyword">class</span> <span class="title class_">numeric_limits</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="keyword">constexpr</span> T <span class="title">max</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>总结：扩展了常量表达式的范围，显示要求编译器。</p><h2 id="8-raw-string-literal"><a href="#8-raw-string-literal" class="headerlink" title="8 raw string literal"></a>8 raw string literal</h2><p>原始字符串字面量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">std::cout &lt;&lt; <span class="string">R&quot;dxxx( hello, world. )dxxx&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">//  hello, world.</span></span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">R&quot;(ABC</span></span><br><span class="line"><span class="string">123)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">// ABC\n123</span></span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">R&quot;(</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;k1&quot; : true,</span></span><br><span class="line"><span class="string">  &quot;k2&quot; : &quot;str&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function">std::regex <span class="title">word_regex</span><span class="params">(<span class="string">R&quot;(\w+)&quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">// \\w+</span></span><br></pre></td></tr></table></figure><p>总结：避免转义字符，json、regex、换行时好用。</p><h2 id="9-variadic-templates"><a href="#9-variadic-templates" class="headerlink" title="9 variadic templates"></a>9 variadic templates</h2><p>可变模版参数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; std::cout &lt;&lt; std::endl; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> T&amp; arg0, <span class="type">const</span> Args&amp;...args)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; arg0 &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">print</span>(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>, <span class="number">1.0</span>, <span class="literal">true</span>, <span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// c++14, auto in lambda parameter</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> Args&amp;...args)</span> </span>&#123;</span><br><span class="line">    (<span class="type">void</span>)std::initializer_list&lt;<span class="type">int</span>&gt;&#123;([](<span class="keyword">auto</span> i) &#123; std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>; &#125;(args), <span class="number">0</span>)...&#125;;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：强大，优美！</p><h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><p><strong>lang</strong></p><ul><li>noexcept</li><li>thread_local</li><li>static_assert</li><li>…</li></ul><p><strong>library</strong></p><ul><li>容器：std::array, std::unordered_map, std::unordered_set, std::unordered_multiset, std::unordered_multimap, std::forward_list</li><li>智能指针：std::unique_ptr, std::shared_ptr, std::weak_ptr</li><li>正则表达式库：regex</li><li>并发：std::thread, std::atomic, std::mutex, std::condition_variable</li><li>…</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://zh.cppreference.com/">https://zh.cppreference.com</a></li><li><a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf">https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf</a></li><li><a href="https://github.com/CnTransGroup/EffectiveModernCppChinese">https://github.com/CnTransGroup/EffectiveModernCppChinese</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 算法库</title>
      <link href="/codes/cplusplus-algorithm/"/>
      <url>/codes/cplusplus-algorithm/</url>
      
        <content type="html"><![CDATA[<p><code>#include &lt;algorithm&gt;</code></p><h2 id="std-for-each"><a href="#std-for-each" class="headerlink" title="std::for_each"></a><code>std::for_each</code></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> InputIt, <span class="keyword">class</span> UnaryFunction&gt;</span></span><br><span class="line"><span class="function">UnaryFunction <span class="title">for_each</span><span class="params">(InputIt first, InputIt last, UnaryFunction f)</span></span>;</span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; data &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">std::for_each(data.<span class="built_in">begin</span>(), data.<span class="built_in">end</span>(), [](<span class="type">const</span> <span class="type">int</span>&amp; x)&#123; std::cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>; &#125;); <span class="comment">//=&gt;1 2 3</span></span><br></pre></td></tr></table></figure><h2 id="std-all-of-std-any-of-std-none-of"><a href="#std-all-of-std-any-of-std-none-of" class="headerlink" title="std::all_of, std::any_of, std::none_of"></a><code>std::all_of, std::any_of, std::none_of</code></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> InputIt, <span class="keyword">class</span> UnaryPredicate&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">all_of</span><span class="params">(InputIt first, InputIt last, UnaryPredicate p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> InputIt, <span class="keyword">class</span> UnaryPredicate&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">any_of</span><span class="params">(InputIt first, InputIt last, UnaryPredicate p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> InputIt, <span class="keyword">class</span> UnaryPredicate&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">none_of</span><span class="params">(InputIt first, InputIt last, UnaryPredicate p)</span></span>;</span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; data &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">std::cout &lt;&lt; std::<span class="built_in">all_of</span>(data.<span class="built_in">begin</span>(), data.<span class="built_in">end</span>(), [](<span class="type">const</span> <span class="type">int</span>&amp; x) &#123; <span class="keyword">return</span> x &gt; <span class="number">0</span>; &#125;); <span class="comment">//=&gt;1</span></span><br><span class="line">std::cout &lt;&lt; std::<span class="built_in">any_of</span>(data.<span class="built_in">begin</span>(), data.<span class="built_in">end</span>(), [](<span class="type">const</span> <span class="type">int</span>&amp; x) &#123; <span class="keyword">return</span> x &gt; <span class="number">0</span>; &#125;); <span class="comment">//=&gt;1</span></span><br><span class="line">std::cout &lt;&lt; std::<span class="built_in">none_of</span>(data.<span class="built_in">begin</span>(), data.<span class="built_in">end</span>(), [](<span class="type">const</span> <span class="type">int</span>&amp; x) &#123; <span class="keyword">return</span> x &gt; <span class="number">0</span>; &#125;); <span class="comment">//=&gt;0</span></span><br></pre></td></tr></table></figure><h2 id="std-count-std-count-if"><a href="#std-count-std-count-if" class="headerlink" title="std::count, std::count_if"></a><code>std::count, std::count_if</code></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">InputIt</span>, <span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">typename</span> iterator_traits&lt;InputIt&gt;::<span class="function">difference_type <span class="title">count</span><span class="params">(InputIt first, InputIt last, <span class="type">const</span> T &amp;value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">InputIt</span>, <span class="keyword">class</span> <span class="title class_">UnaryPredicate</span>&gt;</span><br><span class="line"><span class="keyword">typename</span> iterator_traits&lt;InputIt&gt;::<span class="function">difference_type <span class="title">count_if</span><span class="params">(InputIt first, InputIt last, UnaryPredicate p)</span></span>;</span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; data &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line">std::cout &lt;&lt; std::<span class="built_in">count</span>(data.<span class="built_in">begin</span>(), data.<span class="built_in">end</span>(), <span class="number">1</span>); <span class="comment">//=&gt;2</span></span><br><span class="line">std::cout &lt;&lt; std::<span class="built_in">count_if</span>(data.<span class="built_in">begin</span>(), data.<span class="built_in">end</span>(), [](<span class="type">const</span> <span class="type">int</span>&amp; x) &#123; <span class="keyword">return</span> x %<span class="number">2</span> == <span class="number">0</span>; &#125;); <span class="comment">//=&gt;1</span></span><br></pre></td></tr></table></figure><h2 id="std-transform"><a href="#std-transform" class="headerlink" title="std::transform"></a><code>std::transform</code></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> InputIt, <span class="keyword">class</span> OutputIt, <span class="keyword">class</span> UnaryOperation&gt;</span></span><br><span class="line"><span class="function">OutputIt <span class="title">transform</span><span class="params">(InputIt first1, InputIt last1, OutputIt d_first, UnaryOperation unary_op)</span></span>;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; data &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="built_in">transform</span>(data.<span class="built_in">begin</span>(), data.<span class="built_in">end</span>(), <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>), [](<span class="type">int</span> x) &#123; <span class="keyword">return</span> x * x; &#125;);</span><br><span class="line"><span class="comment">// 1 4 9 16 25</span></span><br></pre></td></tr></table></figure><h2 id="std-generate-std-generate-n"><a href="#std-generate-std-generate-n" class="headerlink" title="std::generate, std::generate_n"></a><code>std::generate, std::generate_n</code></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> ForwardIt, <span class="keyword">class</span> Generator&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">generate</span><span class="params">(ForwardIt first, ForwardIt last, Generator g)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> OutputIt, <span class="keyword">class</span> Size, <span class="keyword">class</span> Generator&gt;</span></span><br><span class="line"><span class="function">OutputIt <span class="title">generate_n</span><span class="params">(OutputIt first, Size count, Generator g)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">data</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="built_in">generate</span>(data.<span class="built_in">begin</span>(), data.<span class="built_in">end</span>(), [n = <span class="number">0</span>] () <span class="keyword">mutable</span> &#123; <span class="keyword">return</span> n++; &#125;);</span><br><span class="line"><span class="comment">// 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">generate_n</span>(data.<span class="built_in">begin</span>(), <span class="number">5</span>, [n = <span class="number">1</span>] () <span class="keyword">mutable</span> &#123; <span class="keyword">return</span> <span class="number">2</span> * n++; &#125;);</span><br><span class="line"><span class="comment">// 2 4 6 8 10 5 6 7 8 9</span></span><br></pre></td></tr></table></figure><h2 id="std-copy-std-copy-backward"><a href="#std-copy-std-copy-backward" class="headerlink" title="std::copy, std::copy_backward"></a><code>std::copy, std::copy_backward</code></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> InputIt, <span class="keyword">class</span> OutputIt&gt;</span></span><br><span class="line"><span class="function">OutputIt <span class="title">copy</span><span class="params">(InputIt first, InputIt last, OutputIt d_first)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> BidirIt1, <span class="keyword">class</span> BidirIt2&gt;</span></span><br><span class="line"><span class="function">BidirIt2 <span class="title">copy_backward</span><span class="params">(BidirIt1 first, BidirIt1 last, BidirIt2 d_last)</span></span>;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; data;</span><br><span class="line"><span class="built_in">copy</span>(<span class="built_in">istream_iterator</span>&lt;<span class="type">int</span>&gt;(cin), <span class="built_in">istream_iterator</span>&lt;<span class="type">int</span>&gt;(), <span class="built_in">back_inserter</span>(data));</span><br><span class="line"><span class="built_in">copy</span>(data.<span class="built_in">begin</span>(), data.<span class="built_in">end</span>(), <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; data &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> &#125;;</span><br><span class="line">data.<span class="built_in">resize</span>(data.<span class="built_in">size</span>() + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">copy_backward</span>(data.<span class="built_in">begin</span>(), data.<span class="built_in">begin</span>() + <span class="number">6</span>, data.<span class="built_in">end</span>());</span><br><span class="line">data[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">copy</span>(data.<span class="built_in">begin</span>(), data.<span class="built_in">end</span>(), <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line"><span class="comment">// 1 2 3 4 5 6 7</span></span><br></pre></td></tr></table></figure><h2 id="std-is-sorted"><a href="#std-is-sorted" class="headerlink" title="std::is_sorted"></a><code>std::is_sorted</code></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> ForwardIt&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_sorted</span><span class="params">(ForwardIt first, ForwardIt last)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> ForwardIt, <span class="keyword">class</span> Compare&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_sorted</span><span class="params">(ForwardIt first, ForwardIt last, Compare comp)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span> &#125;;</span><br><span class="line">cout &lt;&lt; boolalpha &lt;&lt; <span class="built_in">is_sorted</span>(<span class="built_in">begin</span>(arr), <span class="built_in">end</span>(arr)) &lt;&lt; endl;       <span class="comment">// false</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">is_sorted</span>(<span class="built_in">begin</span>(arr), <span class="built_in">end</span>(arr), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;()) &lt;&lt; endl;    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="std-sort"><a href="#std-sort" class="headerlink" title="std::sort"></a><code>std::sort</code></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> RandomIt&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(RandomIt first, RandomIt last)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> RandomIt, <span class="keyword">class</span> Compare&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(RandomIt first, RandomIt last, Compare comp)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> data[<span class="number">5</span>] = &#123; <span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span> &#125;;</span><br><span class="line"><span class="built_in">sort</span>(data, data + <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 1 2 3 4 5</span></span><br><span class="line"><span class="built_in">sort</span>(data, data + <span class="number">5</span>, <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line"><span class="comment">// 5 4 3 2 1</span></span><br></pre></td></tr></table></figure><h2 id="std-binary-search-std-lower-bound-std-upper-bound"><a href="#std-binary-search-std-lower-bound-std-upper-bound" class="headerlink" title="std::binary_search, std::lower_bound, std::upper_bound"></a><code>std::binary_search, std::lower_bound, std::upper_bound</code></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> ForwardIt, <span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">binary_search</span><span class="params">(ForwardIt first, ForwardIt last, <span class="type">const</span> T&amp; value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> ForwardIt, <span class="keyword">class</span> T, <span class="keyword">class</span> Compare&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">binary_search</span><span class="params">(ForwardIt first, ForwardIt last, <span class="type">const</span> T&amp; value, Compare comp)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> ForwardIt, <span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">ForwardIt <span class="title">lower_bound</span><span class="params">(ForwardIt first, ForwardIt last, <span class="type">const</span> T&amp; value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> ForwardIt, <span class="keyword">class</span> T, <span class="keyword">class</span> Compare&gt;</span></span><br><span class="line"><span class="function">ForwardIt <span class="title">lower_bound</span><span class="params">(ForwardIt first, ForwardIt last, <span class="type">const</span> T&amp; value, Compare comp)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> ForwardIt, <span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">ForwardIt <span class="title">upper_bound</span><span class="params">(ForwardIt first, ForwardIt last, <span class="type">const</span> T&amp; value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> ForwardIt, <span class="keyword">class</span> T, <span class="keyword">class</span> Compare&gt;</span></span><br><span class="line"><span class="function">ForwardIt <span class="title">upper_bound</span><span class="params">(ForwardIt first, ForwardIt last, <span class="type">const</span> T&amp; value, Compare comp)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123; <span class="number">-2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">-3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"><span class="built_in">sort</span>(a, a + <span class="number">5</span>);</span><br><span class="line"><span class="comment">// -3 -2 4 5 7</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">binary_search</span>(a, a + <span class="number">5</span>, <span class="number">4</span>) &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">binary_search</span>(a, a + <span class="number">5</span>, <span class="number">1</span>) &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; *<span class="built_in">lower_bound</span>(a, a + <span class="number">5</span>, <span class="number">5</span>) &lt;&lt; endl;  <span class="comment">// 5</span></span><br><span class="line">cout &lt;&lt; *<span class="built_in">lower_bound</span>(a, a + <span class="number">5</span>, <span class="number">1</span>) &lt;&lt; endl;  <span class="comment">// 4</span></span><br><span class="line">cout &lt;&lt; *<span class="built_in">lower_bound</span>(a, a + <span class="number">4</span>, <span class="number">8</span>) &lt;&lt; endl;  <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; *<span class="built_in">upper_bound</span>(a, a + <span class="number">5</span>, <span class="number">5</span>) &lt;&lt; endl;  <span class="comment">// 7</span></span><br><span class="line">cout &lt;&lt; *<span class="built_in">upper_bound</span>(a, a + <span class="number">4</span>, <span class="number">8</span>) &lt;&lt; endl;  <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><h2 id="std-next-permutation"><a href="#std-next-permutation" class="headerlink" title="std::next_permutation"></a><code>std::next_permutation</code></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> BidirIt&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">next_permutation</span><span class="params">(BidirIt first, BidirIt last)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> BidirIt, <span class="keyword">class</span> Compare&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">next_permutation</span><span class="params">(BidirIt first, BidirIt last, Compare comp)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">str</span><span class="params">(<span class="string">&quot;aba&quot;</span>)</span></span>;</span><br><span class="line"><span class="built_in">sort</span>(str.<span class="built_in">begin</span>(), str.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">next_permutation</span>(str.<span class="built_in">begin</span>(), str.<span class="built_in">end</span>()))</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"><span class="comment">// aba</span></span><br><span class="line"><span class="comment">// baa</span></span><br></pre></td></tr></table></figure><h2 id="std-merge"><a href="#std-merge" class="headerlink" title="std::merge"></a><code>std::merge</code></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> InputIt1, <span class="keyword">class</span> InputIt2, <span class="keyword">class</span> OutputIt&gt;</span></span><br><span class="line"><span class="function">OutputIt <span class="title">merge</span><span class="params">(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, OutputIt d_first)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> InputIt1, <span class="keyword">class</span> InputIt2, <span class="keyword">class</span> OutputIt, <span class="keyword">class</span> Compare&gt;</span></span><br><span class="line"><span class="function">OutputIt <span class="title">merge</span><span class="params">(InputIt1 first1, InputIt1 last1, InputIt2 first2, InputIt2 last2, OutputIt d_first, Compare comp)</span></span>;</span><br><span class="line"></span><br><span class="line">array&lt;<span class="type">int</span>, 5&gt; data &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;;</span><br><span class="line">array&lt;<span class="type">int</span>, 5&gt; data2 &#123; <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span> &#125;;</span><br><span class="line">array&lt;<span class="type">int</span>, 10&gt; output;</span><br><span class="line"><span class="built_in">merge</span>(data.<span class="built_in">begin</span>(), data.<span class="built_in">end</span>(), data2.<span class="built_in">begin</span>(), data2.<span class="built_in">end</span>(), output.<span class="built_in">begin</span>());</span><br><span class="line"><span class="built_in">copy</span>(output.<span class="built_in">begin</span>(), output.<span class="built_in">end</span>(), <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="std-reverse"><a href="#std-reverse" class="headerlink" title="std::reverse"></a><code>std::reverse</code></h2><p>反转范围内的元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> BidirIt&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(BidirIt first, BidirIt last)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">std::<span class="built_in">reverse</span>(arr, arr + <span class="number">5</span>);</span><br><span class="line">std::<span class="built_in">copy</span>(arr, arr + <span class="number">5</span>, std::<span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(std::cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line"><span class="comment">// 4 3 2 1 0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在析构函数中抛出异常</title>
      <link href="/codes/cplusplus-destructor-throw/"/>
      <url>/codes/cplusplus-destructor-throw/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    ~<span class="built_in">A</span>() &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;~A()&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">A</span>();</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;after ~A()&quot;</span>);</span><br><span class="line">    &#125; <span class="built_in">catch</span> (...) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;catch&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别用C++98和11标准进行编译及运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ examples/destructor-throw.cpp -std=c++98 &amp;&amp; ./a.out</span></span><br><span class="line">~A()</span><br><span class="line">catch</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ examples/destructor-throw.cpp -std=c++11 &amp;&amp; ./a.out</span></span><br><span class="line">examples/destructor-throw.cpp:6:9: warning: &#x27;~A&#x27; has a non-throwing exception specification but can still throw [-Wexceptions]</span><br><span class="line">        throw 0;</span><br><span class="line">        ^</span><br><span class="line">examples/destructor-throw.cpp:4:5: note: destructor has a implicit non-throwing exception specification</span><br><span class="line">    ~A() &#123;</span><br><span class="line">    ^</span><br><span class="line">1 warning generated.</span><br><span class="line">~A()</span><br><span class="line">libc++abi: terminating with uncaught exception of type int</span><br><span class="line">Abort trap: 6</span><br></pre></td></tr></table></figure><p>开启C++11标准后，编译器已经给出了警告。实际上，C++11起，析构函数默认是noexcept的，抛出异常将会terminate。</p><p>做一点修改，再次编译</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> #include &lt;cstdio&gt;</span><br><span class="line"></span><br><span class="line"> struct A &#123;</span><br><span class="line"><span class="deletion">-    ~A() &#123;</span></span><br><span class="line"><span class="addition">+    ~A() throw(int) &#123;</span></span><br><span class="line">         puts(&quot;~A()&quot;);</span><br><span class="line">         throw 0;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ examples/destructor-throw.cpp -std=c++11 &amp;&amp; ./a.out</span></span><br><span class="line">~A()</span><br><span class="line">catch</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ examples/destructor-throw.cpp -std=c++17 &amp;&amp; ./a.out</span></span><br><span class="line">examples/destructor-throw.cpp:4:10: fatal error: ISO C++17 does not allow dynamic exception specifications [-Wdynamic-exception-spec]</span><br><span class="line">    ~A() throw(int) &#123;</span><br><span class="line">         ^~~~~~~~~~</span><br><span class="line">examples/destructor-throw.cpp:4:10: note: use &#x27;noexcept(false)&#x27; instead</span><br><span class="line">    ~A() throw(int) &#123;</span><br><span class="line">         ^~~~~~~~~~</span><br><span class="line">         noexcept(false)</span><br><span class="line">1 error generated.</span><br></pre></td></tr></table></figure><p>给析构函数添加动态异常说明后，程序不会崩溃。要注意的是，动态异常说明在C++11中标记为弃用，C++17起已经移除了。</p><p>总结：不要把异常抛出析构函数。</p>]]></content>
      
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APT</title>
      <link href="/codes/debian-apt/"/>
      <url>/codes/debian-apt/</url>
      
        <content type="html"><![CDATA[<p><code>apt</code>是<code>deb</code>系Linux发行版（Debian, Ubuntu, Linux Mint, Deepin等）使用的命令行软件包管理器</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential python3-dev    # 安装软件，多个软件由空白符分隔</span><br><span class="line">sudo apt purge vsftpd           # 清除除软件包和软件的配置文件</span><br><span class="line">sudo apt remove nginx*          # 移除软件包</span><br><span class="line">sudo apt autoremove             # 卸载所有自动安装且不再使用的软件包</span><br><span class="line">sudo apt update                 # 更新可用软件包列表</span><br><span class="line">sudo apt upgrade                # 安装/升级软件来更新系统</span><br><span class="line">apt list nvidia-settings*       # 根据名称列出软件包</span><br><span class="line">apt show tree                   # 显示软件包细节</span><br><span class="line">apt search lua5.3               # 搜索软件包描述</span><br><span class="line">sudo apt edit-sources           # 编辑软件源信息文件</span><br><span class="line">sudo apt full-upgrade           # 安装已安装的软件包的候选版本，并且需要的话会移除其它的软件包</span><br><span class="line">sudo apt clean                  # 完全清除本地仓库的软件包检索文件</span><br><span class="line">sudo apt autoclean              # 清除本地仓库中过时软件包的软件包检索文件</span><br></pre></td></tr></table></figure><h2 id="软件包配置"><a href="#软件包配置" class="headerlink" title="软件包配置"></a>软件包配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep <span class="string">&quot;^deb&quot;</span> /etc/apt/sources.list</span></span><br><span class="line">deb http://mirrors.huaweicloud.com/debian/ buster main contrib non-free</span><br><span class="line">deb-src http://mirrors.huaweicloud.com/debian/ buster main contrib non-free #Added by software-properties</span><br><span class="line">deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/debian buster stable</span><br></pre></td></tr></table></figure><p>文件 <code>/etc/apt/sources.list</code> 是包管理器apt的配置信息，目录 <code>/etc/apt/sources.list.d</code> 则提供了将配置信息保存在不同文件的机制</p><p>比如文件<code>/etc/apt/sources.list.d/steam.list</code> 保存了steam的相关软件的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deb [arch=amd64,i386] https://repo.steampowered.com/steam/ stable steam</span><br><span class="line">deb-src [arch=amd64,i386] https://repo.steampowered.com/steam/ stable steam</span><br><span class="line"></span><br><span class="line"># Uncomment these lines to try the beta version of the Steam launcher</span><br><span class="line"># deb [arch=amd64,i386] https://repo.steampowered.com/steam/ beta steam</span><br><span class="line"># deb-src [arch=amd64,i386] https://repo.steampowered.com/steam/ beta steam</span><br></pre></td></tr></table></figure><h2 id="apt-get-apt-cache-aptitude"><a href="#apt-get-apt-cache-aptitude" class="headerlink" title="apt-get &#x2F; apt-cache &#x2F; aptitude"></a>apt-get &#x2F; apt-cache &#x2F; aptitude</h2><p><code>apt-get</code>和<code>apt-cache</code>是最基础的基于APT的软件包管理工具，<code>apt</code>命令是一个用于软件包管理的高级命令行界面，基本上是 <code>apt-get</code>、<code>apt-cache</code>和类似命令的一个封装，被设计为针对终端用户交互的界面，它默认启用了某些适合交互式使用的选项。建议用户使用<code>apt</code>命令用于交互式的使用场景，而在 <code>shell</code> 脚本中使用 <code>apt-get</code>和<code>apt-cache</code>命令。而<code>aptitude</code>命令是最通用的基于APT的软件包管理工具，并且提供了一个全屏的交互式文本用户界面。</p><p>命令对照如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apt update              aptitude update                 apt-get update</span><br><span class="line">apt install             aptitude install                apt-get install</span><br><span class="line">apt upgrade             aptitude safe-upgrade           apt-get upgrade</span><br><span class="line">apt full-upgrade        aptitude full-upgrade           apt-get dist-upgrade</span><br><span class="line">apt remove              aptitude remove                 apt-get remove</span><br><span class="line">apt autoremove          N/A                             apt-get autoremove</span><br><span class="line">apt purge               aptitude purge                  apt-get purge</span><br><span class="line">apt clean               aptitude clean                  apt-get clean</span><br><span class="line">apt autoclean           aptitude autoclean              apt-get autoclean</span><br><span class="line">apt show                aptitude show                   apt-cache show</span><br><span class="line">apt search              aptitude search                 apt-cache search</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++实现basename与dirname</title>
      <link href="/codes/cpp-basename-dirname/"/>
      <url>/codes/cpp-basename-dirname/</url>
      
        <content type="html"><![CDATA[<p>实现字符串函数，<code>basename, dirname</code>，基本功能与同名命令<code>man 1</code>相同</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> liph &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> std::string <span class="title">basename</span><span class="params">(std::string_view path)</span> </span>&#123;</span><br><span class="line">    std::string ret;</span><br><span class="line">    <span class="type">bool</span> start = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> ch : path) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch != <span class="string">&#x27;/&#x27;</span> &amp;&amp; start) &#123;</span><br><span class="line">            ret += ch;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">            start = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch != <span class="string">&#x27;/&#x27;</span> &amp;&amp; !start) &#123;</span><br><span class="line">            ret.<span class="built_in">clear</span>();</span><br><span class="line">            ret += ch;</span><br><span class="line">            start = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!path.<span class="built_in">empty</span>() &amp;&amp; path.<span class="built_in">back</span>() == <span class="string">&#x27;/&#x27;</span> &amp;&amp; ret.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> std::string <span class="title">dirname</span><span class="params">(std::string_view path)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> pos = path.<span class="built_in">find_last_not_of</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pos == std::string_view::npos) <span class="keyword">return</span> path.<span class="built_in">empty</span>() ? <span class="string">&quot;.&quot;</span> : <span class="string">&quot;/&quot;</span>;  <span class="comment">// empty or only contain &#x27;/&#x27;</span></span><br><span class="line">    path = path.<span class="built_in">substr</span>(<span class="number">0</span>, pos + <span class="number">1</span>);                                      <span class="comment">// remove the trailing &#x27;/&#x27;</span></span><br><span class="line">    pos = path.<span class="built_in">find_last_of</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pos == std::string_view::npos) <span class="keyword">return</span> <span class="string">&quot;.&quot;</span>;  <span class="comment">// not contain &#x27;/&#x27;</span></span><br><span class="line">    path = path.<span class="built_in">substr</span>(<span class="number">0</span>, pos);                     <span class="comment">// remove the trailing &quot;/xxxx&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (path.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="string">&quot;/&quot;</span>;                   <span class="comment">// &#x27;/&#x27; or &quot;////&quot; before substr</span></span><br><span class="line">    pos = path.<span class="built_in">find_last_not_of</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pos != std::string_view::npos) path = path.<span class="built_in">substr</span>(<span class="number">0</span>, pos + <span class="number">1</span>);  <span class="comment">// remove trailing duplicate &#x27;/&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">string</span>(path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// namespace liph</span></span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">TEST</span>(string, basename) &#123;</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">basename</span>(<span class="string">&quot;&quot;</span>), <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">basename</span>(<span class="string">&quot;abc&quot;</span>), <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">basename</span>(<span class="string">&quot;/&quot;</span>), <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">basename</span>(<span class="string">&quot;//////&quot;</span>), <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">basename</span>(<span class="string">&quot;/usr/bin/ls&quot;</span>), <span class="string">&quot;ls&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">basename</span>(<span class="string">&quot;/usr/bin/&quot;</span>), <span class="string">&quot;bin&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">basename</span>(<span class="string">&quot;/usr/bin///&quot;</span>), <span class="string">&quot;bin&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">basename</span>(<span class="string">&quot;/usr/////bin/&quot;</span>), <span class="string">&quot;bin&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">basename</span>(<span class="string">&quot;/tmp/&quot;</span>), <span class="string">&quot;tmp&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">basename</span>(<span class="string">&quot;tmp/&quot;</span>), <span class="string">&quot;tmp&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">basename</span>(<span class="string">&quot;tmp/abc///&quot;</span>), <span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">basename</span>(<span class="string">&quot;../..&quot;</span>), <span class="string">&quot;..&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">TEST</span>(string, dirname) &#123;</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">dirname</span>(<span class="string">&quot;&quot;</span>), <span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">dirname</span>(<span class="string">&quot;abc&quot;</span>), <span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">dirname</span>(<span class="string">&quot;/&quot;</span>), <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">dirname</span>(<span class="string">&quot;//////&quot;</span>), <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">dirname</span>(<span class="string">&quot;/usr/bin/ls&quot;</span>), <span class="string">&quot;/usr/bin&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">dirname</span>(<span class="string">&quot;/usr/bin/&quot;</span>), <span class="string">&quot;/usr&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">dirname</span>(<span class="string">&quot;/usr/bin///&quot;</span>), <span class="string">&quot;/usr&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">dirname</span>(<span class="string">&quot;/usr/////bin/&quot;</span>), <span class="string">&quot;/usr&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">dirname</span>(<span class="string">&quot;/tmp/&quot;</span>), <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">dirname</span>(<span class="string">&quot;tmp/&quot;</span>), <span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">dirname</span>(<span class="string">&quot;tmp/abc///&quot;</span>), <span class="string">&quot;tmp&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">dirname</span>(<span class="string">&quot;/tmp////abc/a&quot;</span>), <span class="string">&quot;/tmp////abc&quot;</span>);</span><br><span class="line">    <span class="built_in">EXPECT_EQ</span>(liph::<span class="built_in">dirname</span>(<span class="string">&quot;../..&quot;</span>), <span class="string">&quot;..&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数默认参数与继承</title>
      <link href="/codes/defaut-args-and-inheritance/"/>
      <url>/codes/defaut-args-and-inheritance/</url>
      
        <content type="html"><![CDATA[<p>以下代码的输出是？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x = <span class="number">100</span>)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;class A: &quot;</span> &lt;&lt; x &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">A</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x = <span class="number">200</span>)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;class B: &quot;</span> &lt;&lt; x &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A *obj = <span class="keyword">new</span> B;</span><br><span class="line">    obj-&gt;<span class="built_in">f</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是 <code>class B: 100</code></p><p>把代码贴进<code>https://cppinsights.io/</code>跑一下就很明确了，<code>obj-&gt;f()</code>等价于<code>obj-&gt;f(100)</code></p><p>默认参数是编译期的行为，虚函数的多态发生在运行时，因此使用虚函数时要注意一下默认参数。</p>]]></content>
      
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++11为什么弃用std::auto_ptr</title>
      <link href="/codes/deprecated-auto-ptr/"/>
      <url>/codes/deprecated-auto-ptr/</url>
      
        <content type="html"><![CDATA[<p>先看一下<code>auto_ptr</code>的拷贝构造函数(C++11前还没有移动语义)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">auto_ptr</span>(auto_ptr&amp;);</span><br><span class="line">auto_ptr&amp; <span class="keyword">operator</span>=(auto_ptr&amp;);</span><br></pre></td></tr></table></figure><p>与一般的拷贝构造函数不同的是，<code>std::auto_ptr</code>为了获取对象的所有权，会修改参数(release())</p><p>一个简单的问题如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">pa</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">100</span>))</span></span>;</span><br><span class="line"><span class="function">std::auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">pb</span><span class="params">(pa)</span></span>;</span><br><span class="line">std::cout &lt;&lt; *pa &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>由于对象的所有权由<code>pb</code>所有，<code>pa.release</code>后，<code>*pa</code>实际上是对<code>nullptr</code>解引用，直接Segmentation fault了。</p><p>当然，尽管这是个低级错误，但是像下面的使用也会有同样的问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(std::auto_ptr&lt;<span class="type">int</span>&gt; ptr)</span></span>;</span><br><span class="line">std::vector&lt;std::auto_ptr&lt;<span class="type">int</span>&gt; &gt; vc; <span class="comment">// C++03这里需要一个空格</span></span><br></pre></td></tr></table></figure><p>那么，为什么<code>std::auto_ptr</code>不仅仅弃用拷贝构造与赋值运算符呢？</p><p>首先，<code>boost::scoped_ptr</code>就是这么做的，<code>boost::scoped_ptr&lt;T&gt;</code> 基本上等价于<code>const std::auto_ptr&lt;T&gt;</code><br>（当然，<code>const std::auto_ptr&lt;T&gt;</code>不能执行<code>reset</code>），之所以叫<code>scoped_ptr</code>是因为这个类强调它的作用只是<strong>RAII</strong></p><p>其次，<code>auto_ptr</code>最初的目的是帮助程序员管理对象的所有权，它期望用户完全明白它的行为与内部实现（这也是C++被人诟病的地方）。</p><p>最后，C++11起，有了移动语义，有了<code>std::unique_ptr</code>，自然也就不需要<code>std::auto_ptr</code>了。<br><code>std::auto_ptr</code>在C++11中被标记为弃用，在C++17中已经正式移除了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/codes/docker/"/>
      <url>/codes/docker/</url>
      
        <content type="html"><![CDATA[<h2 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span><br><span class="line">docker pull ubuntu:18.04</span><br></pre></td></tr></table></figure><h2 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run [选项] 镜像 [指令] [参数...]</span><br><span class="line">docker run -it --rm ubuntu:18.04 bash</span><br><span class="line"></span><br><span class="line">选项</span><br><span class="line">`-i` 交互模式，让容器的标准输入保持打开</span><br><span class="line">`-t` 让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上</span><br><span class="line">`-d` 容器在后台运行，打印容器id</span><br><span class="line">`--rm` 容器退出后随之将其删除</span><br></pre></td></tr></table></figure><h2 id="docker-exec"><a href="#docker-exec" class="headerlink" title="docker exec"></a>docker exec</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec [选项] 容器 [指令] [参数...]</span><br></pre></td></tr></table></figure><h2 id="docker-image"><a href="#docker-image" class="headerlink" title="docker image"></a>docker image</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker image ls</span><br><span class="line">docker image prune</span><br><span class="line">docker image rm</span><br></pre></td></tr></table></figure><h2 id="docker-system"><a href="#docker-system" class="headerlink" title="docker system"></a>docker system</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system df # 查看镜像、容器、数据卷所占用的空间</span><br></pre></td></tr></table></figure><h2 id="docker-info"><a href="#docker-info" class="headerlink" title="docker info"></a>docker info</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><h2 id="docker-container"><a href="#docker-container" class="headerlink" title="docker container"></a>docker container</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker container ls</span><br><span class="line">docker container stop container # 终止容器</span><br><span class="line">docker container start container # 重新启动处于终止状态的容器</span><br><span class="line">docker container restart container # 将一个运行态的容器终止，然后再重新启动它</span><br><span class="line">docker container rm container</span><br></pre></td></tr></table></figure><h2 id="docker-ps"><a href="#docker-ps" class="headerlink" title="docker ps"></a>docker ps</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h2 id="docker-login-url-docker-logout-url"><a href="#docker-login-url-docker-logout-url" class="headerlink" title="docker login url&#x2F;docker logout url"></a>docker login url&#x2F;docker logout url</h2><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p><a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节序</title>
      <link href="/codes/endianness/"/>
      <url>/codes/endianness/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bit&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 0x00 0x01 0x02 0x03</span></span><br><span class="line"><span class="comment">// 0    0    0    1         big endians</span></span><br><span class="line"><span class="comment">// 1    0    0    0         little endians</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">little_endians</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="type">char</span> b;</span><br><span class="line">    &#125; u&#123;.a = <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> u.b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">little_endians2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">char</span> *)&amp;i == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">little_endians3</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> std::endian::native == std::endian::little; &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>using gflags and glog</title>
      <link href="/codes/gflags-glog/"/>
      <url>/codes/gflags-glog/</url>
      
        <content type="html"><![CDATA[<h2 id="gflags"><a href="#gflags" class="headerlink" title="gflags"></a>gflags</h2><ul><li><a href="http://gflags.github.io/gflags/">http://gflags.github.io/gflags/</a></li><li><a href="https://github.com/gflags/gflags.git">https://github.com/gflags/gflags.git</a></li></ul><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><ul><li>bool -&gt; bool</li><li>int32&#x2F;uint32&#x2F;int64&#x2F;uint64 -&gt; <code>int*_t</code></li><li>double -&gt; double</li><li>string -&gt; std::string</li></ul><h3 id="declare"><a href="#declare" class="headerlink" title="declare"></a>declare</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gflags/gflags_declare.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GFLAGS_NAMESPACE google</span></span><br><span class="line"><span class="keyword">namespace</span> fLS &#123;</span><br><span class="line"><span class="keyword">typedef</span> std::string clstring;</span><br><span class="line">&#125;  <span class="comment">// namespace fLS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DECLARE_VARIABLE(type, shorttype, name)                  \</span></span><br><span class="line"><span class="meta">    namespace fL##shorttype &#123;                                    \</span></span><br><span class="line"><span class="meta">        extern GFLAGS_DLL_DECLARE_FLAG type FLAGS_##name;        \</span></span><br><span class="line"><span class="meta">    &#125;                                                            \</span></span><br><span class="line"><span class="meta">    using fL##shorttype::FLAGS_##name</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DECLARE_bool(name)   DECLARE_VARIABLE(bool, B, name)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DECLARE_int32(name)  DECLARE_VARIABLE(::GFLAGS_NAMESPACE::int32, I, name)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DECLARE_uint32(name) DECLARE_VARIABLE(::GFLAGS_NAMESPACE::uint32, U, name)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DECLARE_int64(name)  DECLARE_VARIABLE(::GFLAGS_NAMESPACE::int64, I64, name)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DECLARE_uint64(name) DECLARE_VARIABLE(::GFLAGS_NAMESPACE::uint64, U64, name)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DECLARE_double(name) DECLARE_VARIABLE(double, D, name)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DECLARE_string(name)                                      \</span></span><br><span class="line"><span class="meta">    namespace fLS &#123;                                               \</span></span><br><span class="line"><span class="meta">    using ::fLS::clstring;                                        \</span></span><br><span class="line"><span class="meta">    extern GFLAGS_DLL_DECLARE_FLAG ::fLS::clstring&amp; FLAGS_##name; \</span></span><br><span class="line"><span class="meta">    &#125;                                                             \</span></span><br><span class="line"><span class="meta">    using fLS::FLAGS_##name</span></span><br></pre></td></tr></table></figure><h3 id="define"><a href="#define" class="headerlink" title="define"></a>define</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gflags/gflags.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GFLAGS_DLL_DECL</span> FlagRegisterer &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> FlagType&gt;</span><br><span class="line">    <span class="built_in">FlagRegisterer</span>(<span class="type">const</span> <span class="type">char</span> *name, <span class="type">const</span> <span class="type">char</span> *help, <span class="type">const</span> <span class="type">char</span> *filename, FlagType *current_storage,</span><br><span class="line">            FlagType *defvalue_storage) &#123;</span><br><span class="line">        FlagValue *<span class="type">const</span> current = <span class="keyword">new</span> <span class="built_in">FlagValue</span>(current_storage, <span class="literal">false</span>);</span><br><span class="line">        FlagValue *<span class="type">const</span> defvalue = <span class="keyword">new</span> <span class="built_in">FlagValue</span>(defvalue_storage, <span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">RegisterCommandLineFlag</span>(name, help, filename, current, defvalue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFINE_VARIABLE(type, shorttype, name, value, help)                                  \</span></span><br><span class="line"><span class="meta">    namespace fL##shorttype &#123;                                                                \</span></span><br><span class="line"><span class="meta">        static const type FLAGS_nono##name = value;                                          \</span></span><br><span class="line"><span class="meta">        GFLAGS_DLL_DEFINE_FLAG type FLAGS_##name = FLAGS_nono##name;                         \</span></span><br><span class="line"><span class="meta">        type FLAGS_no##name = FLAGS_nono##name;                                              \</span></span><br><span class="line"><span class="meta">        static GFLAGS_NAMESPACE::FlagRegisterer o_##name(                                    \</span></span><br><span class="line"><span class="meta">                #name, MAYBE_STRIPPED_HELP(help), __FILE__, &amp;FLAGS_##name, &amp;FLAGS_no##name); \</span></span><br><span class="line"><span class="meta">    &#125;                                                                                        \</span></span><br><span class="line"><span class="meta">    using fL##shorttype::FLAGS_##name</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFINE_bool(name, val, txt)                                                                         \</span></span><br><span class="line"><span class="meta">    namespace fLB &#123;                                                                                         \</span></span><br><span class="line"><span class="meta">    typedef ::fLB::CompileAssert                                                                            \</span></span><br><span class="line"><span class="meta">            FLAG_##name##_value_is_not_a_bool[(sizeof(::fLB::IsBoolFlag(val)) != sizeof(double)) ? 1 : -1]; \</span></span><br><span class="line"><span class="meta">    &#125;                                                                                                       \</span></span><br><span class="line"><span class="meta">    DEFINE_VARIABLE(bool, B, name, val, txt)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFINE_int32(name, val, txt)  DEFINE_VARIABLE(GFLAGS_NAMESPACE::int32, I, name, val, txt)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFINE_uint32(name, val, txt) DEFINE_VARIABLE(GFLAGS_NAMESPACE::uint32, U, name, val, txt)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFINE_int64(name, val, txt)  DEFINE_VARIABLE(GFLAGS_NAMESPACE::int64, I64, name, val, txt)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFINE_uint64(name, val, txt) DEFINE_VARIABLE(GFLAGS_NAMESPACE::uint64, U64, name, val, txt)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFINE_double(name, val, txt) DEFINE_VARIABLE(double, D, name, val, txt)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFINE_string(name, val, txt)                                                                                  \</span></span><br><span class="line"><span class="meta">    namespace fLS &#123;                                                                                                    \</span></span><br><span class="line"><span class="meta">    using ::fLS::clstring;                                                                                             \</span></span><br><span class="line"><span class="meta">    using ::fLS::StringFlagDestructor;                                                                                 \</span></span><br><span class="line"><span class="meta">    static union &#123;                                                                                                     \</span></span><br><span class="line"><span class="meta">        void *align;                                                                                                   \</span></span><br><span class="line"><span class="meta">        char s[sizeof(clstring)];                                                                                      \</span></span><br><span class="line"><span class="meta">    &#125; s_##name[2];                                                                                                     \</span></span><br><span class="line"><span class="meta">    clstring *const FLAGS_no##name = ::fLS::dont_pass0toDEFINE_string(s_##name[0].s, val);                             \</span></span><br><span class="line"><span class="meta">    static GFLAGS_NAMESPACE::FlagRegisterer o_##name(                                                                  \</span></span><br><span class="line"><span class="meta">            #name, MAYBE_STRIPPED_HELP(txt), __FILE__, FLAGS_no##name, new (s_##name[1].s) clstring(*FLAGS_no##name)); \</span></span><br><span class="line"><span class="meta">    static StringFlagDestructor d_##name(s_##name[0].s, s_##name[1].s);                                                \</span></span><br><span class="line"><span class="meta">    extern GFLAGS_DLL_DEFINE_FLAG clstring&amp; FLAGS_##name;                                                              \</span></span><br><span class="line"><span class="meta">    using fLS::FLAGS_##name;                                                                                           \</span></span><br><span class="line"><span class="meta">    clstring&amp; FLAGS_##name = *FLAGS_no##name;                                                                          \</span></span><br><span class="line"><span class="meta">    &#125;                                                                                                                  \</span></span><br><span class="line"><span class="meta">    using fLS::FLAGS_##name</span></span><br></pre></td></tr></table></figure><p>for example</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">DEFINE_int32</span>(number, <span class="number">0</span>, <span class="string">&quot;default is 0&quot;</span>);</span><br><span class="line"><span class="comment">/////</span></span><br><span class="line"><span class="built_in">DEFINE_VARIABLE</span>(GFLAGS_NAMESPACE::int32, I, number, <span class="number">0</span>, <span class="string">&quot;default is 0&quot;</span>);</span><br><span class="line"><span class="comment">/////</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> fLI &#123;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int32_t</span> FLAGS_nononumber = <span class="number">0</span>;</span><br><span class="line"><span class="type">int32_t</span> FLAGS_number = FLAGS_nononumber;</span><br><span class="line"><span class="type">static</span> <span class="type">int32_t</span> FLAGS_nonumber = FLAGS_nononumber;</span><br><span class="line"><span class="function"><span class="type">static</span> google::FlagRegisterer <span class="title">o_number</span><span class="params">(<span class="string">&quot;number&quot;</span>, <span class="string">&quot;default is 0&quot;</span>, __FILE__, &amp;FLAGS_number, &amp;FLAGS_nonumber)</span></span>;</span><br><span class="line">&#125;  <span class="comment">// namespace fLI</span></span><br><span class="line"><span class="keyword">using</span> fLI::FLAGS_number;</span><br></pre></td></tr></table></figure><h3 id="RegisterFlagValidator"><a href="#RegisterFlagValidator" class="headerlink" title="RegisterFlagValidator"></a>RegisterFlagValidator</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;gflags/gflags.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">DEFINE_string</span>(<span class="keyword">module</span>, <span class="string">&quot;aa&quot;</span>, <span class="string">&quot;one of aa|ab|bc&quot;</span>);</span><br><span class="line"><span class="built_in">DEFINE_validator</span>(<span class="keyword">module</span>, [](<span class="type">const</span> <span class="type">char</span> *, <span class="type">const</span> std::string&amp; value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="string">&quot;aa&quot;</span> &amp;&amp; value != <span class="string">&quot;ab&quot;</span> &amp;&amp; value != <span class="string">&quot;bc&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    google::<span class="built_in">ParseCommandLineFlags</span>(&amp;argc, &amp;argv, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./a.out --module=bb</span><br><span class="line">ERROR: failed validation of new value &#x27;bb&#x27; for flag &#x27;module&#x27;</span><br></pre></td></tr></table></figure><h3 id="ParseCommandLineFlags"><a href="#ParseCommandLineFlags" class="headerlink" title="ParseCommandLineFlags"></a>ParseCommandLineFlags</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">ParseCommandLineFlags</span><span class="params">(<span class="type">int</span>* argc, <span class="type">char</span>*** argv, <span class="type">bool</span> remove_flags)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">DEFINE_string</span>(<span class="keyword">module</span>, <span class="string">&quot;aa&quot;</span>, <span class="string">&quot;one of aa|ab|bc&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">print_args</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;argc: &quot;</span> &lt;&lt; argc &lt;&lt; <span class="string">&quot;, argv:&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; argv[i];</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">print_args</span>(argc, argv);</span><br><span class="line">    google::<span class="built_in">ParseCommandLineFlags</span>(&amp;argc, &amp;argv, <span class="literal">true</span>);</span><br><span class="line">    <span class="built_in">print_args</span>(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">remove_flags is <span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./a.out 1 2 --module=ab 3 4</span></span><br><span class="line">argc: 6, argv: 1 2 --module=ab 3 4</span><br><span class="line">argc: 5, argv: 1 2 3 4</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">remove_flags is <span class="literal">false</span>, flags will be the beginning <span class="keyword">in</span> argv</span></span><br><span class="line">./a.out 1 2 --module=ab 3 4</span><br><span class="line">argc: 6, argv: 1 2 --module=ab 3 4</span><br><span class="line">argc: 6, argv: --module=ab 1 2 3 4</span><br></pre></td></tr></table></figure><h2 id="glog"><a href="#glog" class="headerlink" title="glog"></a>glog</h2><p><a href="https://github.com/google/glog">https://github.com/google/glog</a></p><h3 id="bazel-build"><a href="#bazel-build" class="headerlink" title="bazel build"></a>bazel build</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">load(&quot;@bazel_tools//tools/build_defs/repo:http.bzl&quot;, &quot;http_archive&quot;)</span><br><span class="line"></span><br><span class="line">http_archive(</span><br><span class="line">    name = &quot;com_github_gflags_gflags&quot;,</span><br><span class="line">    sha256 = &quot;34af2f15cf7367513b352bdcd2493ab14ce43692d2dcd9dfc499492966c64dcf&quot;,</span><br><span class="line">    strip_prefix = &quot;gflags-2.2.2&quot;,</span><br><span class="line">    urls = [&quot;https://github.com/gflags/gflags/archive/v2.2.2.tar.gz&quot;],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">http_archive(</span><br><span class="line">    name = &quot;com_github_google_glog&quot;,</span><br><span class="line">    sha256 = &quot;122fb6b712808ef43fbf80f75c52a21c9760683dae470154f02bddfc61135022&quot;,</span><br><span class="line">    strip_prefix = &quot;glog-0.6.0&quot;,</span><br><span class="line">    urls = [&quot;https://github.com/google/glog/archive/v0.6.0.zip&quot;],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cc_binary(</span><br><span class="line">    name = &quot;main&quot;,</span><br><span class="line">    srcs = [&quot;main.cpp&quot;],</span><br><span class="line">    deps = [&quot;@com_github_google_glog//:glog&quot;],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="quick-start"><a href="#quick-start" class="headerlink" title="quick start"></a>quick start</h3><p>Severity Levels: INFO, WARNING, ERROR, and FATAL</p><p>Logging a FATAL message terminates the program (after the message is logged)</p><p>Messages of a given severity are logged not only in the logfile for that severity, but also in all logfiles of lower severity.</p><p>默认日志文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/tmp/\&lt;program name\&gt;.\&lt;hostname\&gt;.\&lt;user name\&gt;.log.\&lt;severity level\&gt;.\&lt;date\&gt;-\&lt;time\&gt;.\&lt;pid\&gt;</span><br></pre></td></tr></table></figure><p>glog copies the log messages of severity level ERROR or FATAL to standard error (stderr) in addition to log files.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;glog/logging.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span>, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    google::<span class="built_in">InitGoogleLogging</span>(argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">LOG</span>(INFO) &lt;&lt; <span class="string">&quot;info log&quot;</span>;</span><br><span class="line">    <span class="built_in">LOG</span>(WARNING) &lt;&lt; <span class="string">&quot;warning log&quot;</span>;</span><br><span class="line">    <span class="built_in">LOG</span>(ERROR) &lt;&lt; <span class="string">&quot;error log&quot;</span>;</span><br><span class="line">    <span class="built_in">LOG</span>(FATAL) &lt;&lt; <span class="string">&quot;fatal log&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./a.out</span></span><br><span class="line">E20230131 16:13:24.209595 1260326 glog.cpp:7] error log</span><br><span class="line">F20230131 16:13:24.209903 1260326 glog.cpp:8] fatal log</span><br><span class="line">*** Check failure stack trace: ***</span><br><span class="line">    @        0x1035aee0d  google::LogMessage::Fail()</span><br><span class="line">    @        0x1035ad56f  google::LogMessage::SendToLog()</span><br><span class="line">    @        0x1035ae3da  google::LogMessage::Flush()</span><br><span class="line">    @        0x1035b3519  google::LogMessageFatal::~LogMessageFatal()</span><br><span class="line">    @        0x1035af475  google::LogMessageFatal::~LogMessageFatal()</span><br><span class="line">    @        0x1034d2255  main</span><br><span class="line">    @     0x7ff81683d310  start</span><br><span class="line">Abort trap: 6</span><br></pre></td></tr></table></figure><h3 id="flags"><a href="#flags" class="headerlink" title="flags"></a>flags</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./a.out --log_dir=log    # if gflags is installed</span><br><span class="line">GLOG_log_dir=log ./a.out # else</span><br></pre></td></tr></table></figure><ul><li><code>log_dir</code> (string, default&#x3D;””)</li><li><code>minloglevel</code> (int, default&#x3D;0, which is INFO)</li><li><code>max_log_size</code> (uint32, 1800)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/codes/hexo/"/>
      <url>/codes/hexo/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></li><li><a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></li></ul><p><code>npm install -g hexo-cli</code></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><code>hexo &lt;command&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Commands:</span><br><span class="line">* clean     - Remove generated files and cache.</span><br><span class="line">* config    - Get or set configurations.</span><br><span class="line">* deploy    - Deploy your website.</span><br><span class="line">* generate  - Generate static files.</span><br><span class="line">* help      - Get help on a command.</span><br><span class="line">* init      - Create a new Hexo folder.</span><br><span class="line">* list      - List the information of the site</span><br><span class="line">* migrate   - Migrate your site from other system to Hexo.</span><br><span class="line">* new       - Create a new post.</span><br><span class="line">* publish   - Moves a draft post from _drafts to _posts folder.</span><br><span class="line">* render    - Render files with renderer plugins.</span><br><span class="line">* server    - Start the server.</span><br><span class="line">* version   - Display version information.</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><code>_config.yml</code> 设置网站的信息、主题等</p><h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><p>除 <code>_posts</code> 目录外（<code>init</code> 时会创建 <code>_posts/hello-world.md</code>)，以 <code>_</code> 开头的文件和隐藏文件会被忽略。<code>Markdown</code> 和 <code>HTML</code> 文件会被解析并放到 public 文件夹，其他文件直接被拷贝过去。</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p><code>themes</code> 目录存放主题，启用主题需要在 <code>_config.yml</code> 中设置，如 <code>theme: next</code></p><p><code>next</code> 主题下载 <a href="https://github.com/theme-next/hexo-theme-next/">https://github.com/theme-next/hexo-theme-next/</a></p><p><code>next</code> 的配置文件 <code>themes/next/_config.yml</code></p><h2 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h2><p><code>npm install hexo-generator-search --save</code></p><p>修改 <code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p><code>field</code> 字段可以为 <code>post/page/all</code>， <code>hexo g</code> 命令后该插件会将搜索内容放到 <code>search.xml</code></p><p>修改 <code>themes/next/_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>修改完后我发现搜索的结果一直为空，调试了下源代码，发现如下问题</p><p>文件 <code>themes/next/source/js/local-search.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Only match articles with not empty titles</span></span><br><span class="line">datas = datas.<span class="title function_">filter</span>(<span class="function"><span class="params">data</span> =&gt;</span> data.<span class="property">title</span>).<span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    data.<span class="property">title</span> = data.<span class="property">title</span>.<span class="title function_">trim</span>();</span><br><span class="line">    data.<span class="property">content</span> = data.<span class="property">content</span> ? data.<span class="property">content</span>.<span class="title function_">trim</span>().<span class="title function_">replace</span>(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>, <span class="string">&#x27;&#x27;</span>) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    data.<span class="property">url</span> = <span class="built_in">decodeURIComponent</span>(data.<span class="property">url</span>).<span class="title function_">replace</span>(<span class="regexp">/\/&#123;2,&#125;/g</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里只会匹配带<code>title</code> 的文件，去掉 <code>filter(data =&gt; data.title)</code> 即可</p><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>文档使用 <code>git</code> 来同步，启用 <code>hexo</code> 的服务器(<code>hexo s -p 80 &amp;</code>)每10分钟(<code>crontab</code>)执行如下脚本进行更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd $hexo_dir/source &amp;&amp;</span><br><span class="line">git pull origin master &amp;&amp;</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><h2 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h2><p>修改 <code>themes/next/layout/_layout.swig</code>, 添加前端代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:120px; width:80%; resize:none&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> b = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;submit&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        b.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> comment = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;text&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (comment == <span class="string">&quot;&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;none&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> httpRequest = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">                httpRequest.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;/api/comment&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                httpRequest.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                httpRequest.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="string">&quot;msg&quot;</span>: comment, <span class="string">&quot;time&quot;</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>(),<span class="string">&quot;url&quot;</span>: <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> &#125;));</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;success&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;/comment.html&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后端代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">comment_path = <span class="string">&#x27;source/comment.md&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deal_msg</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">    str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    str = str + <span class="string">&#x27;`&#x27;</span> + msg[<span class="string">&#x27;time&#x27;</span>] + <span class="string">&#x27;` &#x27;</span> + <span class="string">&#x27;[link](&#x27;</span> + msg[<span class="string">&#x27;url&#x27;</span>] + <span class="string">&#x27;)\n&#x27;</span></span><br><span class="line">    str = str + msg[<span class="string">&#x27;msg&#x27;</span>] + <span class="string">&#x27;\n\n&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">comment</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">url</span> != <span class="string">&#x27;/api/comment&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> buff = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        buff += data.<span class="title function_">toString</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> json;</span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        json = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(buff);</span><br><span class="line">        <span class="keyword">if</span> (msg.<span class="property">length</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            fs.<span class="title function_">writeFile</span>(comment_path, <span class="title function_">deal_msg</span>(json), &#123; <span class="attr">flag</span>: <span class="string">&quot;a&quot;</span>&#125;, <span class="keyword">function</span>(<span class="params">err</span>) &#123;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, comment);</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure><p>设置<code>hexo</code> 监听<code>8000</code> 端口(<code>hexo s -p 8000 &amp;</code>)，并使用 <code>nginx</code> 反向代理</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:8000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> /api/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串算法：kmp与manacher</title>
      <link href="/codes/kmp-manacher/"/>
      <url>/codes/kmp-manacher/</url>
      
        <content type="html"><![CDATA[<h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * pattern.length() &gt; 0</span></span><br><span class="line"><span class="comment"> * pattern.length() == next.size()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_next</span><span class="params">(<span class="type">const</span> string&amp; pattern, vector&lt;<span class="type">int</span>&gt;&amp; next)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = pattern.<span class="built_in">length</span>();</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; pattern[i] != pattern[j]) j = next[j];</span><br><span class="line">        i++;</span><br><span class="line">        j++;</span><br><span class="line">        <span class="keyword">if</span> (pattern[i] == pattern[j])</span><br><span class="line">            next[i] = next[j];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            next[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 在 str 中查找 pattern</span></span><br><span class="line"><span class="comment"> * 辅助数组 next 表示失配后与模式串的哪一位比较才可能导致匹配</span></span><br><span class="line"><span class="comment"> * pattern.length() == next.size()</span></span><br><span class="line"><span class="comment"> * 返回 pattern 在 str 中出现的位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">kmp</span><span class="params">(<span class="type">const</span> string&amp; str, <span class="type">const</span> string&amp; pattern, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; next)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">    <span class="type">int</span> n = str.<span class="built_in">length</span>();</span><br><span class="line">    <span class="type">int</span> m = pattern.<span class="built_in">length</span>();</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; str[i] != pattern[j]) j = next[j];</span><br><span class="line">        i++;</span><br><span class="line">        j++;</span><br><span class="line">        <span class="keyword">if</span> (j == m) &#123;</span><br><span class="line">            ans.<span class="built_in">emplace_back</span>(i - m);</span><br><span class="line">            j = next[m];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str = <span class="string">&quot;aabcd&quot;</span>;</span><br><span class="line">    string pattern = <span class="string">&quot;abab&quot;</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">next</span><span class="params">(pattern.length())</span></span>;</span><br><span class="line">    <span class="built_in">get_next</span>(pattern, next);</span><br><span class="line">    <span class="built_in">copy</span>(next.<span class="built_in">begin</span>(), next.<span class="built_in">end</span>(), <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> ans = <span class="built_in">kmp</span>(str, pattern, next);</span><br><span class="line">    <span class="built_in">copy</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>(), <span class="built_in">ostream_iterator</span>&lt;<span class="type">int</span>&gt;(cout, <span class="string">&quot; &quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="manacher"><a href="#manacher" class="headerlink" title="manacher"></a>manacher</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">manacher</span><span class="params">(<span class="type">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line">    string ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 预处理，假设原字符串中无&#x27;#&#x27; &#x27;$&#x27;</span></span><br><span class="line">    <span class="built_in">assert</span>(s.<span class="built_in">find</span>(<span class="string">&#x27;#&#x27;</span>) == string::npos);</span><br><span class="line">    <span class="built_in">assert</span>(s.<span class="built_in">find</span>(<span class="string">&#x27;$&#x27;</span>) == string::npos);</span><br><span class="line">    string str = <span class="string">&quot;$#&quot;</span>;  <span class="comment">// 优化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); ++i) str = str + s[i] + <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算回文半径数组p</span></span><br><span class="line">    <span class="comment">// 以s[i]为中心（无论奇偶）的回文子串在原串中的长度为p[i] - 1</span></span><br><span class="line">    <span class="comment">// 算法的核心为计算p数组</span></span><br><span class="line">    <span class="type">int</span> n = str.<span class="built_in">length</span>();</span><br><span class="line">    <span class="type">int</span> p[n];</span><br><span class="line">    <span class="comment">// 引入辅助变量 MaxRight 表示当前已确定的回文子串能触及的最右端字符位置</span></span><br><span class="line">    <span class="comment">// pos 为其对称中心的位置</span></span><br><span class="line">    <span class="type">int</span> MaxRight = <span class="number">0</span>, pos = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> m = <span class="number">-1</span>, mi = <span class="number">0</span>;  <span class="comment">// 记录最长子串的长度和位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (MaxRight &gt; i)</span><br><span class="line">            p[i] = <span class="built_in">min</span>(p[<span class="number">2</span> * pos - i], MaxRight - i + <span class="number">1</span>);  <span class="comment">//核心算法</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (str[i + p[i]] == str[i - p[i]]) p[i]++;  <span class="comment">// 开头加了&#x27;$&#x27;字符，不用考虑边界</span></span><br><span class="line">        <span class="keyword">if</span> (p[i] + i - <span class="number">1</span> &gt; MaxRight) &#123;</span><br><span class="line">            MaxRight = p[i] + i - <span class="number">1</span>;</span><br><span class="line">            pos = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p[i] &gt; (m + <span class="number">1</span>)) &#123;</span><br><span class="line">            m = p[i] - <span class="number">1</span>;</span><br><span class="line">            mi = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 无论m奇偶都适用</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = mi - (m - <span class="number">1</span>); i &lt;= mi + (m - <span class="number">1</span>); i += <span class="number">2</span>) ret += str[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">manacher</span>(<span class="string">&quot;babad&quot;</span>) &lt;&lt; endl;  <span class="comment">//=&gt;bab</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">manacher</span>(<span class="string">&quot;cbbd&quot;</span>) &lt;&lt; endl;   <span class="comment">//=&gt;bb</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lex/yacc 速览</title>
      <link href="/codes/lex-and-yacc/"/>
      <url>/codes/lex-and-yacc/</url>
      
        <content type="html"><![CDATA[<h2 id="词法分析工具-lex"><a href="#词法分析工具-lex" class="headerlink" title="词法分析工具 lex"></a>词法分析工具 lex</h2><p><code>lex [OPTIONS] [FILE]...</code> 生成词法分析器的程序</p><p><code>flex</code>: <a href="https://github.com/westes/flex">fast lex</a></p><p>Linux 下 lex 一般是 flex 的链接</p><p>lex 源文件格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Definitions</span><br><span class="line">%%</span><br><span class="line">Rules</span><br><span class="line">%%</span><br><span class="line">User Subroutines</span><br></pre></td></tr></table></figure><p>可细分为如下结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">part 1</span><br><span class="line">%&#125;</span><br><span class="line">part 2</span><br><span class="line">%%</span><br><span class="line">part 3</span><br><span class="line">%%</span><br><span class="line">part 4</span><br></pre></td></tr></table></figure><p>第一个 <code>%%</code> 是必要的，用以标记规则的开头；第二个 <code>%%</code> 只有定义用户子程序才需要</p><p><code>part1</code> 通常包括一些C语句，将被复制到生成代码的开头，<code>part4</code> 则被复制到结尾</p><p><code>part2</code> 包含命名正则表达式的定义，如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">letter      [a-zA-Z]</span><br><span class="line">digit       [0-9]</span><br><span class="line">identifier  &#123;letter&#125;(&#123;letter&#125;|&#123;digit&#125;)*</span><br></pre></td></tr></table></figure><p>可以在<code>&#123;&#125;</code> 中使用这些正则表达式定义</p><p><code>part3</code> 定义<code>yylex()</code> 的规则，写法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R     Action</span><br></pre></td></tr></table></figure><ul><li><code>R</code> 是正则表达式， <code>Action</code> 是C代码， 在<code>Action</code> 中 <code>return n</code> 使 <code>yylex()</code> 返回 n 代表的记号(<code>token</code>)</li><li><code>Action</code> 中的多条语句需要以 <code>&#123;&#125;</code> 包裹</li><li>如果多个正则表达式匹配同一字符串，会执行第一个正则表达式定义的 <code>Action</code></li><li>最长匹配原则</li></ul><h3 id="flex-正则表达式"><a href="#flex-正则表达式" class="headerlink" title="flex 正则表达式"></a>flex 正则表达式</h3><ul><li><code>[abcd]</code> 等价于 <code>(a|b|c|d)</code></li><li><code>[0-9]</code> 中括号中的的破折号表示一个字符范围</li><li><code>[^abcd]</code> 除abcd 外的任意字符</li><li><code>.</code>  除了<code>\n</code>， 等价于 <code>[^\n]</code></li><li><code>A*</code> 0或多个A</li><li><code>A+</code> 1或多个A， 等价于<code>AA*</code></li><li><code>A?</code> 0或1个A</li><li><code>A/B</code> A，但仅限跟随B 的情况</li><li><code>&quot;string&quot;</code> 引号中原本的字符串string</li></ul><h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><p><code>lex 源文件 test.l</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%%</span><br><span class="line">.|\n ECHO;</span><br></pre></td></tr></table></figure><p>执行命令 <code>lex test.l</code> 会生成 <code>lex.yy.c</code> (-o 指定生成的文件名， -t 在标准输出打印，选项需在文件名前指定)</p><p><code>main.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">yylex</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">yywrap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    yylex();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译 <code>gcc main.c lex.yy.c</code>, 生成的程序可以将标准输入复制到标准输出</p><p>也可以把这两个函数加到 <code>lex</code> 源文件的用户子程序定义区域，直接编译 <code>lex.yy.c</code></p><h3 id="lex-宏，变量与函数"><a href="#lex-宏，变量与函数" class="headerlink" title="lex 宏，变量与函数"></a><code>lex</code> 宏，变量与函数</h3><ul><li><code>yyin</code>, <code>FILE *</code> 类型，在调用<code>yylex()</code> 之前保存用来读取的文件流，默认是标准输入</li><li><code>yyout</code>, <code>FILE *</code> 类型，输出文件流，默认是标准输出</li><li><code>int yylex()</code>, 从<code>yyin</code> 读入并扫描符号</li><li><code>int yywrap()</code>, <code>yylex()</code> 结束后会调用<code>yywrap</code>, <code>yywrap</code>返回1(非0)意味着文件结束；返回0则扫描继续。</li><li><code>yytext</code>, <code>char *</code> 类型，保存当前匹配的字符串，以 null 结尾</li><li><code>yyleng</code>, <code>int</code> 类型，<code>yytext</code>的长度</li><li><code>yylval</code>, 记号(token) 属性，<code>YYSTYPE</code>类型，可行自定义，如</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> ! defined YYSTYPE &amp;&amp; ! defined YYSTYPE_IS_DECLARED</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YYSTYPE_IS_DECLARED</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* strval;</span><br><span class="line">    <span class="type">int</span>         ival;</span><br><span class="line">&#125; YYSTYPE;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>main.c</code> 改为如下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">yylex</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">extern</span> FILE *yyin;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">yywrap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (argc == <span class="number">1</span>) &#123;</span><br><span class="line">        yyin = <span class="built_in">stdin</span>;</span><br><span class="line">        yylex();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">            yyin = fopen(argv[i], <span class="string">&quot;r&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (yyin == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;file %s: open failed.\n&quot;</span>, argv[i]);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            yylex();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则编译出的程序类似于<code>cat</code> 命令</p><h2 id="语法分析工具-yacc"><a href="#语法分析工具-yacc" class="headerlink" title="语法分析工具 yacc"></a>语法分析工具 yacc</h2><p><code>yacc</code>: (Yet Another Compiler Compiler), 创建 <code>LALR(1)</code> 解析器</p><p>Linux 下一般使用 <a href="https://www.gnu.org/software/bison/manual/bison.html">Bison</a> 替代 <code>yacc</code>。此外，还有<code>byacc</code> (Berkeley Yacc)，和 <code>Bison</code> 一样，提供兼容的 <code>yacc</code>工具。最重要的，<code>Bison</code>, <code>byacc</code>是 <code>free</code> 的，<code>yacc</code> 是<code>AT&amp;T</code> 的专有软件</p><p><code>bison [OPTION]... FILE</code> (通过<code>-y</code> 或 <code>--yacc</code> 兼容 yacc)</p><h3 id="Bison-源文件格式"><a href="#Bison-源文件格式" class="headerlink" title="Bison 源文件格式"></a>Bison 源文件格式</h3><p>类似<code>lex</code>源文件(<code>.l</code>), <code>bison</code> 源文件(<code>.y</code>) 也如下结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">part1 - 复制到生成的C文件的开头</span><br><span class="line">%&#125;</span><br><span class="line">part2 - 词法声明</span><br><span class="line">%%</span><br><span class="line">part3 - 翻译规则</span><br><span class="line">%%</span><br><span class="line">part4 - 复制到生成的C文件的结尾</span><br></pre></td></tr></table></figure><h3 id="一个例子-1"><a href="#一个例子-1" class="headerlink" title="一个例子"></a>一个例子</h3><p><code>test.l</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#include &quot;y.tab.h&quot;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line">-?[0-9]+        &#123;   yylval = atoi(yytext);</span><br><span class="line">                    return NUMBER;</span><br><span class="line">                &#125;</span><br><span class="line">&quot;+&quot;             &#123;   return PLUS; &#125;</span><br><span class="line">&quot;\r&quot;            &#123;   ; &#125;</span><br><span class="line">&quot;\n&quot;            &#123;   ; &#125;</span><br><span class="line">[ \t]+          &#123;   ; &#125;</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">int yywrap()</span><br><span class="line">&#123;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>test.y</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">extern int yylex();</span><br><span class="line">void yyerror(char const *str);</span><br><span class="line">typedef int YYSTYPE;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%token NUMBER PLUS</span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">line : line expression &#123; printf(&quot;%d\n&quot;, $2); &#125;</span><br><span class="line">     |</span><br><span class="line">     ;</span><br><span class="line"></span><br><span class="line">expression : expression PLUS expression &#123; $$ =  $1 + $3; &#125;</span><br><span class="line">           | NUMBER</span><br><span class="line">           ;</span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">void yyerror(char const *str)</span><br><span class="line">&#123;</span><br><span class="line">    fprintf(stderr, &quot;%s\n&quot;, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">yyparse</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    yyparse();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译执行，得到只支持加法的简易计算器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">bison -d -y test.y <span class="comment"># 生成 y.tab.c  y.tab.h</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">flex test.l        <span class="comment"># 生成 lex.yy.c</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gcc main.c y.tab.c lex.yy.c -o main</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> test.txt</span></span><br><span class="line">1 + 2</span><br><span class="line">7 + -8</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./main &lt; test.txt</span></span><br><span class="line">3</span><br><span class="line">-1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux /proc 虚拟文件系统</title>
      <link href="/codes/linux-proc-filesystem/"/>
      <url>/codes/linux-proc-filesystem/</url>
      
        <content type="html"><![CDATA[<p><code>/proc</code> 目录包含的文件并未实际存储在磁盘上，而是内核在进程访问此类信息时动态创建而成。</p><p>更多信息可以通过<code>man 5 proc</code>查看。</p><h2 id="proc-PID"><a href="#proc-PID" class="headerlink" title="&#x2F;proc&#x2F;PID"></a>&#x2F;proc&#x2F;PID</h2><p>保存了进程相关的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cmdline     以\0 分隔的命令行参数</span><br><span class="line">cwd         指向当前工作目录的符号链接</span><br><span class="line">Environ     NAME=value 键值对环境列表，以\0 分隔</span><br><span class="line">exe         指向正在执行文件的符号链接</span><br><span class="line">fd          目录，包含了进程打开的文件描述符的符号链接</span><br><span class="line">maps        内存映射</span><br><span class="line">mem         进程虚拟内存</span><br><span class="line">mounts      进程的安装点</span><br><span class="line">root        指向根目录的符号链接（chroot 系统调用）</span><br><span class="line">status      各种信息（进程ID、凭证、内存使用量、信号等）</span><br><span class="line">task        线程目录，/proc/PID/task/TID为线程子目录，TID即线程调用gettid()的返回值</span><br></pre></td></tr></table></figure><p>进程可通过 <code>/proc/self</code> 访问自身的 <code>/proc/PID</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /proc/self/cmdline</span></span><br><span class="line">cat/proc/self/cmdline # \0结尾，无换行</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">readlink</span> /proc/self/exe</span></span><br><span class="line">/usr/bin/readlink</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /tmp; <span class="built_in">readlink</span> /proc/self/cwd</span></span><br><span class="line">/tmp</span><br></pre></td></tr></table></figure><h2 id="tools"><a href="#tools" class="headerlink" title="tools"></a>tools</h2><ol><li><p>查看进程打开的文件（切换成root或进程属主）</p><p><code>lsof -p &lt;pid&gt;</code></p><p><code>readlink /proc/&lt;pid&gt;/fd/&lt;fd&gt;</code></p><p><code>cat /proc/&lt;pid&gt;/fdinfo/&lt;fd&gt;</code> 显示pos（文件偏移量），flags（八进制文件访问权限等信息），mnt_id（挂载信息，可查看<code>/proc/&lt;pid&gt;/mountinfo</code>）</p></li><li><p>查看进程内存映射</p><p><code>pmap &lt;pid&gt;</code></p><p><code>cat /proc/&lt;pid&gt;/maps</code></p></li><li><p>查看cpu信息</p><p><code>lscpu</code></p><p><code>cat /proc/cpuinfo</code></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 用户和组</title>
      <link href="/codes/linux-user-group/"/>
      <url>/codes/linux-user-group/</url>
      
        <content type="html"><![CDATA[<h2 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="/etc/passwd"></a><code>/etc/passwd</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">liph:x:1000:1000:liph,,,:/home/liph:/bin/bash</span><br><span class="line">1    2 3    4    5       6          7</span><br><span class="line">1: login name</span><br><span class="line">2: encrypted password, /etc/shadow</span><br><span class="line">3: user id(uid), root is 0</span><br><span class="line">4: group id(gid)</span><br><span class="line">5: comment</span><br><span class="line">6: home directory</span><br><span class="line">7: login shell</span><br></pre></td></tr></table></figure><h2 id="etc-shadow"><a href="#etc-shadow" class="headerlink" title="/etc/shadow"></a><code>/etc/shadow</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">liph:xxxxx:19171:0:99999:7:::</span><br><span class="line">1    2     3     4 5     6789</span><br><span class="line">1: login name</span><br><span class="line">2: encrypted password</span><br><span class="line">3: date of last password change, expressed as the number of days since Jan 1, 1970.</span><br><span class="line">4: minimum password age</span><br><span class="line">5: maximum password age</span><br><span class="line">6: password warning period</span><br><span class="line">7: password inactivity period</span><br><span class="line">8: account expiration date</span><br><span class="line">9: reserved field</span><br></pre></td></tr></table></figure><h2 id="etc-group"><a href="#etc-group" class="headerlink" title="/etc/group"></a><code>/etc/group</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">liph:x:1000:abc,bcd</span><br><span class="line">1    2 3    4</span><br><span class="line">1: group name</span><br><span class="line">2: encrypted password, /etc/gshadow</span><br><span class="line">3: group id(gid), root is 0</span><br><span class="line">4: user list, user name list(not uid), many login names can have the same uid</span><br></pre></td></tr></table></figure><h2 id="函数-getpwnam-getpwuid-getgrnam-getgrgid"><a href="#函数-getpwnam-getpwuid-getgrnam-getgrgid" class="headerlink" title="函数 getpwnam(), getpwuid(), getgrnam(), getgrgid"></a><code>函数 getpwnam(), getpwuid(), getgrnam(), getgrgid</code></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pwd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> passwd *<span class="title function_">getpwnam</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span>;</span><br><span class="line"><span class="keyword">struct</span> passwd *<span class="title function_">getpwuid</span><span class="params">(<span class="type">uid_t</span> uid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>   *pw_name;       <span class="comment">/* username */</span></span><br><span class="line">    <span class="type">char</span>   *pw_passwd;     <span class="comment">/* user password */</span></span><br><span class="line">    <span class="type">uid_t</span>   pw_uid;        <span class="comment">/* user ID */</span></span><br><span class="line">    <span class="type">gid_t</span>   pw_gid;        <span class="comment">/* group ID */</span></span><br><span class="line">    <span class="type">char</span>   *pw_gecos;      <span class="comment">/* user information */</span></span><br><span class="line">    <span class="type">char</span>   *pw_dir;        <span class="comment">/* home directory */</span></span><br><span class="line">    <span class="type">char</span>   *pw_shell;      <span class="comment">/* shell program */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;grp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> group *<span class="title function_">getgrnam</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span>;</span><br><span class="line"><span class="keyword">struct</span> group *<span class="title function_">getgrgid</span><span class="params">(<span class="type">gid_t</span> gid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">group</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>   *gr_name;        <span class="comment">/* group name */</span></span><br><span class="line">    <span class="type">char</span>   *gr_passwd;      <span class="comment">/* group password */</span></span><br><span class="line">    <span class="type">gid_t</span>   gr_gid;         <span class="comment">/* group ID */</span></span><br><span class="line">    <span class="type">char</span>  **gr_mem;         <span class="comment">/* NULL-terminated array of pointers to names of group members */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="进程凭证"><a href="#进程凭证" class="headerlink" title="进程凭证"></a>进程凭证</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l /bin/sudo</span></span><br><span class="line">-rwsr-xr-x 1 root root 244632  3月 23 17:38 /bin/sudo</span><br><span class="line">    |</span><br><span class="line"> set-UID</span><br></pre></td></tr></table></figure><p>当运行 set-user-ID 程序（即通过调用 exec()将 set-user-ID 程序载入进程的内存中）时，内核会将进程的有效用户 ID 设置为可执行文件的用户 ID。</p><p>在 Linux 系统中，set-user-ID 和 set-group-ID 权限位对 shell脚本无效。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">uid_t</span> <span class="title function_">getuid</span><span class="params">(<span class="type">void</span>)</span>;         <span class="comment">// return uid</span></span><br><span class="line"><span class="type">uid_t</span> <span class="title function_">geteuid</span><span class="params">(<span class="type">void</span>)</span>;        <span class="comment">// return effective uid</span></span><br><span class="line"><span class="type">gid_t</span> <span class="title function_">getgid</span><span class="params">(<span class="type">void</span>)</span>;         <span class="comment">// return gid</span></span><br><span class="line"><span class="type">gid_t</span> <span class="title function_">getegid</span><span class="params">(<span class="type">void</span>)</span>;        <span class="comment">// return effective gid</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">setuid</span><span class="params">(<span class="type">uid_t</span> uid)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">setgid</span><span class="params">(<span class="type">gid_t</span> gid)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">seteuid</span><span class="params">(<span class="type">uid_t</span> euid)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">setegid</span><span class="params">(<span class="type">gid_t</span> egid)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">setreuid</span><span class="params">(<span class="type">uid_t</span> ruid, <span class="type">uid_t</span> euid)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">setregid</span><span class="params">(<span class="type">gid_t</span> rgid, <span class="type">gid_t</span> egid)</span>;</span><br><span class="line"><span class="comment">// set ((real) effective) uid/gid, 成功返回0，否则-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Linux</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getresuid</span><span class="params">(<span class="type">uid_t</span> *ruid, <span class="type">uid_t</span> *euid, <span class="type">uid_t</span> *suid)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">getresgid</span><span class="params">(<span class="type">gid_t</span> *rgid, <span class="type">gid_t</span> *egid, <span class="type">gid_t</span> *sgid)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">setresuid</span><span class="params">(<span class="type">uid_t</span> ruid, <span class="type">uid_t</span> euid, <span class="type">uid_t</span> suid)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">setresgid</span><span class="params">(<span class="type">gid_t</span> rgid, <span class="type">gid_t</span> egid, <span class="type">gid_t</span> sgid)</span>;</span><br><span class="line"><span class="comment">// get/set real, effective, saved set uid/gid, 成功返回0，否则-1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代C++优化：构造函数参数按值传递</title>
      <link href="/codes/modernize-pass-by-value/"/>
      <url>/codes/modernize-pass-by-value/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://clang.llvm.org/extra/clang-tidy/checks/modernize/pass-by-value.html</span></span><br><span class="line"><span class="comment">// Pass-by-value in constructors</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="built_in">A</span>(std::string str) : <span class="built_in">str_</span>(std::<span class="built_in">move</span>(str)) &#123;&#125;</span><br><span class="line">    std::string str_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="built_in">B</span>(<span class="type">const</span> std::string&amp; str) : <span class="built_in">str_</span>(str) &#123;&#125;</span><br><span class="line">    std::string str_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="function">A <span class="title">a1</span><span class="params">(str)</span></span>;             <span class="comment">// lvalue, copy</span></span><br><span class="line">    <span class="function">A <span class="title">a2</span><span class="params">(std::move(str))</span></span>;  <span class="comment">// rvalue, move</span></span><br><span class="line"></span><br><span class="line">    std::string str2 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="function">B <span class="title">b1</span><span class="params">(str2)</span></span>;             <span class="comment">// lvalue, copy</span></span><br><span class="line">    <span class="function">B <span class="title">b2</span><span class="params">(std::move(str2))</span></span>;  <span class="comment">// rvalue, copy</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>non-local static 对象初始化的顺序</title>
      <link href="/codes/non-local-static/"/>
      <url>/codes/non-local-static/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A.h, no header guard</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> i) : <span class="built_in">n</span>(i) &#123; std::cout &lt;&lt; <span class="string">&quot;A(&quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> n; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;A.h&quot;</span></span></span><br><span class="line"><span class="keyword">extern</span> A a;</span><br><span class="line"><span class="function">A <span class="title">a</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;A.h&quot;</span></span></span><br><span class="line"><span class="keyword">extern</span> A a;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>() &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        std::cout &lt;&lt; a.<span class="built_in">f</span>() &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">B b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ A.cpp B.cpp &amp;&amp; ./a.out</span></span><br><span class="line">A(100)</span><br><span class="line">B()</span><br><span class="line">100</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ B.cpp A.cpp &amp;&amp; ./a.out</span></span><br><span class="line">B()</span><br><span class="line">0</span><br><span class="line">A(100)</span><br></pre></td></tr></table></figure><p>不同翻译单元内 non-local static 对象初始化的顺序是不确定的，使用 Singleton 解决此类问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">A&amp; <span class="title">GetA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="type">static</span> A <span class="title">a</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3</title>
      <link href="/codes/python3/"/>
      <url>/codes/python3/</url>
      
        <content type="html"><![CDATA[<h2 id="包管理程序-pip"><a href="#包管理程序-pip" class="headerlink" title="包管理程序 pip"></a>包管理程序 pip</h2><h3 id="使用-pip-安装-Python-模块"><a href="#使用-pip-安装-Python-模块" class="headerlink" title="使用 pip 安装 Python 模块"></a>使用 pip 安装 Python 模块</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install SomePackage</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line">pip3 install SomePackage</span><br><span class="line"></span><br><span class="line">pip3 install SomePackage==1.0.1         # 指定版本号</span><br><span class="line">pip3 install &#x27;SomePackage&gt;=1.0.1&#x27;       # 指定最低版本号</span><br><span class="line"></span><br><span class="line">pip3 install --upgrade SomePackage      # 更新</span><br><span class="line"></span><br><span class="line">pip3 uninstall [-y] SomePackage         # 卸载</span><br><span class="line"></span><br><span class="line">pip3 install pip --upgrade              # 更新 pip</span><br></pre></td></tr></table></figure><p>pip 其它选项</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><code>--trusted-host &lt;host&gt;</code></td><td>信任的主机名</td></tr><tr><td><code>--retries &lt;N&gt;</code></td><td>重试次数</td></tr><tr><td><code>--timeout &lt;sec&gt;</code></td><td>设置超时时间</td></tr><tr><td><code>--proxy &lt;proxy&gt;</code></td><td>指定代理</td></tr><tr><td><code>--no-cache-dir</code></td><td>禁用缓存</td></tr></tbody></table><p><code>pip install</code> 其它选项</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><code>-i,--index-url &lt;url&gt;</code></td><td>指定 url, 默认为 <a href="https://pypi.python.org/simple/">https://pypi.python.org/simple/</a></td></tr><tr><td><code>--no-deps</code></td><td>不安装依赖</td></tr><tr><td><code>-t,--target &lt;dir&gt;</code></td><td>安装至 dir</td></tr><tr><td><code>-d,--download &lt;dir&gt;</code></td><td>仅下载至 dir，不安装</td></tr><tr><td><code>-r,--requirement &lt;file&gt;</code></td><td>安装在 file 中列出需要安装的包，file 包含由 <code>pip install</code> 参数排成列表的文件</td></tr></tbody></table><h3 id="pip-配置文件"><a href="#pip-配置文件" class="headerlink" title="pip 配置文件"></a>pip 配置文件</h3><p><code>unix</code>: <code>$HOME/.pip/pip.conf</code></p><p><code>win</code>: <code>%HOME%\pip\pip.ini</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout = 120</span><br><span class="line">index-url = http://pypi.liph.ink/simple</span><br><span class="line">trusted-host = liph.ink</span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line">find-links =</span><br><span class="line">    http://mirror1.example.com</span><br><span class="line">    http://mirror2.example.com</span><br></pre></td></tr></table></figure><h3 id="pip-自动补全"><a href="#pip-自动补全" class="headerlink" title="pip 自动补全"></a>pip 自动补全</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 completion --bash &gt;&gt; ~/.profile</span><br></pre></td></tr></table></figure><h2 id="安装使用-Python"><a href="#安装使用-Python" class="headerlink" title="安装使用 Python"></a>安装使用 Python</h2><h3 id="Linux下从源代码构建"><a href="#Linux下从源代码构建" class="headerlink" title="Linux下从源代码构建"></a>Linux下从源代码构建</h3><ol><li>下载最新Python 源代码 <a href="https://www.python.org/downloads/source/">https://www.python.org/downloads/source/</a></li><li>构建</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p><code>make install</code> 会覆盖系统中已安装的Python 版本</p><p>查看configure 配置 <code>./configure --help</code></p><table><thead><tr><th>configure 选项</th><th>说明</th></tr></thead><tbody><tr><td>–prefix&#x3D;PREFIX</td><td>指定PREFIX 安装架构无关的文件，默认为 <code>/usr/local</code></td></tr><tr><td>–exec-prefix&#x3D;EPREFIX</td><td>指定PREFIX 安装依赖架构的文件</td></tr></tbody></table><p>文件安装路径</p><table><thead><tr><th>文件&#x2F;目录</th><th>说明</th></tr></thead><tbody><tr><td><code>exec_prefix/bin/python3</code></td><td>解释器的推荐位置</td></tr><tr><td><code>prefix/lib/pythonversion</code>, <code> exec_prefix/lib/pythonversion</code></td><td>包含标准模块的目录的推荐位置</td></tr><tr><td><code>prefix/include/pythonversion</code>, <code>exec_prefix/include/pythonversion</code></td><td>包含开发Python扩展和嵌入解释器所需的include文件的目录的推荐位置</td></tr></tbody></table><p>查看 Python3 版本号 <code>python3 --version</code></p><h2 id="Python-解释器"><a href="#Python-解释器" class="headerlink" title="Python 解释器"></a>Python 解释器</h2><p>终端执行 <code>python3</code> 进入交互式 Python, 键入 Ctrl-D 退出交互式（windows 下是Ctrl-Z）, 或者输入 <code>sys.exit()</code> 退出（需要先 <code>import sys</code>）</p><p>python3 提供和bash 类似的 <code>-c</code> 选项以执行一条语句 <code>python3 -c command [arg] ...</code></p><p><code>python3 file</code> 用以解释执行 Python 源文件, Linux 下Python默认的字符编码是 UTF-8, 可以在源文件第一行指定编码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><p>如果第一行以 <code>shebang</code> 开头，则在第二行指定编码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><h2 id="作用域和名称空间"><a href="#作用域和名称空间" class="headerlink" title="作用域和名称空间"></a>作用域和名称空间</h2><h3 id="global-nonlocal"><a href="#global-nonlocal" class="headerlink" title="global, nonlocal"></a>global, nonlocal</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">global_stmt ::=  &quot;global&quot; identifier (&quot;,&quot; identifier)*</span><br><span class="line">nonlocal_stmt ::=  &quot;nonlocal&quot; identifier (&quot;,&quot; identifier)*</span><br></pre></td></tr></table></figure><h4 id="global"><a href="#global" class="headerlink" title="global"></a>global</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="string">&#x27;global var&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    var = <span class="string">&#x27;func1 var&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="keyword">global</span> var</span><br><span class="line">    var = <span class="string">&#x27;func2 var&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(var) <span class="comment"># global var</span></span><br><span class="line">func1()</span><br><span class="line"><span class="built_in">print</span>(var) <span class="comment"># global var</span></span><br><span class="line">func2()</span><br><span class="line"><span class="built_in">print</span>(var) <span class="comment"># func2 var</span></span><br></pre></td></tr></table></figure><p>global 语句是作用于整个当前代码块的声明，用于给全局变量赋值</p><p>在 global 语句中列出的名称不得在同一代码块内该 global 语句之前的位置中使用；例如下面的代码语法是错误的</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">global</span> a</span><br></pre></td></tr></table></figure><h4 id="nonlocal"><a href="#nonlocal" class="headerlink" title="nonlocal"></a>nonlocal</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    var = <span class="string">&#x27;func1 var&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">        var = <span class="string">&#x27;func2 var&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(var) <span class="comment"># func1 var</span></span><br><span class="line">    func2()</span><br><span class="line">    <span class="built_in">print</span>(var) <span class="comment"># func1 var</span></span><br><span class="line"></span><br><span class="line">func1()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func3</span>():</span><br><span class="line">    var = <span class="string">&#x27;func3 var&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func4</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> var</span><br><span class="line">        var = <span class="string">&#x27;func4 var&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(var) <span class="comment"># func3 var</span></span><br><span class="line">    func4()</span><br><span class="line">    <span class="built_in">print</span>(var) <span class="comment"># func4 var</span></span><br><span class="line"></span><br><span class="line">func3()</span><br></pre></td></tr></table></figure><p>nonlocal 语句会使得所列出的名称指向之前在最近的包含作用域中绑定的除全局变量以外的变量</p><p>与 global 语句中列出的名称不同，nonlocal 语句中列出的名称必须指向之前存在于包含作用域之中的绑定（在这个应当用来创建新绑定的作用域不能被无歧义地确定）</p><p>nonlocal 语句中列出的名称不得与之前存在于局部作用域中的绑定相冲突</p><p>以下代码的语法是错误的</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="string">&#x27;global var&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">nonlocal</span> var</span><br><span class="line">    var = <span class="string">&#x27;func var&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h2><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>Python 模块即一个 Python 源文件(<code>.py</code>)</p><p>全局变量 <code>__name__</code> 定义了模块名，以 <code>python3 xxx.py &lt;arguments&gt;</code> 运行模块时，<code>__name__</code> 赋值为 <code>&quot;__main__&quot;</code>，因此可以添加如下代码让该模块仅当脚本运行时才执行这些语句</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    do some things</span><br></pre></td></tr></table></figure><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import_stmt     ::=  &quot;import&quot; module [&quot;as&quot; identifier] (&quot;,&quot; module [&quot;as&quot; identifier])*</span><br><span class="line">                     | &quot;from&quot; relative_module &quot;import&quot; identifier [&quot;as&quot; identifier]</span><br><span class="line">                     (&quot;,&quot; identifier [&quot;as&quot; identifier])*</span><br><span class="line">                     | &quot;from&quot; relative_module &quot;import&quot; &quot;(&quot; identifier [&quot;as&quot; identifier]</span><br><span class="line">                     (&quot;,&quot; identifier [&quot;as&quot; identifier])* [&quot;,&quot;] &quot;)&quot;</span><br><span class="line">                     | &quot;from&quot; module &quot;import&quot; &quot;*&quot;</span><br><span class="line">module          ::=  (identifier &quot;.&quot;)* identifier</span><br><span class="line">relative_module ::=  &quot;.&quot;* module | &quot;.&quot;+</span><br></pre></td></tr></table></figure><p>import, import-from 语句用来导入其它模块，import 模块时会执行模块中的语句，导入模块中的符号</p><p>import 语句</p><ol><li>查找一个模块，如果有必要还会加载并初始化模块</li><li>在局部命名空间中为 import 语句发生位置所处的作用域定义一个或多个名称</li></ol><p>import-from 语句</p><ol><li>查找 from 子句中指定的模块，如有必要还会加载并初始化模块</li><li>对于 import 子句中指定的每个标识符</li><li>检查被导入模块是否有该名称的属性</li><li>如果没有，尝试导入具有该名称的子模块，然后再次检查被导入模块是否有该属性</li><li>如果未找到该属性，则引发 <code>ImportError</code></li><li>否则的话，将对该值的引用存入局部命名空间，如果有 as 子句则使用其指定的名称，否则使用该属性的名称</li></ol><p>假如文件 <code>moudle.py</code> 定义了函数 <code>func</code>，那么，可以在其它文件中 <code>import moudle</code> 后，通过 <code>moudle.func()</code> 调用该模块中的函数，模块名后使用 as 时，直接把 as 后的名称与导入模块绑定</p><p><code>from moudle import *</code> 可以导入模块内定义的所有名称</p><h3 id="模块的搜索路径"><a href="#模块的搜索路径" class="headerlink" title="模块的搜索路径"></a>模块的搜索路径</h3><p>搜索模块 <code>spam</code> 的顺序</p><ol><li>查找名为 <code>spam</code> 的内置模块</li><li>从 <code>sys.path</code> 中查找文件 <code>spam.py</code></li></ol><p><code>sys.path</code> 初始时包含</p><ul><li>输入脚本的目录（或未指定文件时的当前目录）</li><li><code>PYTHONPATH</code> （目录列表，与 shell 变量 PATH 的语法一样）</li><li>默认安装目录</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.path</span><br><span class="line">[<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;/usr/local/lib/python39.zip&#x27;</span>, <span class="string">&#x27;/usr/local/lib/python3.9&#x27;</span>, <span class="string">&#x27;/usr/local/lib/python3.9/lib-dynload&#x27;</span>, <span class="string">&#x27;/home/liph/.local/lib/python3.9/site-packages&#x27;</span>, <span class="string">&#x27;/usr/local/lib/python3.9/site-packages&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>包是一种组织模块的结构，可以用来构造Python 的名称空间</p><p>一个包含Python 模块的目录要称为包，需要在目录下编写一个 <code>__init__.py</code> 的文件，最简单的情况下，该文件为空；也可以执行包的初始化代码，或设置 <code>__all__</code> 变量</p><p>对于 <code>from package import item</code></p><p>item 可以是包的子模块（或子包），也可以是包中定义的函数、类或变量等其他名称。import 语句首先测试包中是否定义了 item；如果未在包中定义，则假定 item 是模块，并尝试加载。如果找不到 item，则触发 ImportError 异常</p><p>对于 <code>from package import *</code></p><ul><li>如果包的 <code>__init__.py</code> 代码定义了列表 <code>__all__</code>，就导入列表中的模块</li><li>如果没有定义 <code>__all__</code><ul><li>不会把包中所有子模块都导入到当前命名空间</li><li>只确保导入包 package（可能还会运行 <code>__init__.py</code> 中的初始化代码）</li><li>然后，再导入包中定义的名称。这些名称包括 <code>__init__.py</code> 中定义的任何名称（以及显式加载的子模块），还包括之前 import 语句显式加载的包里的子模块</li></ul></li></ul><p>在包中引入其它模块或子包中的模块，可用相对形式导入（基于当前模块名）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> echo</span><br><span class="line"><span class="keyword">from</span> .. <span class="keyword">import</span> formats</span><br><span class="line"><span class="keyword">from</span> ..filters <span class="keyword">import</span> equalizer</span><br></pre></td></tr></table></figure><p>由于，主模块名是 <code>&quot;__main__&quot;</code> ，因此，Python 应用程序的主模块必须始终使用绝对导入</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">funcdef                   ::=  [decorators] &quot;def&quot; funcname &quot;(&quot; [parameter_list] &quot;)&quot;</span><br><span class="line">                               [&quot;-&gt;&quot; expression] &quot;:&quot; suite</span><br><span class="line">decorators                ::=  decorator+</span><br><span class="line">decorator                 ::=  &quot;@&quot; assignment_expression NEWLINE</span><br><span class="line">dotted_name               ::=  identifier (&quot;.&quot; identifier)*</span><br><span class="line">parameter_list            ::=  defparameter (&quot;,&quot; defparameter)* &quot;,&quot; &quot;/&quot; [&quot;,&quot; [parameter_list_no_posonly]]</span><br><span class="line">                                 | parameter_list_no_posonly</span><br><span class="line">parameter_list_no_posonly ::=  defparameter (&quot;,&quot; defparameter)* [&quot;,&quot; [parameter_list_starargs]]</span><br><span class="line">                               | parameter_list_starargs</span><br><span class="line">parameter_list_starargs   ::=  &quot;*&quot; [parameter] (&quot;,&quot; defparameter)* [&quot;,&quot; [&quot;**&quot; parameter [&quot;,&quot;]]]</span><br><span class="line">                               | &quot;**&quot; parameter [&quot;,&quot;]</span><br><span class="line">parameter                 ::=  identifier [&quot;:&quot; expression]</span><br><span class="line">defparameter              ::=  parameter [&quot;=&quot; expression]</span><br><span class="line">funcname                  ::=  identifier</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print a Fibonacci series up to n.&quot;&quot;&quot;</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a &lt; n:</span><br><span class="line">        <span class="built_in">print</span>(a, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">fib(<span class="number">2000</span>)</span><br></pre></td></tr></table></figure><ul><li>函数定义使用 <code>def</code>，后跟函数名和参数列表</li><li>函数内的第一条语句是字符串时，称为文档字符串（docstring）</li><li>没有 <code>return</code> 或 <code>return</code> 不带表达式的函数返回 <code>None</code></li></ul><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, b = <span class="number">0</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(a &gt; b)</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>)</span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>调用时需给出必选参数，可选参数按顺序给定</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">arg=i</span>):</span><br><span class="line">    <span class="built_in">print</span>(arg)</span><br><span class="line"></span><br><span class="line">i = <span class="number">6</span></span><br><span class="line">f() <span class="comment">#=&gt; 5</span></span><br></pre></td></tr></table></figure><p>默认值在定义作用域里的函数定义中求值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a, L=[]</span>):</span><br><span class="line">    L.append(a)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">1</span>)) <span class="comment"># [1]</span></span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">2</span>)) <span class="comment"># [1, 2]</span></span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">3</span>)) <span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>默认值只计算一次。默认值为列表、字典或类实例等可变对象时，会产生与该规则不同的结果</p><p>不想在后续调用之间共享默认值时，应以如下方式编写函数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a, L=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        L = []</span><br><span class="line">    L.append(a)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure><h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, b = <span class="number">1</span>, c = <span class="number">2</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b, c)</span><br><span class="line"></span><br><span class="line">func(<span class="number">0</span>)</span><br><span class="line">func(<span class="number">0</span>, c = <span class="number">1</span>)</span><br><span class="line">func(a = <span class="number">2</span>, c = <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>调用函数时可用 <code>kwarg=value</code> 形式的关键字参数</li><li>函数调用时，关键字参数必须跟在位置参数后面</li><li>关键字参数的顺序并不重要。这也包括必选参数</li><li>不能对同一个参数多次赋值</li><li>所有传递的关键字参数都必须匹配一个函数接受的参数</li></ul><p>最后一个形参为 <code>**name</code> 形式时，接受一个字典，<code>**name</code> 形参可以与 <code>*name</code> 形参（下一小节介绍）组合使用（<code>*name</code> 必须在 <code>**name</code> 前面）<br><code>*name</code> 形参接收一个元组，该元组包含形参列表之外的位置参数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, *b, **c</span>):</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> c:</span><br><span class="line">        <span class="built_in">print</span>(k, c[k])</span><br><span class="line"></span><br><span class="line">func(<span class="literal">True</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, i = <span class="string">&quot;hello&quot;</span>, j = <span class="string">&quot;world&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lambda_expr        ::=  &quot;lambda&quot; [parameter_list] &quot;:&quot; expression</span><br><span class="line">lambda_expr_nocond ::=  &quot;lambda&quot; [parameter_list] &quot;:&quot; expression_nocond</span><br></pre></td></tr></table></figure><p>lambda 创建匿名函数 如 <code>(lambda x: x ** 2)(5)</code> 创建一个匿名函数并调用</p><p><code>lambda parameters: expression</code> 类似于如下方式定义函数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> &lt;<span class="keyword">lambda</span>&gt;(parameters):</span><br><span class="line">     <span class="keyword">return</span> expression</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h3><ul><li><code>None</code></li><li><code>numbers.Number</code><ul><li><code>numbers.Integral</code><ul><li><code>int</code></li><li><code>bool</code></li></ul></li><li><code>numbers.Real</code>(<code>float</code>)</li><li><code>numbers.Complex</code>(<code>complex</code>)</li></ul></li><li>序列<ul><li>不可变序列<ul><li>字符串(<code>str</code>)</li><li>元组(<code>tuple</code>)</li><li>字节串(<code>bytes</code>)</li><li>范围(<code>range</code>)</li></ul></li><li>可变序列<ul><li>列表(<code>list</code>)</li><li>字节数组(<code>bytearray</code>)</li></ul></li></ul></li><li>集合<ul><li>集合(<code>set</code>)</li><li>冻结集合(<code>frozenset</code>)</li></ul></li><li>映射<ul><li>字典(<code>dict</code>)</li></ul></li></ul><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><h4 id="int"><a href="#int" class="headerlink" title="int"></a>int</h4><p>整数类型，拥有无限精度</p><p>构造函数 <code>int()</code> 用以构造 int 类型数字</p><p>int 类型的按位运算</p><table><thead><tr><th>运算</th><th>结果</th></tr></thead><tbody><tr><td>&#96;x</td><td>y&#96;</td></tr><tr><td><code>x ^ y</code></td><td>按位异或</td></tr><tr><td><code>x &amp; y</code></td><td>按位与</td></tr><tr><td><code>x &lt;&lt; n</code></td><td>左移 (n &gt;&#x3D; 0)</td></tr><tr><td><code>x &gt;&gt; n</code></td><td>右移 (n &gt;&#x3D; 0)</td></tr><tr><td><code>~x</code></td><td>按位取反</td></tr></tbody></table><p>int 类型的方法，字面量调用如 <code>1.bit_length()</code> 是错误的语法，可改成 <code>(1).bit_length()</code></p><h4 id="bool-类型"><a href="#bool-类型" class="headerlink" title="bool 类型"></a>bool 类型</h4><p>bool 类型是两个常量对象之一: <code>True</code>, <code>False</code>，可用内置函数 <code>bool()</code> 将任意值转为 bool 类型</p><h4 id="float-类型"><a href="#float-类型" class="headerlink" title="float 类型"></a>float 类型</h4><p>一般使用C 语言的 <code>double</code> 来实现，浮点数构造函数 <code>float()</code></p><h4 id="complex-类型"><a href="#complex-类型" class="headerlink" title="complex 类型"></a>complex 类型</h4><p>复数包含实部和虚部，分别以一个浮点数表示。 要从一个复数 z 中提取这两个部分，可使用 <code>z.real</code> 和 <code>z.imag</code></p><p>复数构造函数 <code>complex()</code></p><h3 id="数字类型的运算"><a href="#数字类型的运算" class="headerlink" title="数字类型的运算"></a>数字类型的运算</h3><table><thead><tr><th>运算</th><th>结果</th></tr></thead><tbody><tr><td><code>x + y</code></td><td>和</td></tr><tr><td><code>x - y</code></td><td>差</td></tr><tr><td><code>x * y</code></td><td>乘积</td></tr><tr><td><code>x / y</code></td><td>商</td></tr><tr><td><code>x // y</code></td><td>整除</td></tr><tr><td><code>x % y</code></td><td>模</td></tr><tr><td><code>-x</code></td><td>取反</td></tr><tr><td><code>+x</code></td><td>x 不变</td></tr><tr><td><code>abs(x)</code></td><td>绝对值</td></tr><tr><td><code>int(x)</code></td><td>转为整数</td></tr><tr><td><code>float(x)</code></td><td>转为浮点数</td></tr><tr><td><code>pow(x, y)</code></td><td>x 的 y 次幂</td></tr><tr><td><code>x ** y</code></td><td>x 的 y 次幂</td></tr><tr><td><code>divmod(x, y)</code></td><td><code>(x // y, x % y)</code></td></tr><tr><td><code>complex(re, im)</code></td><td>带有实部re, 虚部im(默认0) 的复数</td></tr><tr><td><code>c.conjugate()</code></td><td>复数c 的共轭</td></tr></tbody></table><h3 id="序列类型"><a href="#序列类型" class="headerlink" title="序列类型"></a>序列类型</h3><p>通用序列（可变与不可变序列）操作</p><table><thead><tr><th>运算</th><th>结果</th></tr></thead><tbody><tr><td><code>x in s</code></td><td>如果 s 中的某项等于 x 则结果为 True，否则为 False</td></tr><tr><td><code>x not in s</code></td><td>如果 s 中的某项等于 x 则结果为 False，否则为 True</td></tr><tr><td><code>s + t</code></td><td>s 与 t 相拼接</td></tr><tr><td><code>s * n</code> 或 <code>n * s</code></td><td>相当于 s 与自身进行 n 次拼接</td></tr><tr><td><code>s[i]</code></td><td>第 i 项（从0起）</td></tr><tr><td><code>s[i:j]</code></td><td>s 从 i 到 j 的切片</td></tr><tr><td><code>s[i:j:k]</code></td><td>s 从 i 到 j 步长为 k 的切片</td></tr><tr><td><code>len(s)</code></td><td>s 的长度</td></tr><tr><td><code>min(s)</code></td><td>s 的最小项</td></tr><tr><td><code>max(s)</code></td><td>s 的最大项</td></tr><tr><td><code>s.index(x[, i[, j]])</code></td><td>x 在 s 中首次出现项的索引号（索引号在 i 或其后且在 j 之前）</td></tr><tr><td><code>s.count(x)</code></td><td>x 在 s 中出现的总次数</td></tr></tbody></table><p>相同类型的序列支持比较操作</p><p>不可变序列类型普遍实现而可变序列类型未实现的唯一操作就是对 <code>hash()</code> 内置函数的支持</p><p>可变序列操作</p><table><thead><tr><th>运算</th><th>结果</th></tr></thead><tbody><tr><td><code>s[i] = x</code></td><td>将 s 的第 i 项替换为 x</td></tr><tr><td><code>s[i:j] = t</code></td><td>将 s 从 i 到 j 的切片替换为可迭代对象 t 的内容</td></tr><tr><td><code>del s[i:j]</code></td><td>等同于 <code>s[i:j] = []</code></td></tr><tr><td><code>s[i:j:k] = t</code></td><td>将 <code>s[i:j:k]</code> 的元素替换为 t 的元素</td></tr><tr><td><code>del s[i:j:k]</code></td><td>从列表中移除 <code>s[i:j:k]</code> 的元素</td></tr><tr><td><code>s.append(x)</code></td><td>将 x 添加到序列的末尾 (等同于 <code>s[len(s):len(s)] = [x]</code>)</td></tr><tr><td><code>s.clear()</code></td><td>从 s 中移除所有项 (等同于 <code>del s[:]</code>)</td></tr><tr><td><code>s.copy()</code></td><td>创建 s 的浅拷贝 (等同于 <code>s[:]</code>)</td></tr><tr><td><code>s.extend(t)</code> 或 <code>s += t</code></td><td>用 t 的内容扩展 s (基本上等同于 <code>s[len(s):len(s)] = t</code>)</td></tr><tr><td><code>s *= n</code></td><td>使用 s 的内容重复 n 次来对其进行更新</td></tr><tr><td><code>s.insert(i, x)</code></td><td>在由 i 给出的索引位置将 x 插入 s (等同于 <code>s[i:i] = [x]</code>)</td></tr><tr><td><code>s.pop([i])</code></td><td>提取在 i 位置上的项，并将其从 s 中移除，可选参数 i 默认为 -1，移除并返回最后一项</td></tr><tr><td><code>s.remove(x)</code></td><td>删除 s 中第一个 s[i] 等于 x 的项目</td></tr><tr><td><code>s.reverse()</code></td><td>就地将列表中的元素逆序</td></tr></tbody></table><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>Python 中的字符串是 str 类型，是由 Unicode 码位构成的不可变序列</p><p>字符串字面量的三种写法</p><ul><li>单引号: <code>&#39;允许包含有 &quot;双&quot; 引号&#39;</code></li><li>双引号: <code>&quot;允许包含有 &#39;单&#39; 引号&quot;</code></li><li>三重引号: <code>&#39;&#39;&#39;三重单引号&#39;&#39;&#39;, &quot;&quot;&quot;三重双引号&quot;&quot;&quot;</code></li></ul><p>使用三重引号的字符串可以跨越多行 —— 其中所有的空白字符都将包含在该字符串字面值中，由空格分隔的字符串字面量会转换成单个字符串</p><p>字符串构造函数 <code>str()</code></p><p>对于字符串 s, s[i] 将产生长度为1 的字符串（Python 中没有字符类型），<code>s[i] == s[i:i+1]</code></p><p>格式化字符串</p><ul><li>格式字符串字面值(<code>f-string</code>): 以<code>f/F</code> 为前缀，<code>&#123;&#125;</code> 为标记</li><li>printf 风格格式化字符串 <code>format % values</code></li><li><code>str.format()</code></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nums = <span class="number">100</span></span><br><span class="line">hello = <span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;nums = <span class="subst">&#123;nums&#125;</span>, hello <span class="subst">&#123;hello&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;nums = %d, hello %s&#x27;</span> % (nums, hello))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;nums = &#123;&#125;, hello &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(nums, hello))</span><br><span class="line"></span><br><span class="line"><span class="comment"># nums = 100, hello world</span></span><br></pre></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>元组是不可变序列，通常用于储存异构数据的多项集，也被用于需要同构数据的不可变序列的情况</p><p>构建元组的方式</p><ul><li>使用一对圆括号来表示空元组: <code>()</code></li><li>使用一个后缀的逗号来表示单元组: <code>a,</code> 或 <code>(a,)</code></li><li>使用以逗号分隔的多个项: <code>a, b, c</code> 或 <code>(a, b, c)</code></li><li>使用内置的 <code>tuple()</code>: <code>tuple()</code> 或 <code>tuple(iterable)</code></li></ul><p>决定生成元组的其实是逗号而不是圆括号，圆括号只是可选的，生成空元组或需要避免语法歧义的情况除外</p><h4 id="元祖拆包-可迭代元素拆包"><a href="#元祖拆包-可迭代元素拆包" class="headerlink" title="元祖拆包(可迭代元素拆包)"></a>元祖拆包(可迭代元素拆包)</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">point = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">x, y = point</span><br><span class="line">y, x = x, y</span><br><span class="line"><span class="string">&quot;%d, %d&quot;</span> % point</span><br><span class="line"></span><br><span class="line">t = (<span class="number">20</span>, <span class="number">8</span>)</span><br><span class="line"><span class="built_in">divmod</span>(*t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">_, filename = os.path.split(<span class="string">&#x27;~/.ssh/id_rsa.pub&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a, b, *rest = <span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line">a, *body, c, d = <span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line">*head, b, c, d = <span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">a, (b, c) = (<span class="number">1</span>, (<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><h3 id="字节串"><a href="#字节串" class="headerlink" title="字节串"></a>字节串</h3><p>bytes 对象是由单个字节构成的不可变序列</p><p>bytes 字面量（类似str 字面量，有一个前缀b）</p><ul><li>单引号: <code>b&#39;同样允许嵌入 &quot;双&quot; 引号&#39;</code></li><li>双引号: <code>b&quot;同样允许嵌入 &#39;单&#39; 引号&quot;</code></li><li>三重引号: <code>b&#39;&#39;&#39;三重单引号&#39;&#39;&#39;, b&quot;&quot;&quot;三重双引号&quot;&quot;&quot;</code></li></ul><p>str, bytes 字面量通过前缀 r 禁用转义序列</p><p>bytes 构造函数 <code>bytes()</code></p><h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><p><code>range</code> 类型表示不可变的数字序列，通常用于在 for 循环中循环指定的次数</p><p>构造函数</p><ul><li><code>range(stop)</code></li><li><code>range(start, stop[, step])</code></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">30</span>, <span class="number">5</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>, -<span class="number">10</span>, -<span class="number">1</span>))</span><br><span class="line">[<span class="number">0</span>, -<span class="number">1</span>, -<span class="number">2</span>, -<span class="number">3</span>, -<span class="number">4</span>, -<span class="number">5</span>, -<span class="number">6</span>, -<span class="number">7</span>, -<span class="number">8</span>, -<span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">0</span>))</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表是可变序列，通常用于存放同类项目的集合</p><p>构造列表的方式</p><ul><li>使用一对方括号来表示空列表: <code>[]</code></li><li>使用方括号，其中的项以逗号分隔: <code>[a]</code>, <code>[a, b, c]</code></li><li>使用列表推导式: <code>[x for x in iterable]</code></li><li>使用类型的构造器: <code>list()</code> 或 <code>list(iterable)</code></li></ul><h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">symbols = <span class="string">&#x27;$¢£¥€¤&#x27;</span></span><br><span class="line">beyond_ascii = [<span class="built_in">ord</span>(s) <span class="keyword">for</span> s <span class="keyword">in</span> symbols <span class="keyword">if</span> <span class="built_in">ord</span>(s) &gt; <span class="number">127</span>]</span><br><span class="line">beyond_ascii2 = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> c: c &gt; <span class="number">127</span>, <span class="built_in">map</span>(<span class="built_in">ord</span>, symbols)))</span><br><span class="line"><span class="comment"># [162, 163, 165, 8364, 164]</span></span><br><span class="line"></span><br><span class="line">colors = [<span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;white&#x27;</span>]</span><br><span class="line">sizes = [<span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;L&#x27;</span>]</span><br><span class="line">tshirts = [(color, size) <span class="keyword">for</span> color <span class="keyword">in</span> colors <span class="keyword">for</span> size <span class="keyword">in</span> sizes]</span><br></pre></td></tr></table></figure><h4 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">symbols = <span class="string">&#x27;$¢£¥€¤&#x27;</span></span><br><span class="line"><span class="built_in">tuple</span>(<span class="built_in">ord</span>(symbol) <span class="keyword">for</span> symbol <span class="keyword">in</span> symbols)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> array</span><br><span class="line">array.array(<span class="string">&#x27;I&#x27;</span>, (<span class="built_in">ord</span>(symbol) <span class="keyword">for</span> symbol <span class="keyword">in</span> symbols))</span><br><span class="line"></span><br><span class="line">colors = [<span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;white&#x27;</span>]</span><br><span class="line">sizes = [<span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;L&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> tshirt <span class="keyword">in</span> (<span class="string">&#x27;%s %s&#x27;</span> % (c, s) <span class="keyword">for</span> c <span class="keyword">in</span> colors <span class="keyword">for</span> s <span class="keyword">in</span> sizes):</span><br><span class="line">    <span class="built_in">print</span>(tshirt)</span><br></pre></td></tr></table></figure><ul><li>如果生成器表达式是一个函数调用过程中的唯一参数，那么不需要额外再用括号把它围起来</li><li>生成器表达式会在每次for循环运行时才生成一个组合</li></ul><h3 id="字节数组"><a href="#字节数组" class="headerlink" title="字节数组"></a>字节数组</h3><p><code>bytearray</code> 对象是 <code>bytes</code> 对象的可变对应物</p><p><code>bytearray</code> 总是通过调用构造器来创建 <code>bytearray()</code></p><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>集合是由具有唯一性的 <code>hashable</code> 对象所组成的无序多项集</p><p><code>set</code> 类型是可变的，其内容可以使用 <code>add()</code> 和 <code>remove()</code> 这样的方法来改变。由于是可变类型，它没有哈希值，且不能被用作字典的键或其他集合的元素</p><p><code>frozenset</code> 类型是不可变并且为 <code>hashable</code>，其内容在被创建后不能再改变；因此它可以被用作字典的键或其他集合的元素</p><p>构造函数分别为 <code>set()</code> <code>frozenset()</code></p><p>非空的 set (不是 frozenset) 还可以通过将以逗号分隔的元素列表包含于花括号之内来创建，例如: <code>&#123;&#39;jack&#39;, &#39;sjoerd&#39;&#125;</code></p><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>映射对象会将 <code>hashable</code> 值映射到任意对象，Python 提供 <code>dict</code> 映射类型，<code>dict</code> 属于可变对象</p><p>创建字典</p><ul><li>字面量: 包含与 <code>&#123;&#125;</code> 内的 <code>key:value</code> 列表，如 <code>&#123;&#39;jack&#39;: 4098, &#39;sjoerd&#39;: 4127&#125;</code></li><li>字典推导式: <code>&#123;&#125;</code>, <code>&#123;x: x ** 2 for x in range(10)&#125;</code></li><li>构造函数 <code>dict</code>: <code>dict()</code>, <code>dict([(&#39;foo&#39;, 100), (&#39;bar&#39;, 200)])</code>, <code>dict(foo=100, bar=200)</code></li></ul><p>字典的操作</p><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td><code>list(d)</code></td><td>返回字典 d 中使用的所有键的列表</td></tr><tr><td><code>len(d)</code></td><td>返回字典 d 中的项数</td></tr><tr><td><code>d[key]</code></td><td>返回 d 中以 key 为键的项。 如果映射中不存在 key 则会引发 <code>KeyError</code></td></tr><tr><td><code>d[key]=value</code></td><td>将 d[key] 设为 value</td></tr><tr><td><code>del d[key]</code></td><td>将 d[key] 从 d 中移除。 如果映射中不存在 key 则会引发 <code>KeyError</code></td></tr><tr><td><code>key in d</code></td><td>如果 d 中存在键 key 则返回 True，否则返回 False</td></tr><tr><td><code>key not in d</code></td><td>等价于 <code>not key in d</code></td></tr><tr><td><code>iter(d)</code></td><td>返回以字典的键为元素的迭代器。 这是 iter(d.keys()) 的快捷方式</td></tr><tr><td><code>clear()</code></td><td>移除字典中的所有元素</td></tr><tr><td><code>copy()</code></td><td>返回原字典的浅拷贝</td></tr><tr><td><code>fromkeys(iterable[, value])</code></td><td>使用来自 iterable 的键创建一个新字典，并将键值设为 value</td></tr><tr><td><code>get(key[, default])</code></td><td>如果 key 存在于字典中则返回 key 的值，否则返回 default。 如果 default 未给出则默认为 <code>None</code>，因而此方法绝不会引发 <code>KeyError</code></td></tr><tr><td><code>items()</code></td><td>返回由字典项(key-value)组成的一个新视图</td></tr><tr><td><code>keys()</code></td><td>返回由字典键(key)组成的一个新视图</td></tr><tr><td><code>values()</code></td><td>返回由字典值组成的一个新视图</td></tr><tr><td><code>pop(key[, default])</code></td><td>如果 key 存在于字典中则将其移除并返回其值，否则返回 default。 如果 default 未给出且 key 不存在于字典中，则会引发 KeyError</td></tr><tr><td><code>popitem()</code></td><td>从字典中移除并返回一个 (键, 值) 对。 键值对会按 LIFO 的顺序被返回</td></tr><tr><td><code>reversed(d)</code></td><td>返回一个逆序获取字典键的迭代器。 这是 reversed(d.keys()) 的快捷方式</td></tr><tr><td><code>setdefault(key[, default])</code></td><td>如果字典存在键 key ，返回它的值。如果不存在，插入值为 default 的键 key ，并返回 default 。 default 默认为 None</td></tr><tr><td><code>update([other])</code></td><td>使用来自 other 的键&#x2F;值对更新字典，覆盖原有的键</td></tr><tr><td>&#96;d</td><td>other&#96;</td></tr><tr><td>&#96;d</td><td>&#x3D; other&#96;</td></tr></tbody></table><h3 id="其它内置函数"><a href="#其它内置函数" class="headerlink" title="其它内置函数"></a>其它内置函数</h3><p><code>enumerate(iterable, start=0)</code> 返回一个枚举对象</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lists = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(lists):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;lists[<span class="subst">&#123;i&#125;</span>] = <span class="subst">&#123;v&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>zip(*iterables)</code> 创建一个聚合了来自每个可迭代对象中的元素的迭代器，返回一个元组的迭代器</p><ul><li>其中的第 i 个元组包含来自每个参数序列或可迭代对象的第 i 个元素</li><li>当所输入可迭代对象中最短的一个被耗尽时，迭代器将停止迭代</li><li>当只有一个可迭代对象参数时，它将返回一个单元组的迭代器</li><li>不带参数时，它将返回一个空迭代器</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">list2 = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">zip</span>(list1, list2):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (1, &#x27;hello&#x27;)</span></span><br><span class="line"><span class="comment"># (2, &#x27;world&#x27;)</span></span><br></pre></td></tr></table></figure><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><h3 id="逻辑值检测"><a href="#逻辑值检测" class="headerlink" title="逻辑值检测"></a>逻辑值检测</h3><p>一个对象在默认情况下均被视为真值，除非当该对象被调用时其所属类定义了 <code>__bool__()</code> 方法且返回 <code>False</code> 或是定义了 <code>__len__()</code> 方法且返回零</p><p>以下对象为假值</p><ul><li>常量 <code>None</code>, <code>False</code></li><li>数值类型的零: <code>0, 0.0, 0j, Decimal(0), Fraction(0, 1)</code></li><li>空的序列和多项集: <code>&#39;&#39;, (), [], &#123;&#125;, set(), range(0)</code></li></ul><h3 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h3><ul><li>x <code>or</code> y: 如果x 为假, 则y, 否则x（x 为真时短路）</li><li>x <code>and</code> y: 如果x 为假, 则x, 否则y（x 为假时短路）</li><li><code>not</code> x: 如果x 为假, 则<code>True</code>, 否则<code>False</code></li></ul><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><table><thead><tr><th>运算</th><th>含义</th></tr></thead><tbody><tr><td><code>&lt;</code></td><td>严格小于</td></tr><tr><td><code>&lt;=</code></td><td>小于或等于</td></tr><tr><td><code>&gt;</code></td><td>严格大于</td></tr><tr><td><code>&gt;=</code></td><td>大于或等于</td></tr><tr><td><code>==</code></td><td>等于</td></tr><tr><td><code>!=</code></td><td>不等于</td></tr><tr><td><code>is</code></td><td>对象标识</td></tr><tr><td><code>is not</code></td><td>否定的对象标识</td></tr><tr><td><code>in</code></td><td>成员运算检测</td></tr><tr><td><code>not in</code></td><td>否定的成员运算检测</td></tr></tbody></table><p>比较运算符优先级相同，且高于布尔运算</p><p>比较运算可以任意串连；例如，x &lt; y &lt;&#x3D; z 等价于 x &lt; y and y &lt;&#x3D; z，前者的不同之处在于 y 只被求值一次（但在两种情况下当 x &lt; y 结果为假值时 z 都不会被求值）</p><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if_stmt ::=  &quot;if&quot; assignment_expression &quot;:&quot; suite</span><br><span class="line">             (&quot;elif&quot; assignment_expression &quot;:&quot; suite)*</span><br><span class="line">             [&quot;else&quot; &quot;:&quot; suite]</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">lists = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> string <span class="keyword">in</span> lists:</span><br><span class="line">    <span class="built_in">print</span>(string, <span class="string">&quot;in&quot;</span>, lists)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(string, <span class="string">&quot;not in&quot;</span>, lists)</span><br></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while_stmt ::=  &quot;while&quot; assignment_expression &quot;:&quot; suite</span><br><span class="line">                [&quot;else&quot; &quot;:&quot; suite]</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">lists = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]</span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(lists):</span><br><span class="line">    <span class="built_in">print</span>(lists[i])</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for_stmt ::=  &quot;for&quot; target_list &quot;in&quot; expression_list &quot;:&quot; suite</span><br><span class="line">              [&quot;else&quot; &quot;:&quot; suite]</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lists = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lists:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h3 id="break-continue"><a href="#break-continue" class="headerlink" title="break, continue"></a>break, continue</h3><p>while, for 语句中的 break, continue 分别用以终止循环与跳过循环内剩余语句</p><h3 id="try"><a href="#try" class="headerlink" title="try"></a>try</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try_stmt  ::=  try1_stmt | try2_stmt</span><br><span class="line">try1_stmt ::=  &quot;try&quot; &quot;:&quot; suite</span><br><span class="line">               (&quot;except&quot; [expression [&quot;as&quot; identifier]] &quot;:&quot; suite)+</span><br><span class="line">               [&quot;else&quot; &quot;:&quot; suite]</span><br><span class="line">               [&quot;finally&quot; &quot;:&quot; suite]</span><br><span class="line">try2_stmt ::=  &quot;try&quot; &quot;:&quot; suite</span><br><span class="line">               &quot;finally&quot; &quot;:&quot; suite</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;division by zero&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with_stmt ::=  &quot;with&quot; with_item (&quot;,&quot; with_item)* &quot;:&quot; suite</span><br><span class="line">with_item ::=  expression [&quot;as&quot; target]</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h3><p><code>pass</code> 用以占位</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">arg</span>): <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="array-array"><a href="#array-array" class="headerlink" title="array.array"></a><code>array.array</code></h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"></span><br><span class="line">arr = array(<span class="string">&#x27;i&#x27;</span>, [<span class="number">14</span>, <span class="number">21</span>, <span class="number">5</span>, <span class="number">29</span>])</span><br></pre></td></tr></table></figure><table><thead><tr><th>类型码</th><th>C类型</th><th>Python 类型</th><th>最小字节大小</th></tr></thead><tbody><tr><td><code>&#39;b&#39;</code></td><td><code>signed char</code></td><td><code>int</code></td><td>1</td></tr><tr><td><code>&#39;B&#39;</code></td><td><code>unsigned char</code></td><td><code>int</code></td><td>1</td></tr><tr><td><code>&#39;u&#39;</code></td><td><code>wchar_t</code></td><td>Unicode 字符</td><td>2</td></tr><tr><td><code>&#39;h&#39;</code></td><td><code>signed short</code></td><td><code>int</code></td><td>2</td></tr><tr><td><code>&#39;H&#39;</code></td><td><code>unsigned short</code></td><td><code>int</code></td><td>2</td></tr><tr><td><code>&#39;i&#39;</code></td><td><code>signed int</code></td><td><code>int</code></td><td>2</td></tr><tr><td><code>&#39;I&#39;</code></td><td><code>unsigned int</code></td><td><code>int</code></td><td>2</td></tr><tr><td><code>&#39;l&#39;</code></td><td><code>signed long</code></td><td><code>int</code></td><td>4</td></tr><tr><td><code>&#39;L&#39;</code></td><td><code>unsigned long</code></td><td><code>int</code></td><td>4</td></tr><tr><td><code>&#39;q&#39;</code></td><td><code>signed long long</code></td><td><code>int</code></td><td>8</td></tr><tr><td><code>&#39;Q&#39;</code></td><td><code>unsigned long long</code></td><td><code>int</code></td><td>8</td></tr><tr><td><code>&#39;f&#39;</code></td><td><code>float</code></td><td><code>float</code></td><td>4</td></tr><tr><td><code>&#39;d&#39;</code></td><td><code>double</code></td><td><code>float</code></td><td>8</td></tr></tbody></table><h3 id="collections-namedtuple"><a href="#collections-namedtuple" class="headerlink" title="collections.namedtuple"></a><code>collections.namedtuple</code></h3><p><code>collections.namedtuple(typename, field_names, *, rename=False, defaults=None, module=None)</code></p><ul><li>返回一个新的元组子类，名为 typename 。这个新的子类用于创建类元组的对象，可以通过字段名来获取属性值，同样也可以通过索引和迭代获取值</li><li>创建一个具名元组需要两个参数，一个是类名，另一个是类的各个字段的名字。后者可以是由数个字符串组成的可迭代对象，或者是由空格分隔开的字段名组成的字符串</li><li>存放在对应字段里的数据要以一串参数的形式传入到构造函数中（注意，元组的构造函数却只接受单一的可迭代对象）</li><li>可以通过字段名或者位置来获取一个字段的信息</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line">Point = collections.namedtuple(<span class="string">&#x27;point&#x27;</span>, [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">a = Point(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(a)                <span class="comment"># point(x=0, y=1)</span></span><br><span class="line"><span class="built_in">print</span>(Point._fields)    <span class="comment"># (&#x27;x&#x27;, &#x27;y&#x27;)</span></span><br><span class="line"></span><br><span class="line">b = Point._make((<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(b)                <span class="comment"># point(x=1, y=2)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b._asdict())      <span class="comment"># &#123;&#x27;x&#x27;: 1, &#x27;y&#x27;: 2&#125;</span></span><br></pre></td></tr></table></figure><p><code>namedtuple</code> 专有属性</p><ul><li><code>_fields</code> 属性是一个包含这个类所有字段名称的元组</li><li>用 <code>_make()</code> 通过接受一个可迭代对象来生成这个类的一个实例，它的作用跟 <code>Class(*data)</code> 是一样的</li><li><code>_asdict()</code> 把具名元组以 <code>collections.OrderedDict</code> 的形式返回</li></ul><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="属性与实例化"><a href="#属性与实例化" class="headerlink" title="属性与实例化"></a>属性与实例化</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A simple example class&quot;&quot;&quot;</span></span><br><span class="line">    i = <span class="number">12345</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(MyClass.i) <span class="comment"># 12345</span></span><br><span class="line"><span class="built_in">print</span>(MyClass.f) <span class="comment"># &lt;function MyClass.f at 0x7f1c6e4b7280&gt;</span></span><br><span class="line"><span class="built_in">print</span>(MyClass.__doc__) <span class="comment"># A simple example class</span></span><br></pre></td></tr></table></figure><p>类的属性引用: <code>obj.name</code>，类无 <code>name</code> 属性时，引发 <code>AttributeError</code></p><p>类的实例化: <code>x = MyClass()</code></p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>当定义了 <code>__init__()</code>时，类的实例化操作会自动为新创建的类实例发起调用 <code>__init__()</code></p><p>init 函数还可以提供额外参数，例如</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    self.data = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">    self.x = x</span><br><span class="line">    self.y = y</span><br></pre></td></tr></table></figure><h3 id="实例对象"><a href="#实例对象" class="headerlink" title="实例对象"></a>实例对象</h3><p>实例对象的唯一操作是属性引用；有两种有效的属性名称：数据属性和方法</p><p>实例变量用于每个实例的唯一数据，而类变量用于类的所有实例共享的属性和方法</p><p>如果同样的属性名称同时出现在实例和类中，则属性查找会优先选择实例</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># count += 1        # 错误，访问不存在的局部变量</span></span><br><span class="line">        <span class="comment"># self.count += 1   # 此变量为实例变量，先访问类变量 count 后创建实例变量 self.count</span></span><br><span class="line">        MyClass.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">x = MyClass()</span><br><span class="line"><span class="built_in">print</span>(MyClass.count)        <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(x.count)              <span class="comment"># 1 访问类变量</span></span><br><span class="line">x.count = <span class="number">100</span>               <span class="comment"># 创建实例变量</span></span><br><span class="line"><span class="built_in">print</span>(x.count)              <span class="comment"># 100 访问实例变量</span></span><br></pre></td></tr></table></figure><p>方法的第一个参数常常被命名为 <code>self</code>。 这也不过就是一个约定: <code>self</code> 这一名称在 Python 中绝对没有特殊含义</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>:</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">self</span>):</span><br><span class="line">        self.i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">self</span>):</span><br><span class="line">        Base.func2(self)</span><br><span class="line">        <span class="built_in">print</span>(self.i)</span><br><span class="line"></span><br><span class="line">x = Derived()</span><br><span class="line"><span class="built_in">print</span>(x.i)                          <span class="comment"># 0 继承变量</span></span><br><span class="line">x.func()                            <span class="comment"># 0 继承函数</span></span><br><span class="line">x.func2()                           <span class="comment"># 1 覆盖函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(x, Base))          <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(x, Derived))       <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">issubclass</span>(Base, Derived))    <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">issubclass</span>(Derived, Base))    <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p><code>isinstance(obj, class)</code> 仅会在 <code>obj.__class__</code> 为 <code>class</code> 或某个派生自 <code>class</code> 的类时为 <code>True</code></p><p><code>issubclass(classA, classB)</code> 在 <code>classA</code> 为 <code>classB</code> 的子类是为 <code>True</code></p><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p><code>class Derived(Base1, Base2, ...)</code></p><p>从父类所继承属性的操作是深度优先、从左至右的，当层次结构中存在重叠时不会在同一个类中搜索两次</p><p>如果某一属性在 DerivedClassName 中未找到，则会到 Base1 中搜索它，然后（递归地）到 Base1 的基类中搜索，如果在那里未找到，再到 Base2 中搜索，依此类推</p><p>真实情况比这个更复杂一些；方法解析顺序会动态改变以支持对 <code>super()</code> 的协同调用。<br>这种方式在某些其他多重继承型语言中被称为后续方法调用，它比单继承型语言中的 <code>super</code> 调用更强大。</p><h3 id="特殊属性"><a href="#特殊属性" class="headerlink" title="特殊属性"></a>特殊属性</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>__init__</code></td><td>构造函数</td></tr><tr><td><code>__next__</code></td><td>从容器中返回下一项</td></tr><tr><td><code>__iter__</code></td><td>返回迭代器对象本身</td></tr><tr><td><code>__dict__</code></td><td>一个字典或其他类型的映射对象，用于存储对象的（可写）属性</td></tr><tr><td><code>__getitem__</code></td><td>调用此方法以实现 <code>self[key]</code> 的求值</td></tr><tr><td><code>__getattr__</code></td><td>此方法应当返回（找到的）属性值或是引发一个 <code>AttributeError</code> 异常</td></tr><tr><td><code>__del__</code></td><td>析构函数</td></tr><tr><td><code>__call__</code></td><td>此方法会在实例作为一个函数被“调用”时被调用</td></tr><tr><td><code>__class__</code></td><td>类实例所属的类</td></tr><tr><td><code>__bases__</code></td><td>由类对象的基类所组成的元组</td></tr><tr><td><code>__name__</code></td><td>类、函数、方法、描述器或生成器实例的名称</td></tr><tr><td><code>__repr__</code></td><td>输出一个对象的“官方”字符串表示。如果可能，这应类似一个有效的 Python 表达式，能被用来重建具有相同取值的对象</td></tr><tr><td><code>__str__</code></td><td>生成一个对象的“非正式”或格式良好的字符串表示；内置类型 <code>object</code> 所定义的默认实现会调用 <code>object.__repr__()</code></td></tr><tr><td><code>__bool__</code></td><td>调用此方法以实现真值检测以及内置的 <code>bool()</code> 操作</td></tr></tbody></table><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x = <span class="number">0</span>, y = <span class="number">0</span></span>):</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;MyClass(<span class="subst">&#123;self.x&#125;</span>, <span class="subst">&#123;self.y&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;self.x = <span class="subst">&#123;self.x&#125;</span>, self.y = <span class="subst">&#123;self.y&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;__del__ called&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">if</span> key == <span class="number">0</span> <span class="keyword">or</span> key == <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> self.x</span><br><span class="line">        <span class="keyword">elif</span> key == <span class="number">1</span> <span class="keyword">or</span> key == <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> self.y</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__bool__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.x != <span class="number">0</span> <span class="keyword">or</span> self.y != <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(MyClass.__class__)    <span class="comment"># &lt;class &#x27;type&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(MyClass.__name__)     <span class="comment"># MyClass</span></span><br><span class="line"><span class="built_in">print</span>(MyClass.__bases__)    <span class="comment"># (&lt;class &#x27;object&#x27;&gt;,)</span></span><br><span class="line"></span><br><span class="line">x = MyClass()</span><br><span class="line"><span class="built_in">print</span>(x)                    <span class="comment"># self.x = 0, self.y = 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(x))               <span class="comment"># self.x = 0, self.y = 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">repr</span>(x))              <span class="comment"># MyClass(0, 0)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(x))              <span class="comment"># False</span></span><br><span class="line">x(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(x)                    <span class="comment"># self.x = 1, self.y = 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(x))              <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x[<span class="string">&quot;x&quot;</span>], x[<span class="string">&quot;y&quot;</span>])       <span class="comment"># 1 2</span></span><br><span class="line"></span><br><span class="line">x = <span class="literal">None</span>                    <span class="comment"># __del__ called</span></span><br></pre></td></tr></table></figure><h2 id="ast-抽象语法树"><a href="#ast-抽象语法树" class="headerlink" title="ast - 抽象语法树"></a>ast - 抽象语法树</h2><p>ast 模块帮助 Python 程序处理 Python 语法的抽象语法树</p><h3 id="节点与函数"><a href="#节点与函数" class="headerlink" title="节点与函数"></a>节点与函数</h3><p><code>ast.AST</code> AST 节点类的基类</p><p><code>ast.parse()</code> 把源码解析为AST节点</p><p><code>ast.unparse()</code> 反解析为字符串</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"></span><br><span class="line">stat = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">i = 1</span></span><br><span class="line"><span class="string">i += 1</span></span><br><span class="line"><span class="string">import ABC</span></span><br><span class="line"><span class="string">from X import x</span></span><br><span class="line"><span class="string">def func():</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">tree = ast.parse(stat)</span><br><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> tree.body:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(node, ast.Assign):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ast.Assign&quot;</span>, end = <span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> target <span class="keyword">in</span> node.targets:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(target, ast.Name):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;target.id is <span class="subst">&#123;target.<span class="built_in">id</span>&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(node, ast.Expr):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ast.Expr&quot;</span>, end = <span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(node, ast.Import) <span class="keyword">or</span> <span class="built_in">isinstance</span>(node, ast.ImportFrom):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ast.Import or ast.ImportFrom&quot;</span>, end = <span class="string">&#x27;: &#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(node)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(ast.unparse(node))</span><br></pre></td></tr></table></figure><h3 id="ast-NodeTransformer"><a href="#ast-NodeTransformer" class="headerlink" title="ast.NodeTransformer"></a>ast.NodeTransformer</h3><p><code>NodeTransformer</code> 将遍历抽象语法树并使用 <code>visitor</code> 方法的返回值去替换或移除旧节点。<br>如果 <code>visitor</code> 方法的返回值为 <code>None</code> , 则该节点将从其位置移除，否则将替换为返回值。当返回值是原始节点时，无需替换</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RewriteName</span>(ast.NodeTransformer):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data = [], prefix = <span class="string">&#x27;self&#x27;</span></span>):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.prefix = prefix</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">visit_Name</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="keyword">if</span> node.<span class="built_in">id</span> <span class="keyword">in</span> self.data:</span><br><span class="line">            <span class="keyword">return</span> ast.copy_location(ast.Name(<span class="built_in">id</span> = <span class="string">f&#x27;<span class="subst">&#123;self.prefix&#125;</span>.<span class="subst">&#123;node.<span class="built_in">id</span>&#125;</span>&#x27;</span>, ctx = node.ctx), node)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> ast.Subscript(</span><br><span class="line">                value = ast.Name(<span class="built_in">id</span> = <span class="string">&#x27;data&#x27;</span>, ctx = ast.Load()),</span><br><span class="line">                <span class="built_in">slice</span> = ast.Constant(value = node.<span class="built_in">id</span>),</span><br><span class="line">                ctx = node.ctx</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stat = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">i = 1</span></span><br><span class="line"><span class="string">a = i + 1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">tree = ast.parse(stat)</span><br><span class="line">tree = ast.fix_missing_locations(RewriteName(data = <span class="string">&quot;i&quot;</span>).visit(tree))</span><br><span class="line"><span class="built_in">print</span>(ast.unparse(tree))</span><br><span class="line"></span><br><span class="line"><span class="comment"># self.i = 1</span></span><br><span class="line"><span class="comment"># data[&#x27;a&#x27;] = self.i + 1</span></span><br></pre></td></tr></table></figure><h2 id="Beautiful-Soup"><a href="#Beautiful-Soup" class="headerlink" title="Beautiful Soup"></a>Beautiful Soup</h2><p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/">Beautiful Soup</a> 是第三方库，使用前需安装(<code>bs4</code>)</p><p>Beautiful Soup 用于从 HTML 或 XML 文件中提取数据</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html_doc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(soup.prettify())</span><br><span class="line"><span class="built_in">print</span>(soup.head, soup.title)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第一个 tag</span></span><br><span class="line"><span class="built_in">print</span>(soup.body.a)</span><br><span class="line"><span class="comment"># 搜索所有的 tag</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> soup.find_all(<span class="string">&quot;a&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">head = soup.head</span><br><span class="line">title = head.contents[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(title)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> title.children:</span><br><span class="line">    <span class="built_in">print</span>(child)</span><br><span class="line"></span><br><span class="line">sisters = soup.select(<span class="string">&quot;.sister&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> sister <span class="keyword">in</span> sisters:</span><br><span class="line">    <span class="built_in">print</span>(sister.get_text())</span><br></pre></td></tr></table></figure><h2 id="json-yaml-模块"><a href="#json-yaml-模块" class="headerlink" title="json, yaml 模块"></a>json, yaml 模块</h2><p>yaml 不属于 python 标准库，需安装 <a href="https://pypi.org/project/PyYAML/">pyyaml</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;a&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;b&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&quot;c&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="string">&quot;d&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;e&quot;</span>: <span class="literal">None</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(json.dumps(data))</span><br><span class="line"><span class="comment"># 紧凑编码</span></span><br><span class="line"><span class="comment"># &#123;&quot;a&quot;: 0, &quot;b&quot;: true, &quot;c&quot;: [1, 2, 3], &quot;d&quot;: &#123;&quot;e&quot;: null&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(json.loads(<span class="string">&#x27;[&quot;foo&quot;, &#123;&quot;bar&quot;:[&quot;baz&quot;, null, 1.0, 2]&#125;]&#x27;</span>))</span><br><span class="line"><span class="comment"># 解码</span></span><br><span class="line"><span class="comment"># [&#x27;foo&#x27;, &#123;&#x27;bar&#x27;: [&#x27;baz&#x27;, None, 1.0, 2]&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(yaml.dump(data))</span><br><span class="line"><span class="comment"># 编码</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a: 0</span></span><br><span class="line"><span class="string">b: true</span></span><br><span class="line"><span class="string">c:</span></span><br><span class="line"><span class="string">- 1</span></span><br><span class="line"><span class="string">- 2</span></span><br><span class="line"><span class="string">- 3</span></span><br><span class="line"><span class="string">d:</span></span><br><span class="line"><span class="string">  e: null</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(yaml.load(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a: 1</span></span><br><span class="line"><span class="string">b:</span></span><br><span class="line"><span class="string">  c: 3</span></span><br><span class="line"><span class="string">  d: 4</span></span><br><span class="line"><span class="string">e:</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, Loader = yaml.Loader))</span><br><span class="line"><span class="comment"># 解码</span></span><br><span class="line"><span class="comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: &#123;&#x27;c&#x27;: 3, &#x27;d&#x27;: 4&#125;, &#x27;e&#x27;: None&#125;</span></span><br></pre></td></tr></table></figure><p>json 命令行工具</p><p><code>python -m json.tool</code> 读取标准输入，验证 json 并美化输出</p><h2 id="logging-日志库"><a href="#logging-日志库" class="headerlink" title="logging 日志库"></a>logging 日志库</h2><h3 id="记录器对象-logging-Logger"><a href="#记录器对象-logging-Logger" class="headerlink" title="记录器对象 logging.Logger"></a>记录器对象 <code>logging.Logger</code></h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line">handler = logging.StreamHandler()</span><br><span class="line">logger.addHandler(handler)</span><br><span class="line"></span><br><span class="line">logger.setLevel(logging.INFO)</span><br><span class="line"><span class="comment"># 日志等级小于 level 会被忽略</span></span><br><span class="line"><span class="comment"># 创建记录器时，级别默认设置为 NOTSET （当记录器是根记录器时，将处理所有消息；如果记录器不是根记录器，则将委托给父级）</span></span><br><span class="line"><span class="comment"># 根记录器的默认级别为 WARNING</span></span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">&quot;debug log&quot;</span>)</span><br><span class="line">logger.info(<span class="string">&quot;info log&quot;</span>)</span><br><span class="line">logger.warning(<span class="string">&quot;warning log&quot;</span>)</span><br><span class="line">logger.error(<span class="string">&quot;error log&quot;</span>)</span><br><span class="line">logger.critical(<span class="string">&quot;critical log&quot;</span>)</span><br><span class="line"></span><br><span class="line">logger.log(logging.WARNING, <span class="string">&quot;warning log&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(logger.isEnabledFor(logging.DEBUG))</span><br><span class="line"><span class="built_in">print</span>(logger.isEnabledFor(logging.INFO))</span><br></pre></td></tr></table></figure><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><table><thead><tr><th>级别</th><th>数值</th></tr></thead><tbody><tr><td>CRITICAL</td><td>50</td></tr><tr><td>ERROR</td><td>40</td></tr><tr><td>WARNING</td><td>30</td></tr><tr><td>INFO</td><td>20</td></tr><tr><td>DEBUG</td><td>10</td></tr><tr><td>NOTSET</td><td>0</td></tr></tbody></table><h3 id="处理器对象-logging-Handler"><a href="#处理器对象-logging-Handler" class="headerlink" title="处理器对象 logging.Handler"></a>处理器对象 <code>logging.Handler</code></h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">handler = logging.FileHandler(<span class="string">&#x27;output.log&#x27;</span>)</span><br><span class="line">handler.setLevel(logging.ERROR)</span><br><span class="line">logger.addHandler(handler)</span><br><span class="line">logger.setLevel(logging.INFO)</span><br><span class="line"><span class="comment"># 日志级别为 error</span></span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">&quot;debug log&quot;</span>)</span><br><span class="line">logger.info(<span class="string">&quot;info log&quot;</span>)</span><br><span class="line">logger.warning(<span class="string">&quot;warning log&quot;</span>)</span><br><span class="line">logger.error(<span class="string">&quot;error log&quot;</span>)</span><br><span class="line">logger.critical(<span class="string">&quot;critical log&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="格式器对象-logging-Formatter"><a href="#格式器对象-logging-Formatter" class="headerlink" title="格式器对象 logging.Formatter"></a>格式器对象 <code>logging.Formatter</code></h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line">logger.setLevel(logging.INFO)</span><br><span class="line">formatter = logging.Formatter(fmt=<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>, datefmt=<span class="string">&#x27;%Y/%m/%d %H:%M:%S&#x27;</span>)</span><br><span class="line">handler = logging.StreamHandler()</span><br><span class="line">handler.setFormatter(formatter)</span><br><span class="line">logger.addHandler(handler)</span><br><span class="line">logger.info(<span class="string">&quot;info log&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="requests-http-库"><a href="#requests-http-库" class="headerlink" title="requests - http 库"></a>requests - http 库</h2><p><a href="https://docs.python-requests.org/zh_CN/latest/">requests</a> 不是 Python 标准库，使用前需安装</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送请求</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">r = requests.post(url, data = &#123;<span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;value&#x27;</span>&#125;)</span><br><span class="line">r = requests.put(url, data = &#123;<span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;value&#x27;</span>&#125;)</span><br><span class="line">r = requests.delete(url)</span><br><span class="line">r = requests.head(url)</span><br><span class="line">r = requests.options(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 响应</span></span><br><span class="line">r.url                       <span class="comment"># 编码后的 url</span></span><br><span class="line">r.status_code               <span class="comment"># 状态码</span></span><br><span class="line">r.headers[<span class="string">&#x27;content-type&#x27;</span>]   <span class="comment"># 响应头</span></span><br><span class="line">r.encoding                  <span class="comment"># 编码</span></span><br><span class="line">r.text                      <span class="comment"># 响应内容</span></span><br><span class="line">r._content                  <span class="comment"># 二进制响应内容</span></span><br><span class="line">r.json()                    <span class="comment"># json 响应内容，json 解码失败则抛异常</span></span><br><span class="line">r.raw                       <span class="comment"># 原始响应内容</span></span><br><span class="line">r.cookies                   <span class="comment"># cookies</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求头</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;my-app/0.0.1&#x27;</span>&#125;</span><br><span class="line">r = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送 cookies</span></span><br><span class="line">cookies = <span class="built_in">dict</span>(cookies_are=<span class="string">&#x27;working&#x27;</span>)</span><br><span class="line">r = requests.get(url, cookies=cookies)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 超时</span></span><br><span class="line">requests.get(url, timeout=<span class="number">0.001</span>)</span><br></pre></td></tr></table></figure><h2 id="sqlite3"><a href="#sqlite3" class="headerlink" title="sqlite3"></a>sqlite3</h2><p>Python 内置了 sqlite3 数据库的接口</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">cur.execute(<span class="string">&#x27;&#x27;&#x27;create table IF NOT EXISTS user</span></span><br><span class="line"><span class="string">                (name string, passwd string, email string, PRIMARY KEY (name))&#x27;&#x27;&#x27;</span>)</span><br><span class="line">cur.execute(<span class="string">&#x27;&#x27;&#x27;insert into user values(&#x27;abc&#x27;, &#x27;123&#x27;, &#x27;abc@example.com&#x27;)&#x27;&#x27;&#x27;</span>)</span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">t = (<span class="string">&#x27;abc&#x27;</span>, )</span><br><span class="line">cur.execute(<span class="string">&#x27;&#x27;&#x27;select * from user where name = ?&#x27;&#x27;&#x27;</span>, t)</span><br><span class="line"><span class="built_in">print</span>(cur.fetchone())</span><br><span class="line"></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h2 id="url-处理模块"><a href="#url-处理模块" class="headerlink" title="url 处理模块"></a>url 处理模块</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">urllib.request.urlopen(url, data=<span class="literal">None</span>, [timeout, ]*, cafile=<span class="literal">None</span>, capath=<span class="literal">None</span>, cadefault=<span class="literal">False</span>, context=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># url 为字符串或 Request 对象</span></span><br><span class="line"><span class="comment"># 对于 HTTP 与 HTTPS url，返回 http.client.HTTPResponse 对象</span></span><br><span class="line"></span><br><span class="line">urllib.parse.urlparse(urlstring, scheme=<span class="string">&#x27;&#x27;</span>, allow_fragments=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 解析 url</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://liph.ink&#x27;</span></span><br><span class="line"><span class="keyword">with</span> request.urlopen(url) <span class="keyword">as</span> res:</span><br><span class="line">    <span class="built_in">print</span>(res.status, res.reason)</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> res.getheaders():</span><br><span class="line">        <span class="built_in">print</span>(k, v)</span><br><span class="line"></span><br><span class="line">    data = res.read()</span><br><span class="line">    <span class="built_in">print</span>(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">req = request.Request(url)</span><br><span class="line"><span class="keyword">with</span> request.urlopen(req) <span class="keyword">as</span> res:</span><br><span class="line">    <span class="built_in">print</span>(res.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line">user = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">passwd = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">data = parse.urlencode([</span><br><span class="line">    (<span class="string">&#x27;username&#x27;</span>, user),</span><br><span class="line">    (<span class="string">&#x27;passwd&#x27;</span>, passwd)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">req = request.Request(url)</span><br><span class="line">req.add_header(<span class="string">&#x27;User-Agent&#x27;</span>, <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> request.urlopen(req, data = data.encode(<span class="string">&#x27;utf-8&#x27;</span>)) <span class="keyword">as</span> res:</span><br><span class="line">    <span class="built_in">print</span>(res.status, res.reason)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的随机数生成</title>
      <link href="/codes/random-in-cplusplus/"/>
      <url>/codes/random-in-cplusplus/</url>
      
        <content type="html"><![CDATA[<h2 id="来自C库的函数"><a href="#来自C库的函数" class="headerlink" title="来自C库的函数"></a>来自C库的函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RAND_MAX            <span class="comment">// implementation defined, &gt;= 32767</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">rand</span><span class="params">()</span>;                 <span class="comment">// return [0, RAND_MAX]</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">srand</span><span class="params">(<span class="type">unsigned</span> seed)</span>;  <span class="comment">// seeds the pseudo-random number generator used by rand()</span></span><br></pre></td></tr></table></figure><p>在调用任何<code>srand</code>前调用<code>rand</code>，相当于<code>srand(1)</code>。</p><p>C++中的<code>rand, srand</code>同C语言，定义在<code>namespace std</code>中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RAND_MAX</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> std &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rand</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">srand</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> seed)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>rand</code>采用的算法是实现定义的，因此尽管以同一个seed值播种，不同系统下<code>rand()</code>得到的结果也可能不同。</p><p><code>rand</code>被视为低质量随机数生成器，尽量避免在严肃的随机数生成场合使用。</p><p><code>32767 == INT16_MAX</code>，该值与C++标准规定的int最小位宽一致，实现中，一般<code>RAND_MAX == INT_MAX</code>。</p><p><code>rand()</code>不保证可重入或者线程安全，可重入的版本是POSIX中的<a href="https://linux.die.net/man/3/rand_r">rand_r</a>。</p><h2 id="C-库"><a href="#C-库" class="headerlink" title="C++库&lt;random&gt;"></a>C++库<code>&lt;random&gt;</code></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> std &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">random_device</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> result_type = <span class="type">unsigned</span> <span class="type">int</span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="keyword">constexpr</span> result_type <span class="title">min</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> numeric_limits&lt;result_type&gt;::<span class="built_in">min</span>(); &#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="keyword">constexpr</span> result_type <span class="title">max</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> numeric_limits&lt;result_type&gt;::<span class="built_in">max</span>(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">random_device</span>() : <span class="built_in">random_device</span>(<span class="comment">/*implementation-defined*/</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">random_device</span><span class="params">(<span class="type">const</span> string&amp; token)</span></span>;</span><br><span class="line">    <span class="built_in">random_device</span>(<span class="type">const</span> random_device&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span>=(<span class="type">const</span> random_device&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">result_type <span class="title">operator</span><span class="params">()</span><span class="params">()</span></span>; <span class="comment">// generating</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">entropy</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> default_random_engine = <span class="comment">/*implementation-defined*/</span>; <span class="comment">// predefined random number generator</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">IntType</span> = <span class="type">int</span>&gt;</span><br><span class="line"><span class="keyword">class</span> uniform_int_distribution &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> result_type = IntType;</span><br><span class="line">    <span class="keyword">using</span> param_type = <span class="comment">/*the type of the parameter set*/</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">uniform_int_distribution</span>() : <span class="built_in">uniform_int_distribution</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">uniform_int_distribution</span><span class="params">(IntType a, IntType b = numeric_limits&lt;IntType&gt;::max())</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">uniform_int_distribution</span><span class="params">(<span class="type">const</span> param_type&amp; parm)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// generating</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">URBG</span>&gt;</span><br><span class="line">    <span class="function">result_type <span class="title">operator</span><span class="params">()</span><span class="params">(URBG&amp; g)</span></span>;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">URBG</span>&gt;</span><br><span class="line">    <span class="function">result_type <span class="title">operator</span><span class="params">()</span><span class="params">(URBG&amp; g, <span class="type">const</span> param_type&amp; parm)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">result_type <span class="title">a</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">result_type <span class="title">b</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">param_type <span class="title">param</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">param</span><span class="params">(<span class="type">const</span> param_type&amp; parm)</span></span>;</span><br><span class="line">    <span class="function">result_type <span class="title">min</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">result_type <span class="title">max</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// namespace std</span></span><br></pre></td></tr></table></figure><p><code>std::random_device</code>通常仅用于播种伪随机数生成器。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">std::random_device rd;</span><br><span class="line"><span class="function">std::default_random_engine <span class="title">re</span><span class="params">(rd())</span></span>;</span><br><span class="line"><span class="function">std::uniform_int_distribution&lt;<span class="type">int</span>&gt; <span class="title">distrib</span><span class="params">(<span class="number">0</span>, <span class="number">9</span>)</span></span>;</span><br><span class="line"><span class="keyword">auto</span> rand = std::<span class="built_in">bind</span>(distrib, re);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">rand</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Possible output:</span></span><br><span class="line"><span class="comment">// 0 9 3 8 1 7 8 5 8 4</span></span><br></pre></td></tr></table></figure><h2 id="随机排序"><a href="#随机排序" class="headerlink" title="随机排序"></a>随机排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">random_sort</span><span class="params">(T arr[], <span class="type">int</span> n, std::function&lt;<span class="type">int</span>()&gt; rand = std::rand)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="built_in">rand</span>() % (n - i);</span><br><span class="line">        std::<span class="built_in">swap</span>(arr[j], arr[n - i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">RandomIt</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">random_sort</span><span class="params">(RandomIt first, RandomIt last, std::function&lt;<span class="type">int</span>()&gt; rand = std::rand)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">random_sort</span>(first, std::<span class="built_in">distance</span>(first, last), rand);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">nullptr</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> print(arr)                           \</span></span><br><span class="line"><span class="meta">    for (int i : arr) std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>; \</span></span><br><span class="line"><span class="meta">    std::cout &lt;&lt; std::endl</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    <span class="built_in">random_sort</span>(arr, n);</span><br><span class="line">    <span class="built_in">print</span>(arr);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">random_sort</span>(arr, arr + n);</span><br><span class="line">    <span class="built_in">print</span>(arr);</span><br><span class="line"></span><br><span class="line">    std::random_device rd;</span><br><span class="line">    <span class="function">std::default_random_engine <span class="title">re</span><span class="params">(rd())</span></span>;</span><br><span class="line">    std::uniform_int_distribution&lt;<span class="type">int</span>&gt; distrib;</span><br><span class="line">    <span class="keyword">auto</span> rand = std::<span class="built_in">bind</span>(distrib, re);</span><br><span class="line">    <span class="built_in">random_sort</span>(arr, n, rand);</span><br><span class="line">    <span class="built_in">print</span>(arr);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">random_sort</span>(arr, arr + n, rand);</span><br><span class="line">    <span class="built_in">print</span>(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spec 换行符问题</title>
      <link href="/codes/shell-spec-newline/"/>
      <url>/codes/shell-spec-newline/</url>
      
        <content type="html"><![CDATA[<p>最近把Windows上的文件上传到Linux上执行时报错</p><p><code>$&#39;\r&#39;: command not found</code></p><p>于是果断加了个 <code>find . -name &#39;*.sh&#39; -exec dos2unix &#123;&#125; \;</code></p><p>但是问题并没有解决，报错的地方似乎不在我的shell脚本里，而且这条语句是个空行，没法直接搜到出错的地方</p><p>后来发现我的spec文件里 <code>%prep</code> 部分是空的（语句被注释了），出于强迫症心理，我把 <code>%prep</code>移除了，然后发现除了<code>$&#39;\r&#39;: command not found</code>的报错，还有这样一条</p><p><code>mkdir ********\r</code></p><p>看来问题出在spec文件，<code>dos2unix xxx.spec</code>，问题解决</p><p>总结，下次执行脚本遇到<code>\r</code> 问题，除了shell文件，还要注意下<code>spec</code> 文件。当然，生产环境是Linux就没这么多屁事了…</p>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码的品味：字符串join实现</title>
      <link href="/codes/string-join/"/>
      <url>/codes/string-join/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Container</span>&gt;</span><br><span class="line"><span class="function">std::string <span class="title">join</span><span class="params">(<span class="type">const</span> Container&amp; data, <span class="type">const</span> std::string&amp; sep = <span class="string">&quot; &quot;</span>)</span> </span>&#123;</span><br><span class="line">    std::ostringstream os;</span><br><span class="line">    std::string tmp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = data.<span class="built_in">begin</span>(); it != data.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">        os &lt;&lt; tmp &lt;&lt; *it;</span><br><span class="line">        tmp = sep;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> os.<span class="built_in">str</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Container</span>&gt;</span><br><span class="line"><span class="function">std::string <span class="title">join2</span><span class="params">(<span class="type">const</span> Container&amp; data, <span class="type">const</span> std::string&amp; sep = <span class="string">&quot; &quot;</span>)</span> </span>&#123;</span><br><span class="line">    std::ostringstream os;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = data.<span class="built_in">begin</span>(); it != data.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">        os &lt;&lt; ((it == data.<span class="built_in">begin</span>()) ? <span class="string">&quot;&quot;</span> : sep) &lt;&lt; *it;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> os.<span class="built_in">str</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Container</span>&gt;</span><br><span class="line"><span class="function">std::string <span class="title">join3</span><span class="params">(<span class="type">const</span> Container&amp; data, <span class="type">const</span> std::string&amp; sep = <span class="string">&quot; &quot;</span>)</span> </span>&#123;</span><br><span class="line">    std::ostringstream os;</span><br><span class="line">    <span class="type">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = data.<span class="built_in">begin</span>(); it != data.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!first) &#123;</span><br><span class="line">            os &lt;&lt; sep;</span><br><span class="line">        &#125;</span><br><span class="line">        first = <span class="literal">false</span>;</span><br><span class="line">        os &lt;&lt; *it;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> os.<span class="built_in">str</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span> *arr, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) std::cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot;,\n&quot;</span>[i == n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt; data&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">join</span>(data, <span class="string">&quot;,&quot;</span>) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">join2</span>(data, <span class="string">&quot;,&quot;</span>) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">join3</span>(data, <span class="string">&quot;,&quot;</span>) &lt;&lt; std::endl;</span><br><span class="line">    <span class="built_in">print</span>(data.<span class="built_in">data</span>(), data.<span class="built_in">size</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tcmalloc coredump</title>
      <link href="/codes/tcmalloc-coredump/"/>
      <url>/codes/tcmalloc-coredump/</url>
      
        <content type="html"><![CDATA[<p>堆栈如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#0  tcmalloc::SLL_Next (t=0x0) at src/linked_list.h:45</span><br><span class="line">#1  tcmalloc::SLL_PopRange (end=&lt;synthetic pointer&gt;, start=&lt;synthetic pointer&gt;, N=32, head=0x3363920) at src/linked_list.h:88</span><br><span class="line">#2  tcmalloc::ThreadCache::FreeList::PopRange (end=&lt;synthetic pointer&gt;, start=&lt;synthetic pointer&gt;, N=32, this=0x3363920)</span><br><span class="line">    at src/thread_cache.h:238</span><br><span class="line">#3  tcmalloc::ThreadCache::ReleaseToCentralCache (this=this@entry=0x3363880, src=src@entry=0x3363920, cl=cl@entry=5, N=3025)</span><br><span class="line">    at src/thread_cache.cc:201</span><br><span class="line">#4  0x00007f61a6413226 in tcmalloc::ThreadCache::Scavenge (this=0x3363880) at src/thread_cache.cc:224</span><br><span class="line">#5  0x00007f619a8f3a35 in exit () from /lib64/libc.so.6</span><br><span class="line">#6  0x00007f619a8dcd27 in __libc_start_main () from /lib64/libc.so.6</span><br><span class="line">#7  0x00000000004f579d in _start ()</span><br></pre></td></tr></table></figure><p>结论：用户代码产生 double free 或其他内存问题，可使用ASAN进行排查。</p>]]></content>
      
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>std::thread, std::async 中的异常</title>
      <link href="/codes/thread-async/"/>
      <url>/codes/thread-async/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fn</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span>) <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(<span class="string">&quot;n &lt; 1&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fn</span>(n - <span class="number">1</span>) + <span class="built_in">fn</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">auto</span> fut = std::<span class="built_in">async</span>(fn, <span class="number">20</span>);</span><br><span class="line">        std::cout &lt;&lt; std::boolalpha;</span><br><span class="line">        <span class="type">int</span> res = fut.<span class="built_in">get</span>();</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;fn(20) = &quot;</span> &lt;&lt; res &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">auto</span> fut2 = std::<span class="built_in">async</span>(fn, <span class="number">-20</span>);</span><br><span class="line">        res = fut2.<span class="built_in">get</span>();</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;fn(-20) = &quot;</span> &lt;&lt; res &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="built_in">catch</span> (<span class="type">const</span> std::invalid_argument&amp; e) &#123;</span><br><span class="line">        std::cerr &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="function">std::thread <span class="title">t</span><span class="params">(fn, <span class="number">-20</span>)</span></span>;</span><br><span class="line">        t.<span class="built_in">join</span>();</span><br><span class="line">    &#125; <span class="built_in">catch</span> (<span class="type">const</span> std::invalid_argument&amp; e) &#123;  <span class="comment">// can not catch</span></span><br><span class="line">        std::cerr &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，不能捕获<code>std::thread</code>中抛出的异常。但<code>std::async</code>可以通过<code>std::promise/std::future</code>设置&#x2F;捕获异常。</p><p>另外，<code>std::async</code>未必真的异步，如有必要可以指定<code>std::launch::async</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> F, <span class="keyword">typename</span>... Ts&gt;</span><br><span class="line"><span class="keyword">inline</span> std::future&lt;<span class="keyword">typename</span> std::result_of&lt;<span class="built_in">F</span>(Ts...)&gt;::type&gt; <span class="built_in">reallyAsync</span>(F&amp;&amp; f, Ts&amp;&amp;...params) &#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">async</span>(std::launch::async, std::forward&lt;F&gt;(f), std::forward&lt;Ts&gt;(params)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++14</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> F, <span class="keyword">typename</span>... Ts&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">auto</span> <span class="title">reallyAsync</span><span class="params">(F&amp;&amp; f, Ts&amp;&amp;...params)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">async</span>(std::launch::async, std::forward&lt;F&gt;(f), std::forward&lt;Ts&gt;(params)...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cplusplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tmux</title>
      <link href="/codes/tmux/"/>
      <url>/codes/tmux/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/tmux/tmux/wiki/Getting-Started">https://github.com/tmux/tmux/wiki/Getting-Started</a></p><h2 id="tmux-的功能"><a href="#tmux-的功能" class="headerlink" title="tmux 的功能"></a>tmux 的功能</h2><ol><li>分屏: 多个窗口，窗口分屏</li><li>detach, attach</li><li>高效操作文本</li><li>日志记录</li><li>屏幕共享</li></ol><h2 id="命令速记"><a href="#命令速记" class="headerlink" title="命令速记"></a>命令速记</h2><p>$ for shell, ! for PREFIX(default CTRL-b), : for command mode</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">$ tmux -V                       # display version</span><br><span class="line"></span><br><span class="line"># session</span><br><span class="line">$ tmux new-session              # Creates a new session without a name. Can be shortened to tmux new or simply tmux.</span><br><span class="line">$ tmux new -s &lt;name&gt;            # Create named session</span><br><span class="line">$ tmux new -s &lt;s&gt; -n &lt;w&gt;        # Create named session and name first window</span><br><span class="line">$ tmux new -s &lt;name&gt; -d         # create new session, detach</span><br><span class="line">! d                             # detach session</span><br><span class="line">$ tmux list-sessions            # list sessions, shortened to tmux ls</span><br><span class="line">$ tmux attach                   # attach session, shortened to tmux at</span><br><span class="line">$ tmux attach -t &lt;session&gt;      # attach session</span><br><span class="line">$ tmux kill-session -t &lt;s&gt;      # kill session</span><br><span class="line">! (                             # goto previous session</span><br><span class="line">! )                             # goto next session</span><br><span class="line">! s                             # list sessions</span><br><span class="line"></span><br><span class="line"># window</span><br><span class="line">! c                             # create new window</span><br><span class="line">! ,                             # rename window</span><br><span class="line">! .                             # move window</span><br><span class="line">! n                             # next window</span><br><span class="line">! p                             # previous window</span><br><span class="line">! [0-9]                         # go to window</span><br><span class="line">! w                             # select window</span><br><span class="line">! f                             # find and select window</span><br><span class="line">! &amp;                             # close window</span><br><span class="line">! !                             # Turning a Pane into a Window</span><br><span class="line">: join-pane -s &lt;src&gt; -t &lt;dst&gt;   # take &lt;src&gt; join to &lt;dst&gt;, default is current window</span><br><span class="line">                                # the form of &lt;src&gt; is `[session_name]:[window].[pane]`</span><br><span class="line">: move-window -s &lt;src&gt; -t &lt;dst&gt; # move window</span><br><span class="line"></span><br><span class="line"># pane</span><br><span class="line">! %                             # vertically split</span><br><span class="line">! &quot;                             # horizontally split</span><br><span class="line">! q                             # display pane number</span><br><span class="line">! o                             # move to pane</span><br><span class="line">! &lt;UP&gt; &lt;DOWN&gt; &lt;LEFT&gt; &lt;RIGHT&gt;    # move to pane</span><br><span class="line">! &lt;SPACE&gt;                       # change pane layout</span><br><span class="line">! z                             # Maximizing and Restoring Panes</span><br><span class="line">! x                             # close pane, close window if no pane left</span><br><span class="line">$ exit                          # close pane, close window if no pane left, close session if no window left</span><br><span class="line"></span><br><span class="line">! :                             # command mode</span><br><span class="line">: new-window -n &lt;w&gt; &quot;proc&quot;      # create named window run proc</span><br><span class="line"></span><br><span class="line">! ?                             # help</span><br></pre></td></tr></table></figure><h2 id="tmux-alias"><a href="#tmux-alias" class="headerlink" title="tmux alias"></a>tmux alias</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new-session -&gt; new</span><br><span class="line">new-window  -&gt; neww</span><br></pre></td></tr></table></figure><h2 id="tmuxinator"><a href="#tmuxinator" class="headerlink" title="tmuxinator"></a>tmuxinator</h2><p><a href="https://github.com/tmuxinator/tmuxinator">https://github.com/tmuxinator/tmuxinator</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tmuxinator open &lt;name&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tmuxinator &lt;name&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tmuxinator debug &lt;name&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Copy-Mode"><a href="#Copy-Mode" class="headerlink" title="Copy Mode"></a>Copy Mode</h2><p>~ for copy mode</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">! [                             # copy mode</span><br><span class="line">~ ENTER                         # quit copy mode</span><br><span class="line">~ w b &lt;C-f&gt; &lt;C-b&gt; h j k l f F G / ? n N     # the same as vi, use `g` goto top</span><br><span class="line">~ SPACE &lt;select text&gt; ENTER     # copy text</span><br><span class="line">! ]                             # paste text</span><br><span class="line">: capture-pane                  # capture pane into paste buffer</span><br><span class="line">$ tmux show-buffer              # display buffer</span><br><span class="line">$ tmux save-buffer &lt;path&gt;       # save buffer to file</span><br><span class="line">$ tmux list-buffers             # list buffers</span><br><span class="line">$ tmux choose-buffer            # choose buffer</span><br><span class="line">! =                             # choose buffer</span><br></pre></td></tr></table></figure><h2 id="Pair-Programming"><a href="#Pair-Programming" class="headerlink" title="Pair Programming"></a>Pair Programming</h2><h3 id="Pairing-with-a-Shared-Account"><a href="#Pairing-with-a-Shared-Account" class="headerlink" title="Pairing with a Shared Account"></a>Pairing with a Shared Account</h3><ol><li><code>tmux new-session -s Pairing</code></li><li><code>tmux attach -t Pairing</code></li></ol><h3 id="Using-a-Shared-Account-and-Grouped-Sessions"><a href="#Using-a-Shared-Account-and-Grouped-Sessions" class="headerlink" title="Using a Shared Account and Grouped Sessions"></a>Using a Shared Account and Grouped Sessions</h3><ol><li><code>tmux new-session -s groupedsession</code></li><li><code>tmux new-session -t groupedsession -s mysession</code></li></ol><h3 id="tmate"><a href="#tmate" class="headerlink" title="tmate"></a><a href="https://tmate.io/">tmate</a></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tmate</span><br><span class="line">$ tmux show-messages        # Displays a log of messages in the current window</span><br></pre></td></tr></table></figure><h3 id="Pairing-with-Separate-Accounts-and-Sockets"><a href="#Pairing-with-Separate-Accounts-and-Sockets" class="headerlink" title="Pairing with Separate Accounts and Sockets"></a>Pairing with Separate Accounts and Sockets</h3><ol><li><code>tmux -S &lt;socket-path&gt;</code></li><li><code>tmux -S &lt;socket-path&gt; attach</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">groupadd tmux-shared</span><br><span class="line">usermod -aG tmux-shared user1</span><br><span class="line">usermod -aG tmux-shared user2</span><br><span class="line"></span><br><span class="line">tmux -S /tmp/tmux-shared</span><br><span class="line">chgrp tmux-shared /tmp/tmux-shared</span><br><span class="line">tmux -S /tmp/tmux-shared attach</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来玩UNO吧！</title>
      <link href="/codes/uno/"/>
      <url>/codes/uno/</url>
      
        <content type="html"><![CDATA[<p>之前写了个终端版的单机UNO(<a href="https://github.com/liphx/code/blob/main/src/cplusplus/tools/uno.cpp">代码</a>)，<br>并且添加了一些额外功能。</p><p>在这里想说的是这样一个编程问题(后面发现这个问题叫Multiple Dispatch)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Card</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">match</span><span class="params">(<span class="type">const</span> Card *)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumCard</span> : <span class="keyword">public</span> Card;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ActionCard</span> : <span class="keyword">public</span> Card;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WildCard</span> : <span class="keyword">public</span> Card;</span><br></pre></td></tr></table></figure><p><code>Card</code>是卡牌的基类，UNO中有三种卡牌，每种卡牌都需要实现能否“匹配”其他卡牌，我想通过直接调用<br><code>card-&gt;match(other)</code> 来判断当前卡牌是否满足要求（<code>card, other</code>都是<code>Card *</code>类型）。为了避免<code>switch (type)</code>的逻辑，<br>我的方法如下</p><ol><li><p>每个子类都实现以下成员函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Card</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">match</span><span class="params">(<span class="type">const</span> Card *)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">match</span><span class="params">(<span class="type">const</span> NumCard *)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">match</span><span class="params">(<span class="type">const</span> ActionCard *)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">match</span><span class="params">(<span class="type">const</span> WildCard *)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>子类的<code>match(const Card *)</code>调用参数的<code>match</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumCard</span> : <span class="keyword">public</span> Card &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">match</span><span class="params">(<span class="type">const</span> Card *other)</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> other-&gt;<span class="built_in">match</span>(<span class="keyword">this</span>); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>子类分别实现与其他卡牌的匹配逻辑</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumCard</span> : <span class="keyword">public</span> Card &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">match</span><span class="params">(<span class="type">const</span> WildCard *)</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">    <span class="comment">// 这里实际上是WildCard-&gt;match(NumCard)，因此万能牌可以匹配任意牌</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>然后就可以愉快的写UNO逻辑了。</p><p>Multiple Dispatch相关参考</p><ul><li><a href="https://en.wikipedia.org/wiki/Multiple_dispatch">https://en.wikipedia.org/wiki/Multiple_dispatch</a></li><li><a href="https://eli.thegreenplace.net/2016/a-polyglots-guide-to-multiple-dispatch/">https://eli.thegreenplace.net/2016/a-polyglots-guide-to-multiple-dispatch/</a></li><li><a href="https://stackoverflow.com/questions/1749534/multiple-dispatch-in-c">https://stackoverflow.com/questions/1749534/multiple-dispatch-in-c</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VIM - Vi IMproved</title>
      <link href="/codes/vim/"/>
      <url>/codes/vim/</url>
      
        <content type="html"><![CDATA[<h2 id="vim-命令行"><a href="#vim-命令行" class="headerlink" title="vim 命令行"></a>vim 命令行</h2><ul><li><p><code>vim [file ..]</code></p><ul><li><p><code>vim</code></p><pre><code>不带任何参数, 开始一个空白的缓冲区</code></pre></li><li><p><code>vim -</code></p><pre><code>从标准输入读取文本</code></pre></li><li><p><code>vim file</code></p><pre><code>编辑单个文件, 为避免以`-` 开头的文件被识别成命令行选项, 需在文件名前加 `--`, 例如文件名是`-txt`, 输入`vim -- -txt`</code></pre></li><li><p><code>vim file1 file2 ...</code></p><pre><code>编辑多个文件, 读入缓冲区列表, 其中第一个文件会成为当前文件</code></pre></li></ul></li><li><p>定位</p><ul><li><p><code>vim file +[n]</code></p><pre><code>光标定位在第 n 行, 如果不加 n 则定位在最后一行</code></pre></li><li><p><code>vim file +/&#123;pat&#125;</code></p><pre><code>从光标位置(viminfo 中上次的位置)开始匹配 `pat` 并定位到这一行, `vim +5 +/abc` 从第5行开始匹配 abc</code></pre></li></ul></li><li><p>模式</p><ul><li><p><code>vim -e</code></p><pre><code>以 Ex 模式启动</code></pre></li><li><p><code>vim -R</code></p><pre><code>以只读模式启动</code></pre></li></ul></li><li><p>执行</p><ul><li><p><code>vim +&#123;cmd&#125;</code></p></li><li><p><code>vim -c &#123;cmd&#125;</code></p><pre><code>读入第一个文件后执行 `cmd`</code></pre></li><li><p><code>vim --cmd &#123;cmd&#125;</code></p><pre><code>在处理任何 `vimrc` 文件之前执行命令 `cmd`</code></pre></li><li><p><code>vim -u &#123;vimrc&#125;</code></p><pre><code>读入文件 `vimrc` 执行初始化, `-u` 参数导致开启 `compatible`</code></pre></li><li><p><code>vim -u NONE</code></p><pre><code>跳过所有文件和环境变量的初始化</code></pre></li><li><p><code>vim -u NORC</code></p><pre><code>同 `NONE`,  但不跳过插件的载入</code></pre></li></ul></li><li><p>兼容</p><ul><li><p><code>vim -C</code></p><pre><code>兼容模式</code></pre></li><li><p><code>vim -N</code></p><pre><code>不兼容模式</code></pre></li></ul></li></ul><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><ol><li><p><code>Normal mode</code></p><p> 也称<code>Command mode</code>, 进入 vim 的初始模式, 其他模式下输入 <code>ESC</code> 回到 <code>Normal</code>, <code>Ex</code> 模式下输入 <code>vi[sual]</code> 回到 <code>Normal</code></p></li><li><p><code>Visual mode</code></p><p> 可视模式, <code>Normal</code> 下输入 <code>v</code>, <code>V</code> 或 <code>&lt;C-V&gt;</code> 进入</p></li><li><p><code>Select mode</code></p><p> 选择模式, <code>Visual</code> 下输入 <code>&lt;C-G&gt;</code> 进入, 选择模式下, 输入字符将删除高亮的文本并替换成新的字符, 进入 <code>Insert</code></p></li><li><p><code>Insert mode</code></p><p>插入模式, <code>Normal</code> 下输入 <code>i</code>, <code>I</code>, <code>a</code>, <code>A</code>, <code>o</code>, <code>O</code>, <code>s</code>, <code>S</code>  等进入</p></li><li><p><code>Command-line mode</code></p><p> 命令行模式, <code>Normal</code> 下输入 <code>:</code>, <code>/</code>, <code>?</code>, <code>!</code> 进入, 执行完 <code>Ex</code> 命令后回到 <code>Normal</code></p></li><li><p><code>Ex mode</code></p><p>类似 <code>Command-line</code>, 执行完 <code>Ex</code> 命令后还在 <code>Ex</code> 模式, <code>Normal</code> 下输入 <code>Q</code> 或 <code>gQ</code> 进入</p></li></ol><h2 id="Normal-模式"><a href="#Normal-模式" class="headerlink" title="Normal 模式"></a><code>Normal</code> 模式</h2><h3 id="移动与滚屏"><a href="#移动与滚屏" class="headerlink" title="移动与滚屏"></a>移动与滚屏</h3><table><thead><tr><th>输入</th><th>效果</th></tr></thead><tbody><tr><td><code>h</code> <code>←</code></td><td>向左移动</td></tr><tr><td><code>j</code> <code>↓</code></td><td>向下移动</td></tr><tr><td><code>k</code> <code>↑</code></td><td>向上移动</td></tr><tr><td><code>l</code> <code>→</code></td><td>向右移动</td></tr><tr><td><code>gk</code> <code>gj</code></td><td>屏幕行上下移动</td></tr><tr><td><code>w</code></td><td>移动到下一个单词开头</td></tr><tr><td><code>W</code></td><td>移动到下一个字串开头</td></tr><tr><td><code>b</code></td><td>反向移动一个单词至开头</td></tr><tr><td><code>B</code></td><td>反向移动一个字串至开头</td></tr><tr><td><code>e</code></td><td>移动到单词末尾</td></tr><tr><td><code>E</code></td><td>移动到字串末尾</td></tr><tr><td><code>ge</code></td><td>反向移动到单词末尾</td></tr><tr><td><code>gE</code></td><td>反向移动到字串末尾</td></tr><tr><td><code>nw</code> <code>ne</code></td><td>移动n(输入的数字)个单词</td></tr><tr><td><code>0</code> <code>&lt;Home&gt;</code></td><td>移动到行首</td></tr><tr><td><code>$</code> <code>&lt;End&gt;</code></td><td>移动到行尾</td></tr><tr><td><code>g0</code></td><td>移动到屏幕行行首</td></tr><tr><td><code>^</code></td><td>移动到行首第一个非空字符</td></tr><tr><td><code>g^</code></td><td>移动到屏幕行行首第一个非空字符</td></tr><tr><td><code>g$</code></td><td>移动到屏幕行行尾</td></tr><tr><td><code>3$</code></td><td>移动到下面第3行行尾，本行是第一行</td></tr><tr><td><code>3^</code></td><td>依然作用于本行, 计数对 <code>^</code> 无效</td></tr><tr><td><code>&lt;C-U&gt;</code></td><td>上移半屏</td></tr><tr><td><code>&lt;C-D&gt;</code></td><td>下移半屏</td></tr><tr><td><code>&lt;C-Y&gt;</code></td><td>上移一行</td></tr><tr><td><code>&lt;C-E&gt;</code></td><td>下移一行</td></tr><tr><td><code>&lt;C-B&gt;</code></td><td>上移一屏</td></tr><tr><td><code>&lt;C-F&gt;</code></td><td>下移一屏</td></tr><tr><td><code>zz</code></td><td>将当前行置于屏幕中央</td></tr><tr><td><code>zt</code></td><td>将当前行置顶</td></tr><tr><td><code>zb</code></td><td>将当前行置底</td></tr></tbody></table><p>一些解释</p><ul><li><p>实际行与屏幕行</p><p>  对于很长的一行文字, 屏幕上一行显示不全的情况, 一行实际行就对应多行屏幕行, <code>set number</code> 显示的行号就是实际行</p></li><li><p>单词与字串</p><ul><li>单词(<code>word</code>): 以非字母分隔(一串没有标点的中文为一个单词)</li><li>字串(<code>WORD</code>): 以空白符分隔</li></ul></li><li><p>移动行与滚屏</p><p>  移动行就是在行之间移动, 如无必要, 不会移动屏幕, 例如当前屏幕下显示 <code>20 - 60</code> 行, 从第 25 行移动到 31 行并不会移动屏幕,<br>  但移动到第 61 行会导致屏幕下移一行; 移屏同理, 必要时才会导致行的移动</p></li></ul><h3 id="插入文本"><a href="#插入文本" class="headerlink" title="插入文本"></a>插入文本</h3><table><thead><tr><th>输入</th><th>效果</th></tr></thead><tbody><tr><td><code>i</code></td><td>在光标处插入文本</td></tr><tr><td><code>ni</code></td><td>在光标处插入字符n次</td></tr><tr><td><code>I</code></td><td>在行首插入文本, 即 <code>^i</code></td></tr><tr><td><code>a</code></td><td>在光标后插入文本</td></tr><tr><td><code>na</code></td><td>在光标后插入字符n次</td></tr><tr><td><code>A</code></td><td>在行尾添加文本, 即 <code>$a</code></td></tr><tr><td><code>o</code></td><td>在光标下行插入一行并进入插入模式</td></tr><tr><td><code>O</code></td><td>在光标上行插入一行并进入插入模式</td></tr><tr><td><code>r</code></td><td>在光标处替换字符</td></tr><tr><td><code>R</code></td><td>在光标处连续替换字符</td></tr><tr><td><code>c&lt;CR&gt;</code></td><td>删除当前行并(在下一行)进入插入模式</td></tr><tr><td><code>S</code> <code>^c</code></td><td>删除当前行并进入插入模式</td></tr><tr><td><code>cl</code> <code>s</code></td><td>删除一个字符并进入插入模式</td></tr><tr><td><code>ce</code> <code>cw</code></td><td>删除一个单词并进入插入模式</td></tr><tr><td><code>c$</code> <code>C</code></td><td>删除至行尾并进入插入模式</td></tr></tbody></table><h3 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h3><table><thead><tr><th>输入</th><th>效果</th></tr></thead><tbody><tr><td><code>x</code></td><td>删除光标所在位置的字符</td></tr><tr><td><code>dw</code></td><td>从当前光标当前位置直到下一个单词起始处</td></tr><tr><td><code>de</code></td><td>从当前光标当前位置直到单词末尾</td></tr><tr><td><code>d$</code> <code>D</code></td><td>从当前光标删除到行末</td></tr><tr><td><code>dnw</code></td><td>删除n个单词</td></tr><tr><td><code>dd</code></td><td>删除整行</td></tr><tr><td><code>ndd</code></td><td>删除n行</td></tr><tr><td><code>daw</code></td><td>删除光标所在的单词及其后的空格</td></tr><tr><td><code>J</code></td><td>删除两行之间的换行符</td></tr><tr><td><code>y</code></td><td>在可视状态下输入y进行复制</td></tr><tr><td><code>yw</code> <code>yy</code></td><td>复制单词&#x2F;整行</td></tr><tr><td><code>p</code></td><td>在光标后粘贴</td></tr><tr><td><code>P</code></td><td>在光标前粘贴</td></tr><tr><td><code>gp</code> <code>gP</code></td><td>同 <code>p</code> <code>P</code>, 但光标停留在新文本之后</td></tr></tbody></table><p>一些解释</p><ol><li>vim 术语: <code>delete</code>, <code>yank</code> 与 <code>put</code></li></ol><h3 id="文本对象"><a href="#文本对象" class="headerlink" title="文本对象"></a>文本对象</h3><h4 id="操作分隔符"><a href="#操作分隔符" class="headerlink" title="操作分隔符"></a>操作分隔符</h4><table><thead><tr><th>文本对象</th><th>选择区域</th></tr></thead><tbody><tr><td>a) 或 ab</td><td>一对圆括号(parentheses)</td></tr><tr><td>i) 或 ib</td><td>圆括号(parentheses)内部</td></tr><tr><td>a} 或 aB</td><td>一对花括号{braces}</td></tr><tr><td>i} 或 iB</td><td>花括号{braces}内部</td></tr><tr><td>a]</td><td>一对方括号[brackets]</td></tr><tr><td>i]</td><td>方括号[brackets]内部</td></tr><tr><td>a&gt;</td><td>一对尖括号</td></tr><tr><td>i&gt;</td><td>尖括号内部</td></tr><tr><td>a’</td><td>一对单引号’single quotes’</td></tr><tr><td>i’</td><td>单引号’single quotes’内部</td></tr><tr><td>a”</td><td>一对双引号”double quotes”</td></tr><tr><td>i”</td><td>双引号”double quotes”内部</td></tr><tr><td>a`</td><td>一对反引号</td></tr><tr><td>i`</td><td>反引号内部</td></tr><tr><td>at</td><td>一对XML标签<xml>tags</xml></td></tr><tr><td>it</td><td>XML标签内部</td></tr></tbody></table><h4 id="操作文本块"><a href="#操作文本块" class="headerlink" title="操作文本块"></a>操作文本块</h4><table><thead><tr><th>文本对象</th><th>选择范围</th></tr></thead><tbody><tr><td>iw</td><td>当前单词</td></tr><tr><td>aw</td><td>当前单词及一个空格</td></tr><tr><td>iW</td><td>当前字串</td></tr><tr><td>aW</td><td>当前字串及一个空格</td></tr><tr><td>is</td><td>当前句子</td></tr><tr><td>as</td><td>当前句子及一个空格</td></tr><tr><td>ip</td><td>当前段落</td></tr><tr><td>ap</td><td>当前段落及一个空行</td></tr></tbody></table><h3 id="文本可视"><a href="#文本可视" class="headerlink" title="文本可视"></a>文本可视</h3><table><thead><tr><th>输入</th><th>效果</th></tr></thead><tbody><tr><td><code>viw</code></td><td>可视一个单词</td></tr><tr><td><code>v</code></td><td>面向字符的可视模式</td></tr><tr><td><code>V</code></td><td>面向行的可视模式</td></tr><tr><td><code>&lt;C-v&gt;</code></td><td>面向列块的可视模式</td></tr><tr><td><code>gv</code></td><td>重选上次的高亮选区</td></tr><tr><td><code>vi&#125;</code></td><td>高亮选中{}内部的文本</td></tr><tr><td><code>u</code></td><td>撤消最后执行的命令</td></tr><tr><td><code>U</code></td><td>撤消对整行的修改, <code>U</code> 本身是一个修改动作，因此用 <code>u</code> 来撤销 <code>U</code></td></tr><tr><td><code>&lt;C-R&gt;</code></td><td>撤销之前的撤销,取消一个 <code>u</code></td></tr></tbody></table><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><table><thead><tr><th>输入</th><th>效果</th></tr></thead><tbody><tr><td><code>&lt;C-g&gt;</code></td><td>显示当前编辑的文件名和文件中光标位置</td></tr><tr><td><code>G</code></td><td>跳到文件最后一行</td></tr><tr><td><code>gg</code></td><td>跳到文件第一行</td></tr><tr><td><code>nG</code></td><td>跳到 n 行</td></tr><tr><td><code>50%</code></td><td>移动到中间的位置</td></tr><tr><td><code>90%</code></td><td>移动到90%的位置</td></tr><tr><td><code>&lt;C-o&gt;</code></td><td>回到之前的位置</td></tr><tr><td><code>&lt;C-i&gt;</code> <code>&lt;Tab&gt;</code></td><td>回到新的位置</td></tr><tr><td><code>m&#123;a-zA-Z&#125;</code></td><td>设置标记位，小写位置标记只在每个缓冲区里局部可见，而大写位置标记则全局可见</td></tr><tr><td><code>&#39;&#123;mark&#125;</code></td><td>命令跳到位置标记所在行，并把光标置于该行第一个非空白字符上</td></tr><tr><td>`{mark}</td><td>命令把光标移动到设置此位置标记时光标所在之处，它同时恢复行、列的位置</td></tr><tr><td><code>%</code></td><td><code>()[]&#123;&#125;</code> 间跳转</td></tr><tr><td><code>(</code></td><td>跳转到上一句开头</td></tr><tr><td><code>)</code></td><td>跳转到下一句开头</td></tr><tr><td><code>&#123;</code></td><td>跳转到上一段开头</td></tr><tr><td><code>&#125;</code></td><td>跳转到下一段开头</td></tr><tr><td><code>H/M/L</code></td><td>跳到屏幕最上方&#x2F;正中间&#x2F;最下方</td></tr><tr><td><code>gf</code></td><td>跳转到光标下的文件名, <code>:set suffixesadd+=</code> 可以加上扩展名</td></tr><tr><td><code>&lt;C-]&gt;</code></td><td>跳转到光标下关键字的定义之处</td></tr></tbody></table><p>自动位置标记</p><table><thead><tr><th>位置标记</th><th>跳转到</th></tr></thead><tbody><tr><td>``</td><td>当前文件中上次跳转动作之前的位置</td></tr><tr><td>‘’</td><td>同``</td></tr><tr><td>`.</td><td>上次修改的地方</td></tr><tr><td>`^</td><td>上次插入的地方</td></tr><tr><td>`[</td><td>上次修改或复制的起始位置</td></tr><tr><td>`]</td><td>上次修改或复制的结束位置</td></tr><tr><td>`&lt;</td><td>上次高亮选区的起始位置</td></tr><tr><td>`&gt;</td><td>上次高亮选区的结束位置</td></tr></tbody></table><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><table><thead><tr><th>输入</th><th>效果</th></tr></thead><tbody><tr><td><code>&gt;&gt;</code> <code>&gt;0</code></td><td>当前行缩进</td></tr><tr><td><code>&gt;n</code></td><td>当前行及以下n行缩进</td></tr><tr><td><code>&gt;G</code></td><td>当前行至文档尾缩进</td></tr><tr><td><code>&lt;</code></td><td>减少缩进</td></tr><tr><td><code>=</code></td><td>自动缩进</td></tr><tr><td><code>gg=G</code></td><td>自动缩进整个文件</td></tr></tbody></table><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><table><thead><tr><th>输入</th><th>效果</th></tr></thead><tbody><tr><td><code>ZZ</code></td><td>保存后退出</td></tr><tr><td><code>ga</code></td><td>显示字符编码</td></tr><tr><td><code>q:</code> <code>q/</code></td><td>命令行窗口</td></tr><tr><td><code>@:</code></td><td>重复上次的 Ex 命令</td></tr><tr><td><code>&lt;C-^&gt;</code></td><td>切换当前文件与轮换文件</td></tr><tr><td><code>.</code></td><td>重复上一次命令, 移动命令不会重复</td></tr><tr><td>n<code>&lt;C-a&gt;</code></td><td>对数字执行 +n 操作</td></tr><tr><td>n<code>&lt;C-x&gt;</code></td><td>对数字执行 -n 操作</td></tr><tr><td><code>g~</code></td><td>切换大小写</td></tr><tr><td><code>gu</code></td><td>切换成小写</td></tr><tr><td><code>gU</code></td><td>切换成大写</td></tr></tbody></table><h2 id="Visual-模式"><a href="#Visual-模式" class="headerlink" title="Visual 模式"></a><code>Visual</code> 模式</h2><table><thead><tr><th>输入</th><th>效果</th></tr></thead><tbody><tr><td><code>o</code></td><td>切换高亮选区的活动端</td></tr></tbody></table><h2 id="Ex-命令"><a href="#Ex-命令" class="headerlink" title="Ex 命令"></a>Ex 命令</h2><p><code>Normal</code> 下输入 <code>:</code> 或 <code>Q</code> 进入相应的模式, 可以执行 <code>Ex</code> 命令(输入完命令后回车执行)</p><p>输入 <code>ESC</code> 或 <code>&lt;C-[&gt;</code> 可以回到正常模式或者撤消一个不想输入或部分完整的命令</p><table><thead><tr><th>命令</th><th>效果</th></tr></thead><tbody><tr><td><code>[range]delete [x]</code></td><td>删除指定范围内的行[到寄存器x中]</td></tr><tr><td><code>[range]yank [x]</code></td><td>复制指定范围的行[到寄存器x中]</td></tr><tr><td><code>[line]put [x]</code></td><td>在指定行后粘贴寄存器x中的内容</td></tr><tr><td><code>[range]copy &#123;address&#125;</code></td><td>把指定范围内的行拷贝到{address} 所指定的行之下, 不使用寄存器 简写为 :t, :co</td></tr><tr><td><code>[range]move &#123;address&#125;</code></td><td>把指定范围内的行移动到{address}所指定的行之下 简写为 :m</td></tr><tr><td><code>[range]join</code></td><td>连接指定范围内的行</td></tr><tr><td><code>[range]normal &#123;commands&#125;</code></td><td>对指定范围内的每一行执行普通模式命令{commands}</td></tr><tr><td><code>[range]substitute/&#123;pattern&#125;/ &#123;string&#125;/[flags]</code></td><td>把指定范围内出现{pattern}的地方替换为{string}</td></tr><tr><td><code>[range]global/&#123;pattern&#125;/[cmd]</code></td><td>对指定范围内匹配{pattern}的所有行，在其上执行Ex 命令{cmd}</td></tr><tr><td><code>[range]print[flags]</code></td><td>显示 [range] 范围里的行 (缺省是当前行) 简写为 :p</td></tr><tr><td><code>&lt;C-f&gt;</code></td><td>切换到命令行窗口</td></tr><tr><td><code>!&#123;cmd&#125;</code></td><td>执行 shell 命令, 命令行中 <code>%</code> 代表当前文件名</td></tr><tr><td><code>read !&#123;cmd&#125;</code></td><td>把{cmd}命令的输出读入当前缓冲区中, 缓冲区即文件在内存中的映像</td></tr><tr><td><code>write !&#123;cmd&#125;</code></td><td>把缓冲区内容作为指定{cmd}的标准输入</td></tr><tr><td><code>pwd</code></td><td>打印当前目录</td></tr><tr><td><code>reg &quot;&#123;reg&#125;</code></td><td>查看寄存器内容</td></tr></tbody></table><p>一些解释</p><ul><li><code>range: &#123;start,end&#125;</code><ul><li><code>0</code> 虚拟行，位于文件第一行上方</li><li><code>1</code> 文件的第一行</li><li><code>.</code> 当前行</li><li><code>$</code> 最后一行</li><li><code>%</code> 所有行</li><li><code>start</code>, <code>end</code> 可以是数字也可以是模式</li><li><code>&#123;address&#125;+n</code> 地址偏移</li><li><code>&#39;m</code> 包含位置标记m的行</li><li><code>&#39;&lt;</code> 高亮选区的起始行</li><li><code>&#39;&gt;</code> 高亮选区的结束行</li></ul></li></ul><h3 id="缓冲区操作"><a href="#缓冲区操作" class="headerlink" title="缓冲区操作"></a>缓冲区操作</h3><table><thead><tr><th>输入</th><th>效果</th></tr></thead><tbody><tr><td><code>w[rite]</code></td><td>把缓冲区内容写入磁盘</td></tr><tr><td><code>w file</code></td><td>保存在文件 file 中</td></tr><tr><td><code>q[uit]!</code></td><td>丢弃修改退出</td></tr><tr><td><code>e[dit]!</code></td><td>把磁盘文件内容读入缓冲区(即回滚所做修改)</td></tr><tr><td><code>qa[ll]!</code></td><td>关闭所有窗口，摒弃修改而无需警告</td></tr><tr><td><code>wa[ll]!</code></td><td>把所有改变的缓冲区写入磁盘</td></tr><tr><td><code>wq</code></td><td>保存后退出</td></tr><tr><td><code>ls</code></td><td>查看缓冲区列表</td></tr><tr><td><code>bnext</code></td><td>切换到列表中的下一个缓冲区</td></tr><tr><td><code>bnext!</code></td><td>强制(未保存)切换缓冲区</td></tr><tr><td><code>bprev</code></td><td>切换到列表中的上一个缓冲区</td></tr><tr><td><code>bfirst</code></td><td>切换到列表中的第一个缓冲区</td></tr><tr><td><code>blast</code></td><td>切换到列表中的最后一个缓冲区</td></tr><tr><td><code>buffer N</code> <code>:buffer &#123;bufname&#125;</code></td><td>直接跳转到一个缓冲区</td></tr><tr><td><code>bdelete N1 N2 N3</code> <code>:N,M bdelete</code></td><td>删除缓冲区</td></tr><tr><td><code>args</code></td><td>查看参数列表, [] 指明了参数列表中的哪个文件是活动文件</td></tr><tr><td><code>args &#123;arglist&#125;</code></td><td>设置参数列表</td></tr><tr><td><code>argdo</code></td><td>在列表中的每个缓冲区上执行同一条命令</td></tr><tr><td><code>e[dit] file</code></td><td>通过文件的绝对路径或相对路径来打开文件</td></tr><tr><td><code>find</code></td><td>查找打开文件</td></tr><tr><td><code>set path+=</code></td><td>设置 find 路径</td></tr><tr><td><code>r file</code></td><td>将file文件的内容插入进来</td></tr><tr><td><code>changes</code></td><td>查看改变列表</td></tr><tr><td><code>jumps</code></td><td>查看跳转列表</td></tr><tr><td><code>marks</code></td><td>查看标记列表</td></tr></tbody></table><p><code>ls</code>  的输出中</p><ul><li><code>%</code> 指明哪个缓冲区在当前窗口中可见</li><li><code>#</code> 代表轮换文件</li><li><code>+</code> 表示这个缓冲区被修改过了</li><li><code>a</code> 表示活动缓冲区</li><li><code>h</code> 表示隐藏缓冲区</li></ul><h2 id="Insert-模式"><a href="#Insert-模式" class="headerlink" title="Insert 模式"></a><code>Insert</code> 模式</h2><table><thead><tr><th>输入</th><th>效果</th></tr></thead><tbody><tr><td><code>ESC</code> <code>&lt;C-[&gt;</code></td><td>回到正常模式</td></tr><tr><td><code>&lt;C-o&gt;</code></td><td>插入-普通模式: 执行一次普遍模式命令后回到插入模式</td></tr><tr><td><code>&lt;C-r&gt;=</code></td><td>把执行的结果插入到文档的当前位置</td></tr><tr><td><code>&lt;C-v&gt;&#123;code&#125;</code></td><td>用字符编码插入非常用字符</td></tr><tr><td>退格键 <code>&lt;C-h&gt;</code></td><td>删除前一个字符</td></tr><tr><td><code>&lt;C-w&gt;</code></td><td>删除前一个单词</td></tr><tr><td><code>&lt;C-u&gt;</code></td><td>删至行首</td></tr><tr><td><code>&lt;C-r&gt;&#123;register&#125;</code></td><td>插入模式下粘贴寄存器中的文本, + 寄存器保存剪切板中的内容</td></tr><tr><td><code>&lt;C-r&gt;&lt;C-p&gt;&#123;register&#125;</code> 按原义插入寄存器内的文本，并修正任何不必要的缩进</td><td></td></tr></tbody></table><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><table><thead><tr><th>寄存器</th><th>说明</th></tr></thead><tbody><tr><td><code>&quot;&quot;</code></td><td>无名寄存器, “”p 等同 p</td></tr><tr><td><code>&quot;&#123;register&#125;</code></td><td>有名寄存器 <code>[a–zA-Z]</code>, 使用小写有名寄存器会覆盖寄存器的内容，大写有名寄存器则添加到后面</td></tr><tr><td><code>&quot;0</code></td><td>复制专用寄存器</td></tr><tr><td><code>&quot;_</code></td><td>黑洞寄存器</td></tr><tr><td><code>&quot;+</code></td><td>X11剪贴板，用剪切、复制与粘贴命令操作</td></tr><tr><td><code>&quot;*</code></td><td>X11主剪贴板, 用鼠标中键操作</td></tr><tr><td><code>&quot;=</code></td><td>表达式寄存器</td></tr></tbody></table><table><thead><tr><th>只读寄存器</th><th>内容</th></tr></thead><tbody><tr><td>“%</td><td>当前文件名</td></tr><tr><td>“#</td><td>轮换文件名</td></tr><tr><td>“.</td><td>上次插入的文本</td></tr><tr><td>“:</td><td>上次执行的Ex命令</td></tr><tr><td>“&#x2F; (可用 :let 修改)</td><td>上次查找的模式</td></tr></tbody></table><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p><code>/string + 回车</code> 向下查找 要查找特殊字符需要用’&#39;来转义 <code>.*[]^%/\?~$</code><br><code>?string + 回车</code> 逆向查找<br><code>n</code> 查找下一个<br><code>3n</code> 查找下面第3个<br><code>N</code> 查找上一个<br><code>/&lt;CR&gt;</code> 正向跳转至相同模式的下一处匹配<br><code>?&lt;CR&gt;</code> 反向跳转至相同模式的上一处匹配<br><code>%</code> 匹配括号，在<code>([&#123;&#125;])</code> 处按<code>%</code>会跳到匹配的括号处(再按一次就会回到之前的括号处)<br><code>f&#123;char&#125;</code> 到右侧第 [count] 次出现的字符 {char}。光标放在 {char}上<br><code>t&#123;char&#125;</code> 同f。光标放在 {char}左侧<br><code>F&#123;char&#125;</code> 同f。在左侧匹配<br><code>T&#123;char&#125;</code> 同f。在左侧匹配,光标放在{char}右侧<br><code>;</code> 重复上次的 f、t、F 或者 T 命令 [count] 次<br><code>,</code> 反方向重复上次的 f、t、F 或者 T 命令 [count] 次<br><code>f F t T ; ,</code> 只作用于本行<br><code>*</code> 正向查找第 [count] 次出现距离当前光标最近的单词的地方<br><code>#</code> 同 <code>*</code>，但反向查找<br><code>:nohlsearch</code> 暂时关闭查找高亮功能, 直到执行新的或重复的查找命令为止<br><code>&lt;C-r&gt;&lt;C-w&gt;</code> 根据预览结果对查找域自动补全<br><code>//e&lt;CR&gt;</code> 查找偏移<br><code>\&gt;</code> 标记单词结尾，<code>\&lt;标记开头</code><br><code>* #</code> 默认使用了<code>\&lt;</code> <code>\&gt;</code> 使用<code>g*</code> <code>g#</code> 来部分匹配</p><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><p><code>:[range]s[ubstitute]/&#123;pattern&#125;/&#123;string&#125;/[flags]</code></p><p><code>:s/old/new</code> 改变光标所在行的第一个匹配串<br><code>:s/old/new/g</code> 替换全行的匹配串<br><code>:%s/old/new/g</code> 替换整个文件中的每个匹配串<br><code>%s/old/new/gc</code> 找到整个文件中的每个匹配串，并且对每个匹配串提示是否进行替换<br><code>:#,#s/old/new/g</code> 替换两行之间出现的每个匹配串，#,# 代表的是替换操作的若干行中首尾两行的行号<br><code>:%s///gn</code> 统计当前匹配模式的个数, n 抑制正常的替换行为<br>标志位e专门用于屏蔽这些错误提示<br>标志位&amp;仅仅用于指示Vim重用上一次substitute命令所用过的标志位<br><code>:&amp;&amp;</code> 命令重新执行替换操作, 本身只作用于当前行<br><code>:&#39;&lt;,&#39;&gt;&amp;&amp;</code>  作用于高亮选区<br><code>:%&amp;&amp;</code> <code>g&amp;</code> 作用于整个文件  </p><p>替换域中的特殊字符</p><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td><code>\r</code></td><td>插入一个换行符</td></tr><tr><td><code>\t</code></td><td>插入一个制表符</td></tr><tr><td><code>\\</code></td><td>插入一个反斜杠</td></tr><tr><td><code>\1</code></td><td>插入第1个子匹配</td></tr><tr><td><code>\2</code></td><td>插入第2个子匹配（以此类推，最多到\9）</td></tr><tr><td><code>\0</code></td><td>插入匹配模式的所有内容</td></tr><tr><td><code>&amp;</code></td><td>插入匹配模式的所有内容</td></tr><tr><td><code>~</code></td><td>使用上一次调用:substitute时的{string}</td></tr><tr><td><code>\=</code></td><td>{Vim script}执行{Vim Script}表达式；并将返回的结果作为替换{string}</td></tr></tbody></table><h2 id="global-命令"><a href="#global-命令" class="headerlink" title="global 命令"></a>global 命令</h2><p><code>:[range] global[!] /&#123;pattern&#125;/ [cmd]</code></p><p>在缺省情况下，:global命令的作用范围是整个文件<br>[cmd] 可以是除:global命令之外的任何Ex命, 缺省使用:print<br>:global! :vglobal（v表示invert）反转<br><code>:g/re/d</code> 删除所有行<br><code>:v/re/d</code> 只保留匹配行  </p><h2 id="设置类命令"><a href="#设置类命令" class="headerlink" title="设置类命令"></a>设置类命令</h2><p><code>:set</code><br><code>ic</code> <code>ignorecase</code> 查找时忽略字母大小写<br><code>is</code> <code>incsearch</code> 查找短语时显示部分匹配<br><code>hls</code> <code>hlsearch</code> 高亮显示所有的匹配短语<br><code>/string\c</code> 在一次查找中忽略大小写<br>在选项前加上 no 可以关闭选项</p><table><thead><tr><th>set</th><th>作用</th></tr></thead><tbody><tr><td>set ignorecase</td><td>打开功能</td></tr><tr><td>set noignorecase</td><td>关闭</td></tr><tr><td>set ignorecase!</td><td>反转</td></tr><tr><td>set ignorecase?</td><td>查询</td></tr><tr><td>set ignorecase&amp;</td><td>设为默认</td></tr><tr><td>set tabstop&#x3D;2</td><td>设置值</td></tr></tbody></table><p><code>:edit $MYVIMRC</code> 编辑 vimrc<br><code>:source &#123;file&#125;</code> 加载配置<br><code>:source $MYVIMRC</code> 如果vimrc文件恰好是当前活动的缓冲区，则可把此命令简化为 :so %</p><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><p><code>:help</code> <code>F1</code> 显示一般性的帮助信息<br><code>:help cmd</code> 显示cmd的帮助信息<br><code>CTRL W</code> 在窗口间跳转</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><code>~/.vimrc</code>文件</p><h2 id="补全"><a href="#补全" class="headerlink" title="补全"></a>补全</h2><p><code>:set nocp</code> 不与Vi兼容模式<br><code>&lt;TAB&gt;</code> 尝试自动补全<br><code>CTRL D</code> 显示命令列表</p><h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><p><code>:map-operator</code> 自定义操作符<br><code>omap-info</code> 自定义动作命令</p><h2 id="修改-root-用户文件"><a href="#修改-root-用户文件" class="headerlink" title="修改 root 用户文件"></a>修改 root 用户文件</h2><p><code>:w !sudo tee % &gt; /dev/null</code></p><h2 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h2><p>录制宏</p><p><code>q&#123;register&#125;</code> 开始录制<br><code>q</code> 停止<br><code>@&#123;register&#125;</code> 执行指定寄存器的内容<br><code>@@</code> 重复最近调用过的宏<br>如果宏执行动作命令失败了，Vim将中止执行宏的其余命令<br><code>qa</code> 会替换之前创建的宏，<code>qA</code> 则追加到之前的宏</p><h2 id="模式-1"><a href="#模式-1" class="headerlink" title="模式"></a>模式</h2><p>设置查找时大小写不敏感 <code>:set ignorecase</code>, 同时也会影响vim关键字的自动补全<br>查找时使用元字符 \c \C 可使这次查找忽略&#x2F;不或略大小写<br><code>:set smartcase</code> 在全小写是忽略大小写，在含有大写时不忽略<br><code>\v</code> 开启very magic搜索模式，假定除 <code>_</code> 大小写字母以及数字0到9之外的所有字符都具有特殊含义<br><code>\V</code> 开启very nomagic搜索模式，即按原义查找文本<br>圆括号用以捕获，\1 \2 .. \9 表示第n个捕获项，\0 匹配整个串<br><code>\_s</code> 匹配空白符或换行符<br>very magic搜索模式下，用  &lt;与&gt;符号表示单词定界符<br>\w匹配单词类字符，包括字母、数字以及符号 <code>_</code>，而\W则用来匹配除单词类字符以外的其他字符<br>在圆括号前面加上%，指 示Vim不要将括号内的内容赋给寄存器<br>元字符\zs标志着一个匹配的起始，而元字符\ze则用来界定匹配的结束，例如<br><code>/\v&quot;\zs[^&quot;]+\ze&quot;&lt;CR&gt;</code> 模式包含字符串，但只匹配引号内的文本  </p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="grep-vimgrep"><a href="#grep-vimgrep" class="headerlink" title=":grep :vimgrep"></a>:grep :vimgrep</h3><p><code>:grep</code> vim 调用外部 grep，会创建 quickfix 列表  </p><p><code>:vim[grep][!] /&#123;pattern&#125;/[g][j] &#123;file&#125; ...</code></p><h3 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h3><p>开启 ignorecase 后，自动补全也会忽略大小写<br><code>:set infercase</code> 仍会联想大小写，补全时不会替换已输入字符的大小写  </p><p>触发Vim自动补全的方法</p><table><thead><tr><th>命令</th><th>补全类型</th></tr></thead><tbody><tr><td><code>&lt;C-n&gt;</code> 或 <code>&lt;C-p&gt;</code></td><td>普通关键字</td></tr><tr><td><code>&lt;C-x&gt;&lt;C-n&gt;</code></td><td>当前缓冲区关键字</td></tr><tr><td><code>&lt;C-x&gt;&lt;C-i&gt;</code></td><td>包含文件关键字</td></tr><tr><td><code>&lt;C-x&gt;&lt;C-]&gt;</code></td><td>标签文件关键字</td></tr><tr><td><code>&lt;C-x&gt;&lt;C-k&gt;</code></td><td>字典查找</td></tr><tr><td><code>&lt;C-x&gt;&lt;C-l&gt;</code></td><td>整行补全</td></tr><tr><td><code>&lt;C-x&gt;&lt;C-f&gt;</code></td><td>文件名补全</td></tr><tr><td><code>&lt;C-x&gt;&lt;C-o&gt;</code></td><td>全能（Omni）补全</td></tr></tbody></table><p>补全菜单交互命令</p><table><thead><tr><th>按键操作</th><th>作用</th></tr></thead><tbody><tr><td><code>&lt;C-n&gt;</code></td><td>使用来自补全列表的下一个匹配项（next匹配项）</td></tr><tr><td><code>&lt;C-p&gt;</code></td><td>使用来自补全列表的上一个匹配项（previous匹配项）</td></tr><tr><td><code>&lt;Down&gt;</code></td><td>选择来自补全列表的下一个匹配项</td></tr><tr><td><code>&lt;Up&gt;</code></td><td>选择来自补全列表的上一个匹配项</td></tr><tr><td><code>&lt;C-y&gt;</code></td><td>确认使用当前选中的匹配项（yes）</td></tr><tr><td><code>&lt;C-e&gt;</code></td><td>还原最早输入的文本（从自动补全中exit）</td></tr><tr><td><code>&lt;C-h&gt;</code>（与<code>&lt;BS&gt;</code>）</td><td>从当前匹配项中删除一个字符</td></tr><tr><td><code>&lt;C-l&gt;</code></td><td>从当前匹配项中增加一个字符{char} 中止自动补全并插入字符{char}@</td></tr></tbody></table><h3 id="拼写检查"><a href="#拼写检查" class="headerlink" title="拼写检查"></a>拼写检查</h3><p><code>:set spell</code> 开启拼写检查<br><code>set spelllang=en_us</code> 设置语言  </p><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>]s</code></td><td>跳到下一处拼写错误</td></tr><tr><td><code>[s</code></td><td>跳到上一处拼写错误</td></tr><tr><td><code>z=</code></td><td>为当前单词提供更正建议</td></tr><tr><td><code>zg</code></td><td>把当前单词添加到拼写文件中</td></tr><tr><td><code>zw</code></td><td>把当前单词从拼写文件中删除</td></tr><tr><td><code>zug</code></td><td>撤销针对当前单词的zg或zw命令</td></tr></tbody></table><p><code>spellfile</code> 指定文件保存由zg 和zw 命令所添加、删除的单词</p><p>插入模式下通过<code>&lt;C-x&gt;s</code> <code>&lt;C-x&gt;&lt;C-s&gt;</code>更正拼写错误，该命令会触发一个特殊的自动补全功能</p><p>开启 expandtab <code>&lt;C-v&gt;&lt;Tab&gt;</code> 会插入制表符</p><h3 id="自动命令"><a href="#自动命令" class="headerlink" title="自动命令"></a>自动命令</h3><p><code>autocmd &#123;event&#125; &#123;pattern&#125; &#123;cmd&#125;</code></p><p>在 <code>cmd</code> 中，<code>&lt;afile&gt;</code> 代表当前文件名</p><p>多个 <code>pattern</code> 以逗号分隔</p><p><code>FileType</code> 事件用于匹配文件类型，<code>set filetype?</code> 查看文件类型</p><p>销毁自动命令 <code>autocmd!</code></p><p>自动命令组 <code>augroup</code></p><h3 id="bash-绑定-vi-键位"><a href="#bash-绑定-vi-键位" class="headerlink" title="bash 绑定 vi 键位"></a>bash 绑定 vi 键位</h3><p><code>set -o emacs</code> <code>set -o vi</code> 分别设置交互式 bash 的键位为 emacs  和 vi 模式, 默认是 emacs 模式</p><p>vi 模式下，默认是插入模式，按 ESC 回到一般模式</p><h2 id="ctags"><a href="#ctags" class="headerlink" title="ctags"></a>ctags</h2><h3 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h3><ul><li><a href="http://ctags.sourceforge.net/">http://ctags.sourceforge.net/</a></li><li><a href="https://github.com/universal-ctags/ctags">https://github.com/universal-ctags/ctags</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install exuberant-ctags universal-ctags</span><br><span class="line">ctags files</span><br></pre></td></tr></table></figure><h3 id="vim-跳转"><a href="#vim-跳转" class="headerlink" title="vim 跳转"></a>vim 跳转</h3><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>&lt;C-]&gt;</code></td><td>跳转到匹配当前光标所在关键字的第一处标签</td></tr><tr><td><code>g&lt;C-]&gt;</code></td><td>如果有多处标签可以匹配当前光标所在的关键字，提示用户指定一处进行跳转。如果只有一处匹配，则不会提示，直接进行跳转</td></tr><tr><td><code>:tag &#123;keyword&#125;</code></td><td>跳转到匹配{keyword}的第一处标签</td></tr><tr><td><code>:tjump &#123;keyword&#125;</code></td><td>提示用户从匹配{keyword}的多处标签中指定一处进行跳转。如果只有一处匹配，则不会提示，直接进行跳转</td></tr><tr><td><code>:pop</code> 或 <code>&lt;C-t&gt;</code></td><td>反向遍历标签历史</td></tr><tr><td><code>:tag</code></td><td>正向遍历标签历史</td></tr><tr><td><code>:tnext</code></td><td>跳转到下一处匹配的标签</td></tr><tr><td><code>:tprev</code></td><td>跳转到上一处匹配的标签</td></tr><tr><td><code>:tfirst</code></td><td>跳转到第一处匹配的标签</td></tr><tr><td><code>:tlast</code></td><td>跳转到最后一处匹配的标签</td></tr><tr><td><code>:tselect</code></td><td>提示用户从标签匹配列表中选择一项进行跳转</td></tr></tbody></table><h3 id="启动vim时跳转"><a href="#启动vim时跳转" class="headerlink" title="启动vim时跳转"></a>启动vim时跳转</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim -t tag</span><br></pre></td></tr></table></figure><p>需要有 <code>tags</code> 文件, 定位到标签函数(<code>C/C++</code>)的开始处</p><h3 id="制作-stdc-tags"><a href="#制作-stdc-tags" class="headerlink" title="制作 stdc++ tags"></a>制作 stdc++ tags</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.vim/tags</span><br><span class="line">cd ~/.vim/tags/</span><br><span class="line">ctags -R --c++-kinds=+l+x+p --fields=+iaSl --extra=+q --language-force=c++ -f stdcpp.tags /usr/include/c++/10/</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">set</span> <span class="keyword">tags</span>+=~/.<span class="keyword">vim</span>/<span class="keyword">tags</span>/stdcpp.<span class="keyword">tags</span></span><br></pre></td></tr></table></figure><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><h3 id="保存会话"><a href="#保存会话" class="headerlink" title="保存会话"></a>保存会话</h3><p><code>:mksession!</code> 将当前会话写入 <code>Session.vim</code> 中</p><h3 id="载入会话"><a href="#载入会话" class="headerlink" title="载入会话"></a>载入会话</h3><p>shell中使用 <code>vim -S &#123; file &#125;</code> 读入文件后执行 <code>file</code>, 如果不带 <code>file</code> 参数等价于 <code>vim -S Session.vim</code></p><p>或 vim 中执行 <code>:source Session.vim</code></p><p><code>:mksession</code> 与 <code>vim -S</code> 默认在当前目录保存和寻找文件，也可以指定文件名来保存和寻找，或是建立多个会话</p><h3 id="持久化撤销"><a href="#持久化撤销" class="headerlink" title="持久化撤销"></a>持久化撤销</h3><p><code>set undofile</code> 开启持久化撤销</p><p><code>set undodir=</code> 设置文件存储撤销历史</p><h3 id="插件-obsession"><a href="#插件-obsession" class="headerlink" title="插件 obsession"></a>插件 obsession</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tpope/vim-obsession.git ~/.vim/pack/bundle/start/obsession</span><br></pre></td></tr></table></figure><ul><li><code>:Obsession</code> 开启&#x2F;暂停自动保存会话</li><li><code>:Obsession!</code> 删除<code>Session.vim</code> 并停止自动保存会话</li></ul><h2 id="窗口与标签页"><a href="#窗口与标签页" class="headerlink" title="窗口与标签页"></a>窗口与标签页</h2><h3 id="启动vim时分割"><a href="#启动vim时分割" class="headerlink" title="启动vim时分割"></a>启动vim时分割</h3><ul><li><p><code>vim -o[N]</code></p><p>  打开 <code>N</code> 个窗口，水平分割。如果没有给出 <code>N</code>，为每个文件参数打开一个窗口。<br>  如果没有足够的空间，只打开前面数项。如果给出的窗口数 超过参数的数目，后面的窗口会编辑空文件。</p></li><li><p><code>vim -O[N]</code></p><p>  同 <code>-o</code>, 但垂直分割</p></li><li><p><code>vim -p[N]</code></p><p>  同 <code>-o</code>, 标签页分割, 最大标签页数由 <code>tabpagemax</code> 决定</p></li></ul><h3 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h3><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td><code>&lt;C-w&gt;s</code></td><td>水平切分窗口</td></tr><tr><td><code>&lt;C-w&gt;v</code></td><td>垂直切分窗口</td></tr><tr><td><code>:edit</code></td><td>把另外一个缓冲区载入活动窗口中</td></tr><tr><td><code>:sp[lit] &#123;file&#125;</code></td><td>水平切分当前窗口，并在新窗口中载入{file}</td></tr><tr><td><code>:vsp[lit] &#123;file&#125;</code></td><td>垂直切分当前窗口，并在新窗口中载入{file}</td></tr></tbody></table><h4 id="窗口间切换"><a href="#窗口间切换" class="headerlink" title="窗口间切换"></a>窗口间切换</h4><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td><code>&lt;C-w&gt;w</code></td><td><code>&lt;C-w&gt;&lt;C-w&gt;</code> 在窗口间循环切换</td></tr><tr><td><code>&lt;C-w&gt;h</code></td><td>切换到左边的窗口</td></tr><tr><td><code>&lt;C-w&gt;j</code></td><td>切换到下边的窗口</td></tr><tr><td><code>&lt;C-w&gt;k</code></td><td>切换到上边的窗口</td></tr><tr><td><code>&lt;C-w&gt;l</code></td><td>切换到右边的窗口</td></tr><tr><td><code>&lt;C-w&gt;r</code></td><td>交换两个窗口</td></tr></tbody></table><h4 id="关闭窗口"><a href="#关闭窗口" class="headerlink" title="关闭窗口"></a>关闭窗口</h4><table><thead><tr><th>Ex 命令</th><th>普通模式命令</th><th>用途</th></tr></thead><tbody><tr><td>:clo[se]</td><td><C-w>c</td><td>关闭活动窗口</td></tr><tr><td>:on[ly]</td><td><C-w>o</td><td>只保留活动窗口，关闭其他所有窗口</td></tr></tbody></table><h4 id="改变窗口大小及重新排列窗口"><a href="#改变窗口大小及重新排列窗口" class="headerlink" title="改变窗口大小及重新排列窗口"></a>改变窗口大小及重新排列窗口</h4><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td><code>&lt;C-w&gt;=</code></td><td>使所有窗口等宽、等高</td></tr><tr><td><code>&lt;C-w&gt;_</code></td><td>最大化活动窗口的高度</td></tr><tr><td>&#96;<C-w></td><td>&#96;</td></tr><tr><td><code>[N]&lt;C-w&gt;</code></td><td>_  把活动窗口的高度设为[N]行</td></tr><tr><td>&#96;[N]<C-w></td><td>&#96;</td></tr><tr><td><code>&lt;C-w&gt;+</code></td><td>扩大窗口行数</td></tr><tr><td><code>&lt;C-w&gt;-</code></td><td>减少窗口行数</td></tr><tr><td><code>&lt;C-w&gt;&gt;</code></td><td>扩大窗口列数</td></tr><tr><td><code>&lt;C-w&gt;&lt;</code></td><td>减少窗口列数</td></tr></tbody></table><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td><code>:tabedit &#123;file&#125;</code></td><td>新标签页编辑文件</td></tr><tr><td><code>:tabnew</code></td><td>新标签页编辑新文件</td></tr><tr><td><code>:tabs</code></td><td>列出标签页</td></tr><tr><td><code>:tabclose</code></td><td>关闭当前标签页</td></tr><tr><td><code>:tabonly</code></td><td>仅保留当前标签页</td></tr><tr><td><code>:tabn</code></td><td><code>:tabnext</code> <code>gt</code> 移动到下一个标签页</td></tr><tr><td><code>:tabp</code></td><td><code>:tabprevious</code> <code>gT</code> 移动到上一个标签页</td></tr><tr><td><code>:tabm :tabmove [N]</code></td><td>把当前标签页移到第 N 个标签页之</td></tr></tbody></table><h2 id="vimdiff"><a href="#vimdiff" class="headerlink" title="vimdiff"></a>vimdiff</h2><p><code>vimdiff file1 file2</code> 竖屏比较两个文件<br><code>vimdiff -o file1 file2</code> 横屏比较两个文件  </p><p>vimdiff 同 <code>vim -d</code></p><p>vim 编辑文件时 <code>:vertical diffsplit file2</code> 亦可比较</p><p>两侧的屏幕滚动默认同步，<code>:set noscrollbind</code> 设置不同步</p><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td><code>]c</code></td><td>下一个差异点</td></tr><tr><td><code>[c</code></td><td>上一个差异点</td></tr><tr><td><code>dp</code></td><td>(diff put) 从当前复制到另一个</td></tr><tr><td><code>do</code></td><td>(diff obtain) 从另一个复制到当前</td></tr><tr><td><code>:diffupdate</code></td><td>刷新比较结果</td></tr><tr><td><code>:set diffopt=context:6</code></td><td>缺省的上下文行数</td></tr><tr><td><code>zo</code></td><td>打开折叠</td></tr><tr><td><code>zc</code></td><td>重新折</td></tr></tbody></table><h2 id="vim-终端"><a href="#vim-终端" class="headerlink" title="vim 终端"></a>vim 终端</h2><p><code>:ter[minal]</code> 打开终端</p><h2 id="quickfix"><a href="#quickfix" class="headerlink" title="quickfix"></a>quickfix</h2><p><code>:make</code> 在 vim 中编译<br><code>:make!</code> 出错后光标位置不变  </p><p>Quickfix 命令列表</p><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>:cnext</code></td><td>跳转到下一项</td></tr><tr><td><code>:cprev</code></td><td>跳转到上一项</td></tr><tr><td><code>:cfirst</code></td><td>跳转到第一项</td></tr><tr><td><code>:clast</code></td><td>跳转到最后一项</td></tr><tr><td><code>:cnfile</code></td><td>跳转到下一个文件中的第一项</td></tr><tr><td><code>:cpfile</code></td><td>跳转到上一个文件中的最后一项</td></tr><tr><td><code>:cc N</code></td><td>跳转到第 N 项</td></tr><tr><td><code>:copen</code></td><td>打开quickfix窗口</td></tr><tr><td><code>:cclose</code></td><td>关闭quickfix窗口</td></tr></tbody></table><h3 id="定制外部编译器"><a href="#定制外部编译器" class="headerlink" title="定制外部编译器"></a>定制外部编译器</h3><p><code>:set makeprg=</code> 可用 % # 扩展成当前文件名与轮换文件名</p><p>例如，对于markdown 文件, 设置</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">setlocal</span> makeprg=pandoc\ -<span class="keyword">c</span>\ common.css\ -s\ %\ -<span class="keyword">o</span>\ ~/www/preview.html</span><br></pre></td></tr></table></figure><p>即可通过 <code>:make</code> 生成预览文件</p><h2 id="vim-script"><a href="#vim-script" class="headerlink" title="vim script"></a>vim script</h2><h3 id="hello-vim"><a href="#hello-vim" class="headerlink" title="hello.vim"></a><code>hello.vim</code></h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function!</span> <span class="title">SayHello</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;hello, world&#x27;</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"></span><br><span class="line">command! Hello <span class="keyword">call</span> SayHello()</span><br><span class="line"><span class="keyword">nnoremap</span> Q :Hello<span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure><p>vim 中，使用 <code>:source &#123;path&#125;</code> 加载vim script<br><code>Q</code> 和 <code>:Hello</code> 均会输出 “hello, world”</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot; 单行注释</span></span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>let 声明一个变量，变量存在三种作用域，全局、局部、脚本变量，可以指定前缀区别作用域</p><table><thead><tr><th>前缀</th><th>说明</th></tr></thead><tbody><tr><td><code>g:</code></td><td>全局变量</td></tr><tr><td><code>l:</code></td><td>局部变量，只可在函数内部使用</td></tr><tr><td><code>s:</code></td><td>脚本变量，只可以在当前脚本函数内使用</td></tr><tr><td><code>v:</code></td><td>Vim 特殊变量</td></tr><tr><td><code>b:</code></td><td>作用域限定在某一个缓冲区内</td></tr><tr><td><code>w:</code></td><td>作用域限定在窗口内部</td></tr><tr><td><code>t:</code></td><td>作用域限定在标签内部</td></tr></tbody></table><p>例如 <code>let g:str = &quot;hello&quot;</code> 定义一个全局的字符串变量</p><p>不指定前缀则为默认的作用域，函数外部为全局的，函数内部为局部的</p><h4 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h4><table><thead><tr><th>类型</th><th>ID</th><th>描述</th></tr></thead><tbody><tr><td>Number</td><td>0</td><td>整数</td></tr><tr><td>String</td><td>1</td><td>字符串</td></tr><tr><td>Funcref</td><td>2</td><td>函数指针</td></tr><tr><td>List</td><td>3</td><td>列表</td></tr><tr><td>Dictionary</td><td>4</td><td>字典</td></tr><tr><td>Float</td><td>5</td><td>浮点数</td></tr><tr><td>Boolean</td><td>6</td><td></td></tr><tr><td>None</td><td>7</td><td></td></tr><tr><td>Job</td><td>8</td><td></td></tr><tr><td>Channel</td><td>9</td><td></td></tr></tbody></table><h3 id="Vim-自定义命令"><a href="#Vim-自定义命令" class="headerlink" title="Vim 自定义命令"></a>Vim 自定义命令</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command! -nargs=* -<span class="built_in">complete</span>=custom,helloworld#complete HelloWorld <span class="keyword">call</span> helloworld#test()</span><br></pre></td></tr></table></figure><p>紧接 command 命令其后的 ! 表示强制定义该命令，即使前面已经定义过了同样名称的命令，也将其覆盖掉</p><p><code>-nargs=*</code> 表示，该命令可接受任意个数的参数， 包括 0 个。-nargs 的取值有以下几种情况</p><table><thead><tr><th>参数</th><th>定义</th></tr></thead><tbody><tr><td><code>-nargs=0</code></td><td>不接受任何参数（默认）</td></tr><tr><td><code>-nagrs=1</code></td><td>只接受一个参数</td></tr><tr><td><code>-nargs=*</code></td><td>可接收任意个数参数</td></tr><tr><td><code>-nargs=?</code></td><td>可接受 1 个或者 0 个参数</td></tr><tr><td><code>-nargs=+</code></td><td>至少提供一个参数</td></tr></tbody></table><p><code>-complete</code> 指定补全方式</p><h2 id="插件-plugin-包-package"><a href="#插件-plugin-包-package" class="headerlink" title="插件(plugin), 包(package)"></a>插件(plugin), 包(package)</h2><h3 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h3><p>插件的目录结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">demo-plugin/</span><br><span class="line">├── doc</span><br><span class="line">│   └── demo.txt</span><br><span class="line">└── plugin</span><br><span class="line">    └── demo.vim</span><br></pre></td></tr></table></figure><p>安装插件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> runtimepath+=$VIMCONFIG/arbitrary/demo-plugin</span><br></pre></td></tr></table></figure><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><p>包的目录通常为 <code>$VIMCONFIG/pack</code></p><p>vim 启动时会遍历 <code>$VIMCONFIG/pack/*/start</code> 目录下的插件</p><p>索引新安装插件的文档 <code>:helptags &#123;path&#125;</code> <code>:helptags ALL</code></p><h3 id="在包里安装插件"><a href="#在包里安装插件" class="headerlink" title="在包里安装插件"></a>在包里安装插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $VIMCONFIG/pack/bundle/&#123;start,opt&#125;</span><br><span class="line">cd $VIMCONFIG/pack/bundle/start</span><br><span class="line">git clone &lt;git url&gt;</span><br><span class="line">vim -u NONE -c &quot;helptags $VIMCONFIG/pack/bundle/start/&lt;doc-path&gt;&quot; -c q</span><br></pre></td></tr></table></figure><p><code>$VIMCONFIG/pack/bundle/opt</code> 目录为可选插件，通过 <code>:packadd &#123;name&#125;</code> 激活插件 <code>pack/*/opt/&#123;name&#125;</code></p><h2 id="Vim-插件"><a href="#Vim-插件" class="headerlink" title="Vim 插件"></a>Vim 插件</h2><h3 id="vimcdoc"><a href="#vimcdoc" class="headerlink" title="vimcdoc"></a>vimcdoc</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/yianwillis/vimcdoc.git ~/.vim/pack/bundle/start/vimcdoc</span><br></pre></td></tr></table></figure><h3 id="NERDTree"><a href="#NERDTree" class="headerlink" title="NERDTree"></a>NERDTree</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/preservim/nerdtree.git ~/.vim/pack/bundle/start/nerdtree</span><br><span class="line">vim -u NONE -c &quot;helptags ~/.vim/pack/bundle/start/nerdtree/doc&quot; -c q</span><br></pre></td></tr></table></figure><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>:NERDTree</code></td><td>打开文档树</td></tr><tr><td><code>q</code></td><td>退出文档树</td></tr><tr><td><code>o</code></td><td>在之前的窗口打开</td></tr><tr><td><code>go</code></td><td>预览, 打开但不跳转</td></tr><tr><td><code>t</code></td><td>新标签页打开</td></tr><tr><td><code>T</code></td><td>新标签页打开但不跳转</td></tr><tr><td><code>i</code></td><td>水平分割打开</td></tr><tr><td><code>gi</code></td><td>水平分割预览</td></tr><tr><td><code>s</code></td><td>垂直分割打开</td></tr><tr><td><code>gs</code></td><td>垂直分割预览</td></tr><tr><td><code>I</code></td><td>显示&#x2F;关闭 隐藏文件</td></tr><tr><td><code>r</code></td><td>刷新当前目录</td></tr><tr><td><code>C</code></td><td>把文档树根目录设为选择的目录</td></tr><tr><td><code>u</code></td><td>文档树根目录上移一级</td></tr><tr><td><code>U</code></td><td>同 <code>u</code> 但旧目录保持打开状态</td></tr><tr><td><code>cd</code></td><td>设置 CWD 为选中的目录</td></tr><tr><td><code>CD</code></td><td>设置文档树根目录为 CWD</td></tr><tr><td><code>?</code></td><td>help</td></tr></tbody></table><h3 id="YouCompleteMe"><a href="#YouCompleteMe" class="headerlink" title="YouCompleteMe"></a>YouCompleteMe</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ycm-core/YouCompleteMe.git ~/.vim/pack/bundle/start/YouCompleteMe</span><br><span class="line">cd ~/.vim/pack/bundle/start/YouCompleteMe</span><br><span class="line">git submodule update --init --recursive</span><br><span class="line">python3 install.py --clangd-completer # or --all</span><br></pre></td></tr></table></figure><h3 id="fzf"><a href="#fzf" class="headerlink" title="fzf"></a>fzf</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install fzf</span><br><span class="line">git clone https://github.com/junegunn/fzf ~/.vim/pack/bundle/start/fzf</span><br></pre></td></tr></table></figure><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>:FZF</code></td><td>打开模糊匹配器</td></tr><tr><td><code>&lt;C-c&gt;</code></td><td>关闭模糊匹配器</td></tr><tr><td><code>&lt;C-j&gt;</code> <code>down</code></td><td>选择匹配结果下一项</td></tr><tr><td><code>&lt;C-k&gt;</code> <code>up</code></td><td>选择匹配结果上一项</td></tr><tr><td><code>&lt;CR&gt;</code></td><td>打开当前项</td></tr><tr><td><code>&lt;C-x&gt;</code></td><td>水平分割打开文件</td></tr><tr><td><code>&lt;C-v&gt;</code></td><td>垂直分割打开文件</td></tr><tr><td><code>&lt;C-t&gt;</code></td><td>新标签页打开</td></tr></tbody></table><h3 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tpope/vim-dispatch.git ~/.vim/pack/bundle/start/dispatch</span><br></pre></td></tr></table></figure><p><code>:Make</code> 前台运行构建程序<br><code>:Make!</code> 后台运行构建程序<br><code>:Make</code> <code>:Make!</code> 都是异步执行<br><code>:Dispatch</code> 切换编译器  </p><h3 id="commentary"><a href="#commentary" class="headerlink" title="commentary"></a>commentary</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tpope/vim-commentary.git ~/.vim/pack/bundle/start/commentary</span><br></pre></td></tr></table></figure><p><code>:[range]Commentary</code> 快速注释&#x2F;取消注释</p><h3 id="base16-vim"><a href="#base16-vim" class="headerlink" title="base16-vim"></a>base16-vim</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.vim/colors</span><br><span class="line">git clone https://github.com/chriskempson/base16-vim.git</span><br><span class="line">cp base16-vim/colors/base16-*.vim ~/.vim/colors/</span><br></pre></td></tr></table></figure><p><code>:colorscheme &#123;name&#125;</code>  选择配色</p><h3 id="airline"><a href="#airline" class="headerlink" title="airline"></a>airline</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/vim-airline/vim-airline.git ~/.vim/pack/bundle/start/airline</span><br></pre></td></tr></table></figure><h3 id="surround"><a href="#surround" class="headerlink" title="surround"></a>surround</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tpope/vim-surround.git ~/.vim/pack/bundle/start/surround</span><br></pre></td></tr></table></figure><ul><li>把 <code>&quot;</code> 改为 <code>&#39;</code> 或 <code>&lt;p&gt;</code>: <code>cs&quot;&#39;</code> <code>cs&quot;&lt;p&gt;</code></li><li>删除 <code>&quot;</code>: <code>ds&quot;</code></li><li>添加 <code>&quot;</code>: <code>ysiw&quot;</code></li><li>整行添加<code>&quot;</code>: <code>yss&quot;</code></li></ul><h3 id="fugitive"><a href="#fugitive" class="headerlink" title="fugitive"></a>fugitive</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tpope/vim-fugitive.git ~/.vim/pack/bundle/start/fugitive</span><br></pre></td></tr></table></figure><h3 id="ALE-Asynchronous-Lint-Engine"><a href="#ALE-Asynchronous-Lint-Engine" class="headerlink" title="ALE(Asynchronous Lint Engine)"></a>ALE(Asynchronous Lint Engine)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/dense-analysis/ale.git ~/.vim/pack/bundle/start/ale</span><br></pre></td></tr></table></figure><h3 id="grepper"><a href="#grepper" class="headerlink" title="grepper"></a>grepper</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/mhinz/vim-grepper.git ~/.vim/pack/bundle/start/grepper</span><br></pre></td></tr></table></figure><h3 id="vim-test"><a href="#vim-test" class="headerlink" title="vim-test"></a>vim-test</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/vim-test/vim-test.git ~/.vim/pack/bundle/start/vim-test</span><br></pre></td></tr></table></figure><h3 id="goyo"><a href="#goyo" class="headerlink" title="goyo"></a>goyo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/junegunn/goyo.vim.git ~/.vim/pack/bundle/start/goyo</span><br></pre></td></tr></table></figure><p><code>:Goyo</code> <code>:Goyo!</code> 切换状态</p><h3 id="vim-gutentags"><a href="#vim-gutentags" class="headerlink" title="vim-gutentags"></a>vim-gutentags</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ludovicchabant/vim-gutentags.git ~/.vim/pack/bundle/start/vim-gutentags</span><br></pre></td></tr></table></figure><h3 id="rainbow"><a href="#rainbow" class="headerlink" title="rainbow"></a>rainbow</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/luochen1990/rainbow.git ~/.vim/pack/bundle/start/rainbow</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">g:rainbow_active</span> = <span class="number">1</span>    <span class="comment">&quot; 默认开启</span></span><br><span class="line">:RainbowToggle      <span class="comment">&quot; 切换</span></span><br><span class="line">:RainbowToggleOn    <span class="comment">&quot; 开启</span></span><br><span class="line">:RainbowToggleOff   <span class="comment">&quot; 关闭</span></span><br></pre></td></tr></table></figure><h2 id="neovim"><a href="#neovim" class="headerlink" title="neovim"></a>neovim</h2><h3 id="安装与使用-1"><a href="#安装与使用-1" class="headerlink" title="安装与使用"></a>安装与使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install neovim</span><br><span class="line">nvim [options] [file ...]</span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias neovim=nvim</span><br><span class="line">export NVIMCONFIG=~/.config/nvim</span><br><span class="line">export NVIMDATA=~/.local/share/nvim</span><br></pre></td></tr></table></figure><p>复用 vim 配置，<code>~/.config/nvim/init.vim</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> runtimepath^=~/.<span class="keyword">vim</span> runtimepath+=~/.<span class="keyword">vim</span>/after</span><br><span class="line"><span class="keyword">let</span> &amp;packpath = &amp;runtimepath</span><br><span class="line"><span class="keyword">source</span> ~/.<span class="keyword">vim</span>/vimrc</span><br></pre></td></tr></table></figure><h3 id="neovim-provider"><a href="#neovim-provider" class="headerlink" title="neovim provider"></a>neovim provider</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --user --upgrade neovim</span><br></pre></td></tr></table></figure><p>neovim 中 <code>:py3 &#123;statement&#125;</code> 启用 python3</p><h3 id="neovim-remote"><a href="#neovim-remote" class="headerlink" title="neovim-remote"></a>neovim-remote</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --user --upgrade neovim-remote</span><br><span class="line">nvr --help</span><br></pre></td></tr></table></figure><h3 id="neovim-终端模拟器"><a href="#neovim-终端模拟器" class="headerlink" title="neovim 终端模拟器"></a>neovim 终端模拟器</h3><p>打开终端缓冲区 <code>:terminal</code>，终端缓冲区输入 <code>i</code> 进入终端模式，再按下 <code>&lt;C-\&gt;&lt;C-n&gt;</code> 回到普通模式</p><p>创建终端缓冲区执行命令 <code>:terminal &#123;cmd&#125;</code>，简写为 <code>:te &#123;cmd&#125;</code></p><p>新窗口打开终端缓冲区 <code>:[v]split | terminal</code></p><p>新标签页打开 <code>:tabedit | terminal</code></p><p><code>jobsend()</code> 向终端缓冲区中正在运行的进程的标准输入写入</p><p>在当前 neovim 实例中打开文件</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>nvr &lt;file&gt;</code></td><td>在当前窗口打开</td></tr><tr><td><code>nvr -l &lt;file&gt;</code></td><td>在最后激活的窗口打开</td></tr><tr><td><code>nvr -o &lt;file&gt; [&lt;file&gt;...]</code></td><td>通过 <code>:split</code> 打开一个或多个文件</td></tr><tr><td><code>nvr -O &lt;file&gt; [&lt;file&gt;...]</code></td><td>通过 <code>:vsplit</code> 打开一个或多个文件</td></tr><tr><td><code>nvr -p &lt;file&gt; [&lt;file&gt;...]</code></td><td>通过 <code>:tabedit</code> 打开一个或多个文件</td></tr></tbody></table><p>重命名终端缓冲区 <code>:file &#123;name&#125;</code></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><ul><li><a href="https://www.vim.org/">https://www.vim.org/</a></li><li><a href="https://yianwillis.github.io/vimcdoc/doc/help.html">https://yianwillis.github.io/vimcdoc/doc/help.html</a></li><li><a href="https://neovim.io/">https://neovim.io/</a></li></ul><h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><ul><li><a href="https://book.douban.com/subject/25869486/">Vim实用技巧</a></li><li><a href="https://book.douban.com/subject/35005327/">精通 Vim</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/codes/git/"/>
      <url>/codes/git/</url>
      
        <content type="html"><![CDATA[<h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><p><code>git config</code> 进行配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &lt;name&gt;</span><br><span class="line">git config --global user.email &lt;email&gt;</span><br><span class="line">git config -l, --list</span><br></pre></td></tr></table></figure><p><code>.gitconfig</code> 配置文件</p><ul><li><code>/etc/gitconfig</code> 系统中对所有用户 <code>git config --system</code> 读写这个文件</li><li><code>~/.gitconfig</code> 适用于当前用户 <code>git config --global</code> 读写这个文件</li><li><code>$&#123;dir&#125;/.git/config</code> 针对当前项目有效 <code>git config --local</code> 读写这个文件</li></ul><p>每一个级别的配置都会覆盖上层的相同配置</p><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><ul><li><code>git init</code> 在现有目录中初始化仓库</li><li><code>git init dir</code> 创建<code>dir</code>目录并初始化成git项目</li></ul><h2 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h2><p><code>git clone</code> 克隆现有的仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone [&lt;options&gt;] [--] &lt;repo&gt; [&lt;dir&gt;]</span><br><span class="line">git clone git@github.com:liphx/example.git -b master my_dir</span><br></pre></td></tr></table></figure><h2 id="status"><a href="#status" class="headerlink" title="status"></a>status</h2><p><code>git status</code> 检查当前文件状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status -s <span class="comment"># 以更为紧凑的格式输出</span></span></span><br><span class="line"> M file1</span><br><span class="line">MM file2</span><br><span class="line">A  file3</span><br><span class="line">M  file4</span><br><span class="line">?? file5</span><br></pre></td></tr></table></figure><ul><li>?? 标记：新添加的未跟踪文件</li><li>A  标记：新添加到暂存区中的文件</li><li>M  标记：修改过的文件</li></ul><p>出现在右边的 M 表示该文件被修改了但是还没放入暂存区，出现在靠左边的 M 表示该文件被修改了并放入了暂存区</p><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><p><code>git add</code> 跟踪新文件、暂存已修改文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;files&gt;</span><br><span class="line">git add -u</span><br></pre></td></tr></table></figure><h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><p><code>git diff</code> 比较差异</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--name-only</span><br><span class="line">--name-status</span><br></pre></td></tr></table></figure><h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><p><code>git commit</code> 提交更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;first commit&quot;</span></span></span><br><span class="line">[master (root-commit) 07baa89] first commit</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 file1</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -a -m <span class="string">&quot;second commit&quot;</span> <span class="comment"># 把所有已经跟踪过的文件暂存起来一并提交</span></span></span><br></pre></td></tr></table></figure><h2 id="rm-mv"><a href="#rm-mv" class="headerlink" title="rm, mv"></a>rm, mv</h2><p><code>git rm</code> 移除文件</p><p>从暂存区域移除，并连带从工作目录中删除指定的文件</p><p>如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f</p><p>把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中 –cached</p><p><code>git mv</code> 移动文件</p><p>这条命令等价于</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv file1 file2</span><br><span class="line">git rm file1</span><br><span class="line">git add file2</span><br></pre></td></tr></table></figure><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><p><code>git log</code> 查看提交历史</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">git log --oneline</span><br><span class="line">git log --all</span><br><span class="line">git log -n 5</span><br><span class="line">git log --graph</span><br></pre></td></tr></table></figure><h2 id="remote"><a href="#remote" class="headerlink" title="remote"></a>remote</h2><p><code>git remote</code> 远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br><span class="line">git remote -v</span><br><span class="line">git remote show origin</span><br><span class="line">git remote add &lt;name&gt; &lt;url&gt; # 添加远程仓库</span><br><span class="line">git remote remove &lt;name&gt; # 移除远程仓库</span><br><span class="line">git remote rename &lt;old&gt; &lt;new&gt; # 重命名远程仓库</span><br></pre></td></tr></table></figure><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><p><code>git fetch</code> 从远程仓库中获得数据</p><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p><code>git push</code> 推送到远程仓库</p><h2 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h2><p><code>git tag</code> 标签</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git tag # 列出标签</span><br><span class="line">git tag -a v1.0 -m &#x27;my version 1.0&#x27; # -a 创建附注标签 -m 指定存储在标签中的信息</span><br><span class="line">git show v1.0 # 查看标签信息与对应的提交信息</span><br><span class="line">git tag v1.1-lw # 无-a 选项，创建轻量标签，它只是一个特定提交的引用</span><br><span class="line">git tag -a v0.9 &lt;commit&gt; # 对过去的提交打标签</span><br><span class="line">git push origin [tagname] # 传送标签到远程仓库服务器</span><br><span class="line">git tag -d &lt;tagname&gt; # 删除本地仓库标签</span><br><span class="line">git push &lt;remote&gt;:refs/tags/&lt;tagname&gt; # 更新远程仓库标签</span><br></pre></td></tr></table></figure><h2 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h2><p><code>git branch</code> git分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch # 显示当前所有分支， -v 还会显示各分支最后一次提交， --merged 与 --no-merged显示已合并与未合并的分支</span><br><span class="line">git branch new-branch # 创建新分支</span><br><span class="line">git checkout new-branch # 切换到已存在分支， HEAD 现在指向 new-branch</span><br><span class="line">git checkout -b iss99 # 创建新分支并切换</span><br><span class="line">git branch -d iss99 # 删除分支</span><br></pre></td></tr></table></figure><h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><p><code>git merge</code> 分支合并</p><h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><p><code>git rebase</code> 变基</p><p><a href="https://stackoverflow.com/questions/22992543/how-do-i-git-rebase-the-first-commit">https://stackoverflow.com/questions/22992543/how-do-i-git-rebase-the-first-commit</a><br><code>git rebase -i --root</code></p><h2 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h2><p><code>git reset</code> 回退</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard [commit_id]</span><br></pre></td></tr></table></figure><h2 id="gitignore"><a href="#gitignore" class="headerlink" title="gitignore"></a>gitignore</h2><p><code>.gitignore</code> 忽略文件</p><p>文件 .gitignore 的格式规范如下：</p><ul><li>所有空行或者以 ＃ 开头的行都会被 Git 忽略。</li><li>可以使用标准的 glob 模式匹配。</li><li>匹配模式可以以（&#x2F;）开头防止递归。</li><li>匹配模式可以以（&#x2F;）结尾指定目录。</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</li></ul><p>所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。</p><h2 id="ssh密钥复制"><a href="#ssh密钥复制" class="headerlink" title="ssh密钥复制"></a>ssh密钥复制</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 ~/.ssh/id_rsa</span><br><span class="line">eval &quot;$(ssh-agent -s)&quot;</span><br><span class="line">ssh-add</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h2 id="bisect"><a href="#bisect" class="headerlink" title="bisect"></a>bisect</h2><p><a href="https://www.ruanyifeng.com/blog/2018/12/git-bisect.html">https://www.ruanyifeng.com/blog/2018/12/git-bisect.html</a></p><h2 id="sshkey-error"><a href="#sshkey-error" class="headerlink" title="sshkey error"></a>sshkey error</h2><ul><li><a href="https://stackoverflow.com/questions/69875520/git-error-no-matching-host-key-type-found-their-offer-ssh-rsa">https://stackoverflow.com/questions/69875520/git-error-no-matching-host-key-type-found-their-offer-ssh-rsa</a></li><li><a href="https://help.gitee.com/enterprise/code-manage/%E6%9D%83%E9%99%90%E4%B8%8E%E8%AE%BE%E7%BD%AE/%E9%83%A8%E7%BD%B2%E5%85%AC%E9%92%A5%E7%AE%A1%E7%90%86/SSH%20Key%20%E7%AA%81%E7%84%B6%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94%E5%8F%8A%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95">https://help.gitee.com/enterprise/code-manage/%E6%9D%83%E9%99%90%E4%B8%8E%E8%AE%BE%E7%BD%AE/%E9%83%A8%E7%BD%B2%E5%85%AC%E9%92%A5%E7%AE%A1%E7%90%86/SSH%20Key%20%E7%AA%81%E7%84%B6%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94%E5%8F%8A%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
